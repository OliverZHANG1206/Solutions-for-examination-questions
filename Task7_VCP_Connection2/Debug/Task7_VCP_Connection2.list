
Task7_VCP_Connection2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007784  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  08007890  08007890  00017890  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007934  08007934  000201f4  2**0
                  CONTENTS
  4 .ARM          00000000  08007934  08007934  000201f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007934  08007934  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007934  08007934  00017934  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007938  08007938  00017938  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800793c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011e0  200001f4  08007b30  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00001804  200013d4  08007b30  000213d4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011dcf  00000000  00000000  0002021d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ce5  00000000  00000000  00031fec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a30  00000000  00000000  00034cd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008e8  00000000  00000000  00035708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001981a  00000000  00000000  00035ff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d8a3  00000000  00000000  0004f80a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084f08  00000000  00000000  0005d0ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e1fb5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ac8  00000000  00000000  000e2008  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001f4 	.word	0x200001f4
 8000128:	00000000 	.word	0x00000000
 800012c:	08007878 	.word	0x08007878

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001f8 	.word	0x200001f8
 8000148:	08007878 	.word	0x08007878

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 f95e 	bl	8000410 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f812 	bl	800017c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f86c 	bl	8000234 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 800015c:	f006 fa4a 	bl	80065f4 <MX_USB_DEVICE_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    usb_send("%s\r\n",Txmsg);
 8000160:	4904      	ldr	r1, [pc, #16]	; (8000174 <main+0x28>)
 8000162:	4805      	ldr	r0, [pc, #20]	; (8000178 <main+0x2c>)
 8000164:	f006 fb2a 	bl	80067bc <usb_send>
    HAL_Delay(2000);
 8000168:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800016c:	f000 f9b2 	bl	80004d4 <HAL_Delay>
    usb_send("%s\r\n",Txmsg);
 8000170:	e7f6      	b.n	8000160 <main+0x14>
 8000172:	bf00      	nop
 8000174:	20000000 	.word	0x20000000
 8000178:	08007890 	.word	0x08007890

0800017c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800017c:	b580      	push	{r7, lr}
 800017e:	b094      	sub	sp, #80	; 0x50
 8000180:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000182:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000186:	2228      	movs	r2, #40	; 0x28
 8000188:	2100      	movs	r1, #0
 800018a:	4618      	mov	r0, r3
 800018c:	f006 ff18 	bl	8006fc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000190:	f107 0314 	add.w	r3, r7, #20
 8000194:	2200      	movs	r2, #0
 8000196:	601a      	str	r2, [r3, #0]
 8000198:	605a      	str	r2, [r3, #4]
 800019a:	609a      	str	r2, [r3, #8]
 800019c:	60da      	str	r2, [r3, #12]
 800019e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001a0:	1d3b      	adds	r3, r7, #4
 80001a2:	2200      	movs	r2, #0
 80001a4:	601a      	str	r2, [r3, #0]
 80001a6:	605a      	str	r2, [r3, #4]
 80001a8:	609a      	str	r2, [r3, #8]
 80001aa:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001ac:	2301      	movs	r3, #1
 80001ae:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001b6:	2300      	movs	r3, #0
 80001b8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001ba:	2301      	movs	r3, #1
 80001bc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001be:	2302      	movs	r3, #2
 80001c0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001c6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80001c8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80001cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001d2:	4618      	mov	r0, r3
 80001d4:	f001 ff74 	bl	80020c0 <HAL_RCC_OscConfig>
 80001d8:	4603      	mov	r3, r0
 80001da:	2b00      	cmp	r3, #0
 80001dc:	d001      	beq.n	80001e2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80001de:	f000 f84b 	bl	8000278 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001e2:	230f      	movs	r3, #15
 80001e4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001e6:	2302      	movs	r3, #2
 80001e8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001ea:	2300      	movs	r3, #0
 80001ec:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001f2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001f4:	2300      	movs	r3, #0
 80001f6:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80001f8:	f107 0314 	add.w	r3, r7, #20
 80001fc:	2101      	movs	r1, #1
 80001fe:	4618      	mov	r0, r3
 8000200:	f002 f9de 	bl	80025c0 <HAL_RCC_ClockConfig>
 8000204:	4603      	mov	r3, r0
 8000206:	2b00      	cmp	r3, #0
 8000208:	d001      	beq.n	800020e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800020a:	f000 f835 	bl	8000278 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800020e:	2310      	movs	r3, #16
 8000210:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000212:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000216:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000218:	1d3b      	adds	r3, r7, #4
 800021a:	4618      	mov	r0, r3
 800021c:	f002 fb38 	bl	8002890 <HAL_RCCEx_PeriphCLKConfig>
 8000220:	4603      	mov	r3, r0
 8000222:	2b00      	cmp	r3, #0
 8000224:	d001      	beq.n	800022a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000226:	f000 f827 	bl	8000278 <Error_Handler>
  }
}
 800022a:	bf00      	nop
 800022c:	3750      	adds	r7, #80	; 0x50
 800022e:	46bd      	mov	sp, r7
 8000230:	bd80      	pop	{r7, pc}
	...

08000234 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000234:	b480      	push	{r7}
 8000236:	b083      	sub	sp, #12
 8000238:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800023a:	4b0e      	ldr	r3, [pc, #56]	; (8000274 <MX_GPIO_Init+0x40>)
 800023c:	699b      	ldr	r3, [r3, #24]
 800023e:	4a0d      	ldr	r2, [pc, #52]	; (8000274 <MX_GPIO_Init+0x40>)
 8000240:	f043 0320 	orr.w	r3, r3, #32
 8000244:	6193      	str	r3, [r2, #24]
 8000246:	4b0b      	ldr	r3, [pc, #44]	; (8000274 <MX_GPIO_Init+0x40>)
 8000248:	699b      	ldr	r3, [r3, #24]
 800024a:	f003 0320 	and.w	r3, r3, #32
 800024e:	607b      	str	r3, [r7, #4]
 8000250:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000252:	4b08      	ldr	r3, [pc, #32]	; (8000274 <MX_GPIO_Init+0x40>)
 8000254:	699b      	ldr	r3, [r3, #24]
 8000256:	4a07      	ldr	r2, [pc, #28]	; (8000274 <MX_GPIO_Init+0x40>)
 8000258:	f043 0304 	orr.w	r3, r3, #4
 800025c:	6193      	str	r3, [r2, #24]
 800025e:	4b05      	ldr	r3, [pc, #20]	; (8000274 <MX_GPIO_Init+0x40>)
 8000260:	699b      	ldr	r3, [r3, #24]
 8000262:	f003 0304 	and.w	r3, r3, #4
 8000266:	603b      	str	r3, [r7, #0]
 8000268:	683b      	ldr	r3, [r7, #0]

}
 800026a:	bf00      	nop
 800026c:	370c      	adds	r7, #12
 800026e:	46bd      	mov	sp, r7
 8000270:	bc80      	pop	{r7}
 8000272:	4770      	bx	lr
 8000274:	40021000 	.word	0x40021000

08000278 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000278:	b480      	push	{r7}
 800027a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800027c:	b672      	cpsid	i
}
 800027e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000280:	e7fe      	b.n	8000280 <Error_Handler+0x8>
	...

08000284 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000284:	b480      	push	{r7}
 8000286:	b085      	sub	sp, #20
 8000288:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800028a:	4b15      	ldr	r3, [pc, #84]	; (80002e0 <HAL_MspInit+0x5c>)
 800028c:	699b      	ldr	r3, [r3, #24]
 800028e:	4a14      	ldr	r2, [pc, #80]	; (80002e0 <HAL_MspInit+0x5c>)
 8000290:	f043 0301 	orr.w	r3, r3, #1
 8000294:	6193      	str	r3, [r2, #24]
 8000296:	4b12      	ldr	r3, [pc, #72]	; (80002e0 <HAL_MspInit+0x5c>)
 8000298:	699b      	ldr	r3, [r3, #24]
 800029a:	f003 0301 	and.w	r3, r3, #1
 800029e:	60bb      	str	r3, [r7, #8]
 80002a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80002a2:	4b0f      	ldr	r3, [pc, #60]	; (80002e0 <HAL_MspInit+0x5c>)
 80002a4:	69db      	ldr	r3, [r3, #28]
 80002a6:	4a0e      	ldr	r2, [pc, #56]	; (80002e0 <HAL_MspInit+0x5c>)
 80002a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80002ac:	61d3      	str	r3, [r2, #28]
 80002ae:	4b0c      	ldr	r3, [pc, #48]	; (80002e0 <HAL_MspInit+0x5c>)
 80002b0:	69db      	ldr	r3, [r3, #28]
 80002b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80002b6:	607b      	str	r3, [r7, #4]
 80002b8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80002ba:	4b0a      	ldr	r3, [pc, #40]	; (80002e4 <HAL_MspInit+0x60>)
 80002bc:	685b      	ldr	r3, [r3, #4]
 80002be:	60fb      	str	r3, [r7, #12]
 80002c0:	68fb      	ldr	r3, [r7, #12]
 80002c2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80002c6:	60fb      	str	r3, [r7, #12]
 80002c8:	68fb      	ldr	r3, [r7, #12]
 80002ca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80002ce:	60fb      	str	r3, [r7, #12]
 80002d0:	4a04      	ldr	r2, [pc, #16]	; (80002e4 <HAL_MspInit+0x60>)
 80002d2:	68fb      	ldr	r3, [r7, #12]
 80002d4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80002d6:	bf00      	nop
 80002d8:	3714      	adds	r7, #20
 80002da:	46bd      	mov	sp, r7
 80002dc:	bc80      	pop	{r7}
 80002de:	4770      	bx	lr
 80002e0:	40021000 	.word	0x40021000
 80002e4:	40010000 	.word	0x40010000

080002e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80002e8:	b480      	push	{r7}
 80002ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80002ec:	e7fe      	b.n	80002ec <NMI_Handler+0x4>

080002ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80002ee:	b480      	push	{r7}
 80002f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80002f2:	e7fe      	b.n	80002f2 <HardFault_Handler+0x4>

080002f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80002f4:	b480      	push	{r7}
 80002f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80002f8:	e7fe      	b.n	80002f8 <MemManage_Handler+0x4>

080002fa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80002fa:	b480      	push	{r7}
 80002fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80002fe:	e7fe      	b.n	80002fe <BusFault_Handler+0x4>

08000300 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000300:	b480      	push	{r7}
 8000302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000304:	e7fe      	b.n	8000304 <UsageFault_Handler+0x4>

08000306 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000306:	b480      	push	{r7}
 8000308:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800030a:	bf00      	nop
 800030c:	46bd      	mov	sp, r7
 800030e:	bc80      	pop	{r7}
 8000310:	4770      	bx	lr

08000312 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000312:	b480      	push	{r7}
 8000314:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000316:	bf00      	nop
 8000318:	46bd      	mov	sp, r7
 800031a:	bc80      	pop	{r7}
 800031c:	4770      	bx	lr

0800031e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800031e:	b480      	push	{r7}
 8000320:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000322:	bf00      	nop
 8000324:	46bd      	mov	sp, r7
 8000326:	bc80      	pop	{r7}
 8000328:	4770      	bx	lr

0800032a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800032a:	b580      	push	{r7, lr}
 800032c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800032e:	f000 f8b5 	bl	800049c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000332:	bf00      	nop
 8000334:	bd80      	pop	{r7, pc}
	...

08000338 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800033c:	4802      	ldr	r0, [pc, #8]	; (8000348 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800033e:	f000 fb2b 	bl	8000998 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000342:	bf00      	nop
 8000344:	bd80      	pop	{r7, pc}
 8000346:	bf00      	nop
 8000348:	200010d8 	.word	0x200010d8

0800034c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	b086      	sub	sp, #24
 8000350:	af00      	add	r7, sp, #0
 8000352:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000354:	4a14      	ldr	r2, [pc, #80]	; (80003a8 <_sbrk+0x5c>)
 8000356:	4b15      	ldr	r3, [pc, #84]	; (80003ac <_sbrk+0x60>)
 8000358:	1ad3      	subs	r3, r2, r3
 800035a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800035c:	697b      	ldr	r3, [r7, #20]
 800035e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000360:	4b13      	ldr	r3, [pc, #76]	; (80003b0 <_sbrk+0x64>)
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	2b00      	cmp	r3, #0
 8000366:	d102      	bne.n	800036e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000368:	4b11      	ldr	r3, [pc, #68]	; (80003b0 <_sbrk+0x64>)
 800036a:	4a12      	ldr	r2, [pc, #72]	; (80003b4 <_sbrk+0x68>)
 800036c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800036e:	4b10      	ldr	r3, [pc, #64]	; (80003b0 <_sbrk+0x64>)
 8000370:	681a      	ldr	r2, [r3, #0]
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	4413      	add	r3, r2
 8000376:	693a      	ldr	r2, [r7, #16]
 8000378:	429a      	cmp	r2, r3
 800037a:	d207      	bcs.n	800038c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800037c:	f006 fdf6 	bl	8006f6c <__errno>
 8000380:	4603      	mov	r3, r0
 8000382:	220c      	movs	r2, #12
 8000384:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000386:	f04f 33ff 	mov.w	r3, #4294967295
 800038a:	e009      	b.n	80003a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800038c:	4b08      	ldr	r3, [pc, #32]	; (80003b0 <_sbrk+0x64>)
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000392:	4b07      	ldr	r3, [pc, #28]	; (80003b0 <_sbrk+0x64>)
 8000394:	681a      	ldr	r2, [r3, #0]
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	4413      	add	r3, r2
 800039a:	4a05      	ldr	r2, [pc, #20]	; (80003b0 <_sbrk+0x64>)
 800039c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800039e:	68fb      	ldr	r3, [r7, #12]
}
 80003a0:	4618      	mov	r0, r3
 80003a2:	3718      	adds	r7, #24
 80003a4:	46bd      	mov	sp, r7
 80003a6:	bd80      	pop	{r7, pc}
 80003a8:	20005000 	.word	0x20005000
 80003ac:	00000800 	.word	0x00000800
 80003b0:	20000210 	.word	0x20000210
 80003b4:	200013d8 	.word	0x200013d8

080003b8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80003b8:	b480      	push	{r7}
 80003ba:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80003bc:	bf00      	nop
 80003be:	46bd      	mov	sp, r7
 80003c0:	bc80      	pop	{r7}
 80003c2:	4770      	bx	lr

080003c4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003c4:	480c      	ldr	r0, [pc, #48]	; (80003f8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80003c6:	490d      	ldr	r1, [pc, #52]	; (80003fc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80003c8:	4a0d      	ldr	r2, [pc, #52]	; (8000400 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80003ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003cc:	e002      	b.n	80003d4 <LoopCopyDataInit>

080003ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003d2:	3304      	adds	r3, #4

080003d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003d8:	d3f9      	bcc.n	80003ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003da:	4a0a      	ldr	r2, [pc, #40]	; (8000404 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80003dc:	4c0a      	ldr	r4, [pc, #40]	; (8000408 <LoopFillZerobss+0x22>)
  movs r3, #0
 80003de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003e0:	e001      	b.n	80003e6 <LoopFillZerobss>

080003e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003e4:	3204      	adds	r2, #4

080003e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003e8:	d3fb      	bcc.n	80003e2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80003ea:	f7ff ffe5 	bl	80003b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80003ee:	f006 fdc3 	bl	8006f78 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003f2:	f7ff feab 	bl	800014c <main>
  bx lr
 80003f6:	4770      	bx	lr
  ldr r0, =_sdata
 80003f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003fc:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8000400:	0800793c 	.word	0x0800793c
  ldr r2, =_sbss
 8000404:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 8000408:	200013d4 	.word	0x200013d4

0800040c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800040c:	e7fe      	b.n	800040c <ADC1_2_IRQHandler>
	...

08000410 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000414:	4b08      	ldr	r3, [pc, #32]	; (8000438 <HAL_Init+0x28>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	4a07      	ldr	r2, [pc, #28]	; (8000438 <HAL_Init+0x28>)
 800041a:	f043 0310 	orr.w	r3, r3, #16
 800041e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000420:	2003      	movs	r0, #3
 8000422:	f000 f947 	bl	80006b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000426:	200f      	movs	r0, #15
 8000428:	f000 f808 	bl	800043c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800042c:	f7ff ff2a 	bl	8000284 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000430:	2300      	movs	r3, #0
}
 8000432:	4618      	mov	r0, r3
 8000434:	bd80      	pop	{r7, pc}
 8000436:	bf00      	nop
 8000438:	40022000 	.word	0x40022000

0800043c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b082      	sub	sp, #8
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000444:	4b12      	ldr	r3, [pc, #72]	; (8000490 <HAL_InitTick+0x54>)
 8000446:	681a      	ldr	r2, [r3, #0]
 8000448:	4b12      	ldr	r3, [pc, #72]	; (8000494 <HAL_InitTick+0x58>)
 800044a:	781b      	ldrb	r3, [r3, #0]
 800044c:	4619      	mov	r1, r3
 800044e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000452:	fbb3 f3f1 	udiv	r3, r3, r1
 8000456:	fbb2 f3f3 	udiv	r3, r2, r3
 800045a:	4618      	mov	r0, r3
 800045c:	f000 f95f 	bl	800071e <HAL_SYSTICK_Config>
 8000460:	4603      	mov	r3, r0
 8000462:	2b00      	cmp	r3, #0
 8000464:	d001      	beq.n	800046a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000466:	2301      	movs	r3, #1
 8000468:	e00e      	b.n	8000488 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	2b0f      	cmp	r3, #15
 800046e:	d80a      	bhi.n	8000486 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000470:	2200      	movs	r2, #0
 8000472:	6879      	ldr	r1, [r7, #4]
 8000474:	f04f 30ff 	mov.w	r0, #4294967295
 8000478:	f000 f927 	bl	80006ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800047c:	4a06      	ldr	r2, [pc, #24]	; (8000498 <HAL_InitTick+0x5c>)
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000482:	2300      	movs	r3, #0
 8000484:	e000      	b.n	8000488 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000486:	2301      	movs	r3, #1
}
 8000488:	4618      	mov	r0, r3
 800048a:	3708      	adds	r7, #8
 800048c:	46bd      	mov	sp, r7
 800048e:	bd80      	pop	{r7, pc}
 8000490:	20000014 	.word	0x20000014
 8000494:	2000001c 	.word	0x2000001c
 8000498:	20000018 	.word	0x20000018

0800049c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800049c:	b480      	push	{r7}
 800049e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80004a0:	4b05      	ldr	r3, [pc, #20]	; (80004b8 <HAL_IncTick+0x1c>)
 80004a2:	781b      	ldrb	r3, [r3, #0]
 80004a4:	461a      	mov	r2, r3
 80004a6:	4b05      	ldr	r3, [pc, #20]	; (80004bc <HAL_IncTick+0x20>)
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	4413      	add	r3, r2
 80004ac:	4a03      	ldr	r2, [pc, #12]	; (80004bc <HAL_IncTick+0x20>)
 80004ae:	6013      	str	r3, [r2, #0]
}
 80004b0:	bf00      	nop
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bc80      	pop	{r7}
 80004b6:	4770      	bx	lr
 80004b8:	2000001c 	.word	0x2000001c
 80004bc:	20000440 	.word	0x20000440

080004c0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80004c0:	b480      	push	{r7}
 80004c2:	af00      	add	r7, sp, #0
  return uwTick;
 80004c4:	4b02      	ldr	r3, [pc, #8]	; (80004d0 <HAL_GetTick+0x10>)
 80004c6:	681b      	ldr	r3, [r3, #0]
}
 80004c8:	4618      	mov	r0, r3
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bc80      	pop	{r7}
 80004ce:	4770      	bx	lr
 80004d0:	20000440 	.word	0x20000440

080004d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b084      	sub	sp, #16
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80004dc:	f7ff fff0 	bl	80004c0 <HAL_GetTick>
 80004e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80004e6:	68fb      	ldr	r3, [r7, #12]
 80004e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80004ec:	d005      	beq.n	80004fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80004ee:	4b0a      	ldr	r3, [pc, #40]	; (8000518 <HAL_Delay+0x44>)
 80004f0:	781b      	ldrb	r3, [r3, #0]
 80004f2:	461a      	mov	r2, r3
 80004f4:	68fb      	ldr	r3, [r7, #12]
 80004f6:	4413      	add	r3, r2
 80004f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80004fa:	bf00      	nop
 80004fc:	f7ff ffe0 	bl	80004c0 <HAL_GetTick>
 8000500:	4602      	mov	r2, r0
 8000502:	68bb      	ldr	r3, [r7, #8]
 8000504:	1ad3      	subs	r3, r2, r3
 8000506:	68fa      	ldr	r2, [r7, #12]
 8000508:	429a      	cmp	r2, r3
 800050a:	d8f7      	bhi.n	80004fc <HAL_Delay+0x28>
  {
  }
}
 800050c:	bf00      	nop
 800050e:	bf00      	nop
 8000510:	3710      	adds	r7, #16
 8000512:	46bd      	mov	sp, r7
 8000514:	bd80      	pop	{r7, pc}
 8000516:	bf00      	nop
 8000518:	2000001c 	.word	0x2000001c

0800051c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800051c:	b480      	push	{r7}
 800051e:	b085      	sub	sp, #20
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	f003 0307 	and.w	r3, r3, #7
 800052a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800052c:	4b0c      	ldr	r3, [pc, #48]	; (8000560 <__NVIC_SetPriorityGrouping+0x44>)
 800052e:	68db      	ldr	r3, [r3, #12]
 8000530:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000532:	68ba      	ldr	r2, [r7, #8]
 8000534:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000538:	4013      	ands	r3, r2
 800053a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800053c:	68fb      	ldr	r3, [r7, #12]
 800053e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000540:	68bb      	ldr	r3, [r7, #8]
 8000542:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000544:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000548:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800054c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800054e:	4a04      	ldr	r2, [pc, #16]	; (8000560 <__NVIC_SetPriorityGrouping+0x44>)
 8000550:	68bb      	ldr	r3, [r7, #8]
 8000552:	60d3      	str	r3, [r2, #12]
}
 8000554:	bf00      	nop
 8000556:	3714      	adds	r7, #20
 8000558:	46bd      	mov	sp, r7
 800055a:	bc80      	pop	{r7}
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop
 8000560:	e000ed00 	.word	0xe000ed00

08000564 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000564:	b480      	push	{r7}
 8000566:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000568:	4b04      	ldr	r3, [pc, #16]	; (800057c <__NVIC_GetPriorityGrouping+0x18>)
 800056a:	68db      	ldr	r3, [r3, #12]
 800056c:	0a1b      	lsrs	r3, r3, #8
 800056e:	f003 0307 	and.w	r3, r3, #7
}
 8000572:	4618      	mov	r0, r3
 8000574:	46bd      	mov	sp, r7
 8000576:	bc80      	pop	{r7}
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop
 800057c:	e000ed00 	.word	0xe000ed00

08000580 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000580:	b480      	push	{r7}
 8000582:	b083      	sub	sp, #12
 8000584:	af00      	add	r7, sp, #0
 8000586:	4603      	mov	r3, r0
 8000588:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800058a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800058e:	2b00      	cmp	r3, #0
 8000590:	db0b      	blt.n	80005aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000592:	79fb      	ldrb	r3, [r7, #7]
 8000594:	f003 021f 	and.w	r2, r3, #31
 8000598:	4906      	ldr	r1, [pc, #24]	; (80005b4 <__NVIC_EnableIRQ+0x34>)
 800059a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800059e:	095b      	lsrs	r3, r3, #5
 80005a0:	2001      	movs	r0, #1
 80005a2:	fa00 f202 	lsl.w	r2, r0, r2
 80005a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80005aa:	bf00      	nop
 80005ac:	370c      	adds	r7, #12
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bc80      	pop	{r7}
 80005b2:	4770      	bx	lr
 80005b4:	e000e100 	.word	0xe000e100

080005b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005b8:	b480      	push	{r7}
 80005ba:	b083      	sub	sp, #12
 80005bc:	af00      	add	r7, sp, #0
 80005be:	4603      	mov	r3, r0
 80005c0:	6039      	str	r1, [r7, #0]
 80005c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	db0a      	blt.n	80005e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005cc:	683b      	ldr	r3, [r7, #0]
 80005ce:	b2da      	uxtb	r2, r3
 80005d0:	490c      	ldr	r1, [pc, #48]	; (8000604 <__NVIC_SetPriority+0x4c>)
 80005d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005d6:	0112      	lsls	r2, r2, #4
 80005d8:	b2d2      	uxtb	r2, r2
 80005da:	440b      	add	r3, r1
 80005dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80005e0:	e00a      	b.n	80005f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005e2:	683b      	ldr	r3, [r7, #0]
 80005e4:	b2da      	uxtb	r2, r3
 80005e6:	4908      	ldr	r1, [pc, #32]	; (8000608 <__NVIC_SetPriority+0x50>)
 80005e8:	79fb      	ldrb	r3, [r7, #7]
 80005ea:	f003 030f 	and.w	r3, r3, #15
 80005ee:	3b04      	subs	r3, #4
 80005f0:	0112      	lsls	r2, r2, #4
 80005f2:	b2d2      	uxtb	r2, r2
 80005f4:	440b      	add	r3, r1
 80005f6:	761a      	strb	r2, [r3, #24]
}
 80005f8:	bf00      	nop
 80005fa:	370c      	adds	r7, #12
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bc80      	pop	{r7}
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop
 8000604:	e000e100 	.word	0xe000e100
 8000608:	e000ed00 	.word	0xe000ed00

0800060c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800060c:	b480      	push	{r7}
 800060e:	b089      	sub	sp, #36	; 0x24
 8000610:	af00      	add	r7, sp, #0
 8000612:	60f8      	str	r0, [r7, #12]
 8000614:	60b9      	str	r1, [r7, #8]
 8000616:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	f003 0307 	and.w	r3, r3, #7
 800061e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000620:	69fb      	ldr	r3, [r7, #28]
 8000622:	f1c3 0307 	rsb	r3, r3, #7
 8000626:	2b04      	cmp	r3, #4
 8000628:	bf28      	it	cs
 800062a:	2304      	movcs	r3, #4
 800062c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800062e:	69fb      	ldr	r3, [r7, #28]
 8000630:	3304      	adds	r3, #4
 8000632:	2b06      	cmp	r3, #6
 8000634:	d902      	bls.n	800063c <NVIC_EncodePriority+0x30>
 8000636:	69fb      	ldr	r3, [r7, #28]
 8000638:	3b03      	subs	r3, #3
 800063a:	e000      	b.n	800063e <NVIC_EncodePriority+0x32>
 800063c:	2300      	movs	r3, #0
 800063e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000640:	f04f 32ff 	mov.w	r2, #4294967295
 8000644:	69bb      	ldr	r3, [r7, #24]
 8000646:	fa02 f303 	lsl.w	r3, r2, r3
 800064a:	43da      	mvns	r2, r3
 800064c:	68bb      	ldr	r3, [r7, #8]
 800064e:	401a      	ands	r2, r3
 8000650:	697b      	ldr	r3, [r7, #20]
 8000652:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000654:	f04f 31ff 	mov.w	r1, #4294967295
 8000658:	697b      	ldr	r3, [r7, #20]
 800065a:	fa01 f303 	lsl.w	r3, r1, r3
 800065e:	43d9      	mvns	r1, r3
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000664:	4313      	orrs	r3, r2
         );
}
 8000666:	4618      	mov	r0, r3
 8000668:	3724      	adds	r7, #36	; 0x24
 800066a:	46bd      	mov	sp, r7
 800066c:	bc80      	pop	{r7}
 800066e:	4770      	bx	lr

08000670 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	3b01      	subs	r3, #1
 800067c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000680:	d301      	bcc.n	8000686 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000682:	2301      	movs	r3, #1
 8000684:	e00f      	b.n	80006a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000686:	4a0a      	ldr	r2, [pc, #40]	; (80006b0 <SysTick_Config+0x40>)
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	3b01      	subs	r3, #1
 800068c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800068e:	210f      	movs	r1, #15
 8000690:	f04f 30ff 	mov.w	r0, #4294967295
 8000694:	f7ff ff90 	bl	80005b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000698:	4b05      	ldr	r3, [pc, #20]	; (80006b0 <SysTick_Config+0x40>)
 800069a:	2200      	movs	r2, #0
 800069c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800069e:	4b04      	ldr	r3, [pc, #16]	; (80006b0 <SysTick_Config+0x40>)
 80006a0:	2207      	movs	r2, #7
 80006a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80006a4:	2300      	movs	r3, #0
}
 80006a6:	4618      	mov	r0, r3
 80006a8:	3708      	adds	r7, #8
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	e000e010 	.word	0xe000e010

080006b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80006bc:	6878      	ldr	r0, [r7, #4]
 80006be:	f7ff ff2d 	bl	800051c <__NVIC_SetPriorityGrouping>
}
 80006c2:	bf00      	nop
 80006c4:	3708      	adds	r7, #8
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}

080006ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80006ca:	b580      	push	{r7, lr}
 80006cc:	b086      	sub	sp, #24
 80006ce:	af00      	add	r7, sp, #0
 80006d0:	4603      	mov	r3, r0
 80006d2:	60b9      	str	r1, [r7, #8]
 80006d4:	607a      	str	r2, [r7, #4]
 80006d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80006d8:	2300      	movs	r3, #0
 80006da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80006dc:	f7ff ff42 	bl	8000564 <__NVIC_GetPriorityGrouping>
 80006e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80006e2:	687a      	ldr	r2, [r7, #4]
 80006e4:	68b9      	ldr	r1, [r7, #8]
 80006e6:	6978      	ldr	r0, [r7, #20]
 80006e8:	f7ff ff90 	bl	800060c <NVIC_EncodePriority>
 80006ec:	4602      	mov	r2, r0
 80006ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80006f2:	4611      	mov	r1, r2
 80006f4:	4618      	mov	r0, r3
 80006f6:	f7ff ff5f 	bl	80005b8 <__NVIC_SetPriority>
}
 80006fa:	bf00      	nop
 80006fc:	3718      	adds	r7, #24
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}

08000702 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000702:	b580      	push	{r7, lr}
 8000704:	b082      	sub	sp, #8
 8000706:	af00      	add	r7, sp, #0
 8000708:	4603      	mov	r3, r0
 800070a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800070c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000710:	4618      	mov	r0, r3
 8000712:	f7ff ff35 	bl	8000580 <__NVIC_EnableIRQ>
}
 8000716:	bf00      	nop
 8000718:	3708      	adds	r7, #8
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}

0800071e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800071e:	b580      	push	{r7, lr}
 8000720:	b082      	sub	sp, #8
 8000722:	af00      	add	r7, sp, #0
 8000724:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000726:	6878      	ldr	r0, [r7, #4]
 8000728:	f7ff ffa2 	bl	8000670 <SysTick_Config>
 800072c:	4603      	mov	r3, r0
}
 800072e:	4618      	mov	r0, r3
 8000730:	3708      	adds	r7, #8
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}

08000736 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000736:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000738:	b08b      	sub	sp, #44	; 0x2c
 800073a:	af06      	add	r7, sp, #24
 800073c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	2b00      	cmp	r3, #0
 8000742:	d101      	bne.n	8000748 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000744:	2301      	movs	r3, #1
 8000746:	e0fd      	b.n	8000944 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800074e:	b2db      	uxtb	r3, r3
 8000750:	2b00      	cmp	r3, #0
 8000752:	d106      	bne.n	8000762 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	2200      	movs	r2, #0
 8000758:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800075c:	6878      	ldr	r0, [r7, #4]
 800075e:	f006 f95b 	bl	8006a18 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	2203      	movs	r2, #3
 8000766:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	4618      	mov	r0, r3
 8000770:	f002 f96a 	bl	8002a48 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	603b      	str	r3, [r7, #0]
 800077a:	687e      	ldr	r6, [r7, #4]
 800077c:	466d      	mov	r5, sp
 800077e:	f106 0410 	add.w	r4, r6, #16
 8000782:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000784:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000786:	6823      	ldr	r3, [r4, #0]
 8000788:	602b      	str	r3, [r5, #0]
 800078a:	1d33      	adds	r3, r6, #4
 800078c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800078e:	6838      	ldr	r0, [r7, #0]
 8000790:	f002 f934 	bl	80029fc <USB_CoreInit>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d005      	beq.n	80007a6 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	2202      	movs	r2, #2
 800079e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80007a2:	2301      	movs	r3, #1
 80007a4:	e0ce      	b.n	8000944 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	2100      	movs	r1, #0
 80007ac:	4618      	mov	r0, r3
 80007ae:	f002 f965 	bl	8002a7c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80007b2:	2300      	movs	r3, #0
 80007b4:	73fb      	strb	r3, [r7, #15]
 80007b6:	e04c      	b.n	8000852 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80007b8:	7bfb      	ldrb	r3, [r7, #15]
 80007ba:	6879      	ldr	r1, [r7, #4]
 80007bc:	1c5a      	adds	r2, r3, #1
 80007be:	4613      	mov	r3, r2
 80007c0:	009b      	lsls	r3, r3, #2
 80007c2:	4413      	add	r3, r2
 80007c4:	00db      	lsls	r3, r3, #3
 80007c6:	440b      	add	r3, r1
 80007c8:	3301      	adds	r3, #1
 80007ca:	2201      	movs	r2, #1
 80007cc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80007ce:	7bfb      	ldrb	r3, [r7, #15]
 80007d0:	6879      	ldr	r1, [r7, #4]
 80007d2:	1c5a      	adds	r2, r3, #1
 80007d4:	4613      	mov	r3, r2
 80007d6:	009b      	lsls	r3, r3, #2
 80007d8:	4413      	add	r3, r2
 80007da:	00db      	lsls	r3, r3, #3
 80007dc:	440b      	add	r3, r1
 80007de:	7bfa      	ldrb	r2, [r7, #15]
 80007e0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80007e2:	7bfa      	ldrb	r2, [r7, #15]
 80007e4:	7bfb      	ldrb	r3, [r7, #15]
 80007e6:	b298      	uxth	r0, r3
 80007e8:	6879      	ldr	r1, [r7, #4]
 80007ea:	4613      	mov	r3, r2
 80007ec:	009b      	lsls	r3, r3, #2
 80007ee:	4413      	add	r3, r2
 80007f0:	00db      	lsls	r3, r3, #3
 80007f2:	440b      	add	r3, r1
 80007f4:	3336      	adds	r3, #54	; 0x36
 80007f6:	4602      	mov	r2, r0
 80007f8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80007fa:	7bfb      	ldrb	r3, [r7, #15]
 80007fc:	6879      	ldr	r1, [r7, #4]
 80007fe:	1c5a      	adds	r2, r3, #1
 8000800:	4613      	mov	r3, r2
 8000802:	009b      	lsls	r3, r3, #2
 8000804:	4413      	add	r3, r2
 8000806:	00db      	lsls	r3, r3, #3
 8000808:	440b      	add	r3, r1
 800080a:	3303      	adds	r3, #3
 800080c:	2200      	movs	r2, #0
 800080e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000810:	7bfa      	ldrb	r2, [r7, #15]
 8000812:	6879      	ldr	r1, [r7, #4]
 8000814:	4613      	mov	r3, r2
 8000816:	009b      	lsls	r3, r3, #2
 8000818:	4413      	add	r3, r2
 800081a:	00db      	lsls	r3, r3, #3
 800081c:	440b      	add	r3, r1
 800081e:	3338      	adds	r3, #56	; 0x38
 8000820:	2200      	movs	r2, #0
 8000822:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000824:	7bfa      	ldrb	r2, [r7, #15]
 8000826:	6879      	ldr	r1, [r7, #4]
 8000828:	4613      	mov	r3, r2
 800082a:	009b      	lsls	r3, r3, #2
 800082c:	4413      	add	r3, r2
 800082e:	00db      	lsls	r3, r3, #3
 8000830:	440b      	add	r3, r1
 8000832:	333c      	adds	r3, #60	; 0x3c
 8000834:	2200      	movs	r2, #0
 8000836:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000838:	7bfa      	ldrb	r2, [r7, #15]
 800083a:	6879      	ldr	r1, [r7, #4]
 800083c:	4613      	mov	r3, r2
 800083e:	009b      	lsls	r3, r3, #2
 8000840:	4413      	add	r3, r2
 8000842:	00db      	lsls	r3, r3, #3
 8000844:	440b      	add	r3, r1
 8000846:	3340      	adds	r3, #64	; 0x40
 8000848:	2200      	movs	r2, #0
 800084a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800084c:	7bfb      	ldrb	r3, [r7, #15]
 800084e:	3301      	adds	r3, #1
 8000850:	73fb      	strb	r3, [r7, #15]
 8000852:	7bfa      	ldrb	r2, [r7, #15]
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	685b      	ldr	r3, [r3, #4]
 8000858:	429a      	cmp	r2, r3
 800085a:	d3ad      	bcc.n	80007b8 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800085c:	2300      	movs	r3, #0
 800085e:	73fb      	strb	r3, [r7, #15]
 8000860:	e044      	b.n	80008ec <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000862:	7bfa      	ldrb	r2, [r7, #15]
 8000864:	6879      	ldr	r1, [r7, #4]
 8000866:	4613      	mov	r3, r2
 8000868:	009b      	lsls	r3, r3, #2
 800086a:	4413      	add	r3, r2
 800086c:	00db      	lsls	r3, r3, #3
 800086e:	440b      	add	r3, r1
 8000870:	f203 1369 	addw	r3, r3, #361	; 0x169
 8000874:	2200      	movs	r2, #0
 8000876:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000878:	7bfa      	ldrb	r2, [r7, #15]
 800087a:	6879      	ldr	r1, [r7, #4]
 800087c:	4613      	mov	r3, r2
 800087e:	009b      	lsls	r3, r3, #2
 8000880:	4413      	add	r3, r2
 8000882:	00db      	lsls	r3, r3, #3
 8000884:	440b      	add	r3, r1
 8000886:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800088a:	7bfa      	ldrb	r2, [r7, #15]
 800088c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800088e:	7bfa      	ldrb	r2, [r7, #15]
 8000890:	6879      	ldr	r1, [r7, #4]
 8000892:	4613      	mov	r3, r2
 8000894:	009b      	lsls	r3, r3, #2
 8000896:	4413      	add	r3, r2
 8000898:	00db      	lsls	r3, r3, #3
 800089a:	440b      	add	r3, r1
 800089c:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80008a0:	2200      	movs	r2, #0
 80008a2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80008a4:	7bfa      	ldrb	r2, [r7, #15]
 80008a6:	6879      	ldr	r1, [r7, #4]
 80008a8:	4613      	mov	r3, r2
 80008aa:	009b      	lsls	r3, r3, #2
 80008ac:	4413      	add	r3, r2
 80008ae:	00db      	lsls	r3, r3, #3
 80008b0:	440b      	add	r3, r1
 80008b2:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80008b6:	2200      	movs	r2, #0
 80008b8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80008ba:	7bfa      	ldrb	r2, [r7, #15]
 80008bc:	6879      	ldr	r1, [r7, #4]
 80008be:	4613      	mov	r3, r2
 80008c0:	009b      	lsls	r3, r3, #2
 80008c2:	4413      	add	r3, r2
 80008c4:	00db      	lsls	r3, r3, #3
 80008c6:	440b      	add	r3, r1
 80008c8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80008cc:	2200      	movs	r2, #0
 80008ce:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80008d0:	7bfa      	ldrb	r2, [r7, #15]
 80008d2:	6879      	ldr	r1, [r7, #4]
 80008d4:	4613      	mov	r3, r2
 80008d6:	009b      	lsls	r3, r3, #2
 80008d8:	4413      	add	r3, r2
 80008da:	00db      	lsls	r3, r3, #3
 80008dc:	440b      	add	r3, r1
 80008de:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80008e2:	2200      	movs	r2, #0
 80008e4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80008e6:	7bfb      	ldrb	r3, [r7, #15]
 80008e8:	3301      	adds	r3, #1
 80008ea:	73fb      	strb	r3, [r7, #15]
 80008ec:	7bfa      	ldrb	r2, [r7, #15]
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	685b      	ldr	r3, [r3, #4]
 80008f2:	429a      	cmp	r2, r3
 80008f4:	d3b5      	bcc.n	8000862 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	603b      	str	r3, [r7, #0]
 80008fc:	687e      	ldr	r6, [r7, #4]
 80008fe:	466d      	mov	r5, sp
 8000900:	f106 0410 	add.w	r4, r6, #16
 8000904:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000906:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000908:	6823      	ldr	r3, [r4, #0]
 800090a:	602b      	str	r3, [r5, #0]
 800090c:	1d33      	adds	r3, r6, #4
 800090e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000910:	6838      	ldr	r0, [r7, #0]
 8000912:	f002 f8bf 	bl	8002a94 <USB_DevInit>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d005      	beq.n	8000928 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	2202      	movs	r2, #2
 8000920:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8000924:	2301      	movs	r3, #1
 8000926:	e00d      	b.n	8000944 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	2200      	movs	r2, #0
 800092c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	2201      	movs	r2, #1
 8000934:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4618      	mov	r0, r3
 800093e:	f004 fa30 	bl	8004da2 <USB_DevDisconnect>

  return HAL_OK;
 8000942:	2300      	movs	r3, #0
}
 8000944:	4618      	mov	r0, r3
 8000946:	3714      	adds	r7, #20
 8000948:	46bd      	mov	sp, r7
 800094a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800094c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800095a:	2b01      	cmp	r3, #1
 800095c:	d101      	bne.n	8000962 <HAL_PCD_Start+0x16>
 800095e:	2302      	movs	r3, #2
 8000960:	e016      	b.n	8000990 <HAL_PCD_Start+0x44>
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	2201      	movs	r2, #1
 8000966:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	4618      	mov	r0, r3
 8000970:	f002 f854 	bl	8002a1c <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8000974:	2101      	movs	r1, #1
 8000976:	6878      	ldr	r0, [r7, #4]
 8000978:	f006 fac1 	bl	8006efe <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4618      	mov	r0, r3
 8000982:	f004 fa04 	bl	8004d8e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	2200      	movs	r2, #0
 800098a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800098e:	2300      	movs	r3, #0
}
 8000990:	4618      	mov	r0, r3
 8000992:	3708      	adds	r7, #8
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}

08000998 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b088      	sub	sp, #32
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4618      	mov	r0, r3
 80009a6:	f004 fa06 	bl	8004db6 <USB_ReadInterrupts>
 80009aa:	4603      	mov	r3, r0
 80009ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80009b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80009b4:	d102      	bne.n	80009bc <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80009b6:	6878      	ldr	r0, [r7, #4]
 80009b8:	f000 fb61 	bl	800107e <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4618      	mov	r0, r3
 80009c2:	f004 f9f8 	bl	8004db6 <USB_ReadInterrupts>
 80009c6:	4603      	mov	r3, r0
 80009c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80009cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80009d0:	d112      	bne.n	80009f8 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80009da:	b29a      	uxth	r2, r3
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80009e4:	b292      	uxth	r2, r2
 80009e6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80009ea:	6878      	ldr	r0, [r7, #4]
 80009ec:	f006 f88f 	bl	8006b0e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80009f0:	2100      	movs	r1, #0
 80009f2:	6878      	ldr	r0, [r7, #4]
 80009f4:	f000 f925 	bl	8000c42 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4618      	mov	r0, r3
 80009fe:	f004 f9da 	bl	8004db6 <USB_ReadInterrupts>
 8000a02:	4603      	mov	r3, r0
 8000a04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a08:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000a0c:	d10b      	bne.n	8000a26 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000a16:	b29a      	uxth	r2, r3
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000a20:	b292      	uxth	r2, r2
 8000a22:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f004 f9c3 	bl	8004db6 <USB_ReadInterrupts>
 8000a30:	4603      	mov	r3, r0
 8000a32:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a3a:	d10b      	bne.n	8000a54 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000a44:	b29a      	uxth	r2, r3
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000a4e:	b292      	uxth	r2, r2
 8000a50:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f004 f9ac 	bl	8004db6 <USB_ReadInterrupts>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000a68:	d126      	bne.n	8000ab8 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000a72:	b29a      	uxth	r2, r3
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	f022 0204 	bic.w	r2, r2, #4
 8000a7c:	b292      	uxth	r2, r2
 8000a7e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000a8a:	b29a      	uxth	r2, r3
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	f022 0208 	bic.w	r2, r2, #8
 8000a94:	b292      	uxth	r2, r2
 8000a96:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8000a9a:	6878      	ldr	r0, [r7, #4]
 8000a9c:	f006 f870 	bl	8006b80 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000aa8:	b29a      	uxth	r2, r3
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000ab2:	b292      	uxth	r2, r2
 8000ab4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4618      	mov	r0, r3
 8000abe:	f004 f97a 	bl	8004db6 <USB_ReadInterrupts>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000ac8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000acc:	f040 8084 	bne.w	8000bd8 <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	77fb      	strb	r3, [r7, #31]
 8000ad4:	e011      	b.n	8000afa <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	461a      	mov	r2, r3
 8000adc:	7ffb      	ldrb	r3, [r7, #31]
 8000ade:	009b      	lsls	r3, r3, #2
 8000ae0:	441a      	add	r2, r3
 8000ae2:	7ffb      	ldrb	r3, [r7, #31]
 8000ae4:	8812      	ldrh	r2, [r2, #0]
 8000ae6:	b292      	uxth	r2, r2
 8000ae8:	005b      	lsls	r3, r3, #1
 8000aea:	f107 0120 	add.w	r1, r7, #32
 8000aee:	440b      	add	r3, r1
 8000af0:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8000af4:	7ffb      	ldrb	r3, [r7, #31]
 8000af6:	3301      	adds	r3, #1
 8000af8:	77fb      	strb	r3, [r7, #31]
 8000afa:	7ffb      	ldrb	r3, [r7, #31]
 8000afc:	2b07      	cmp	r3, #7
 8000afe:	d9ea      	bls.n	8000ad6 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000b08:	b29a      	uxth	r2, r3
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	f042 0201 	orr.w	r2, r2, #1
 8000b12:	b292      	uxth	r2, r2
 8000b14:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000b20:	b29a      	uxth	r2, r3
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	f022 0201 	bic.w	r2, r2, #1
 8000b2a:	b292      	uxth	r2, r2
 8000b2c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8000b30:	bf00      	nop
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000b3a:	b29b      	uxth	r3, r3
 8000b3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d0f6      	beq.n	8000b32 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000b4c:	b29a      	uxth	r2, r3
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000b56:	b292      	uxth	r2, r2
 8000b58:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	77fb      	strb	r3, [r7, #31]
 8000b60:	e010      	b.n	8000b84 <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8000b62:	7ffb      	ldrb	r3, [r7, #31]
 8000b64:	687a      	ldr	r2, [r7, #4]
 8000b66:	6812      	ldr	r2, [r2, #0]
 8000b68:	4611      	mov	r1, r2
 8000b6a:	7ffa      	ldrb	r2, [r7, #31]
 8000b6c:	0092      	lsls	r2, r2, #2
 8000b6e:	440a      	add	r2, r1
 8000b70:	005b      	lsls	r3, r3, #1
 8000b72:	f107 0120 	add.w	r1, r7, #32
 8000b76:	440b      	add	r3, r1
 8000b78:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8000b7c:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8000b7e:	7ffb      	ldrb	r3, [r7, #31]
 8000b80:	3301      	adds	r3, #1
 8000b82:	77fb      	strb	r3, [r7, #31]
 8000b84:	7ffb      	ldrb	r3, [r7, #31]
 8000b86:	2b07      	cmp	r3, #7
 8000b88:	d9eb      	bls.n	8000b62 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000b92:	b29a      	uxth	r2, r3
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	f042 0208 	orr.w	r2, r2, #8
 8000b9c:	b292      	uxth	r2, r2
 8000b9e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000baa:	b29a      	uxth	r2, r3
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000bb4:	b292      	uxth	r2, r2
 8000bb6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000bc2:	b29a      	uxth	r2, r3
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	f042 0204 	orr.w	r2, r2, #4
 8000bcc:	b292      	uxth	r2, r2
 8000bce:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8000bd2:	6878      	ldr	r0, [r7, #4]
 8000bd4:	f005 ffba 	bl	8006b4c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f004 f8ea 	bl	8004db6 <USB_ReadInterrupts>
 8000be2:	4603      	mov	r3, r0
 8000be4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000be8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000bec:	d10e      	bne.n	8000c0c <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000bf6:	b29a      	uxth	r2, r3
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000c00:	b292      	uxth	r2, r2
 8000c02:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8000c06:	6878      	ldr	r0, [r7, #4]
 8000c08:	f005 ff73 	bl	8006af2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4618      	mov	r0, r3
 8000c12:	f004 f8d0 	bl	8004db6 <USB_ReadInterrupts>
 8000c16:	4603      	mov	r3, r0
 8000c18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000c20:	d10b      	bne.n	8000c3a <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000c2a:	b29a      	uxth	r2, r3
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000c34:	b292      	uxth	r2, r2
 8000c36:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8000c3a:	bf00      	nop
 8000c3c:	3720      	adds	r7, #32
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}

08000c42 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8000c42:	b580      	push	{r7, lr}
 8000c44:	b082      	sub	sp, #8
 8000c46:	af00      	add	r7, sp, #0
 8000c48:	6078      	str	r0, [r7, #4]
 8000c4a:	460b      	mov	r3, r1
 8000c4c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000c54:	2b01      	cmp	r3, #1
 8000c56:	d101      	bne.n	8000c5c <HAL_PCD_SetAddress+0x1a>
 8000c58:	2302      	movs	r3, #2
 8000c5a:	e013      	b.n	8000c84 <HAL_PCD_SetAddress+0x42>
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	2201      	movs	r2, #1
 8000c60:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	78fa      	ldrb	r2, [r7, #3]
 8000c68:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	78fa      	ldrb	r2, [r7, #3]
 8000c72:	4611      	mov	r1, r2
 8000c74:	4618      	mov	r0, r3
 8000c76:	f004 f877 	bl	8004d68 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8000c82:	2300      	movs	r3, #0
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	3708      	adds	r7, #8
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}

08000c8c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b084      	sub	sp, #16
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
 8000c94:	4608      	mov	r0, r1
 8000c96:	4611      	mov	r1, r2
 8000c98:	461a      	mov	r2, r3
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	70fb      	strb	r3, [r7, #3]
 8000c9e:	460b      	mov	r3, r1
 8000ca0:	803b      	strh	r3, [r7, #0]
 8000ca2:	4613      	mov	r3, r2
 8000ca4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8000caa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	da0e      	bge.n	8000cd0 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000cb2:	78fb      	ldrb	r3, [r7, #3]
 8000cb4:	f003 0307 	and.w	r3, r3, #7
 8000cb8:	1c5a      	adds	r2, r3, #1
 8000cba:	4613      	mov	r3, r2
 8000cbc:	009b      	lsls	r3, r3, #2
 8000cbe:	4413      	add	r3, r2
 8000cc0:	00db      	lsls	r3, r3, #3
 8000cc2:	687a      	ldr	r2, [r7, #4]
 8000cc4:	4413      	add	r3, r2
 8000cc6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	2201      	movs	r2, #1
 8000ccc:	705a      	strb	r2, [r3, #1]
 8000cce:	e00e      	b.n	8000cee <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000cd0:	78fb      	ldrb	r3, [r7, #3]
 8000cd2:	f003 0207 	and.w	r2, r3, #7
 8000cd6:	4613      	mov	r3, r2
 8000cd8:	009b      	lsls	r3, r3, #2
 8000cda:	4413      	add	r3, r2
 8000cdc:	00db      	lsls	r3, r3, #3
 8000cde:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000ce2:	687a      	ldr	r2, [r7, #4]
 8000ce4:	4413      	add	r3, r2
 8000ce6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	2200      	movs	r2, #0
 8000cec:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8000cee:	78fb      	ldrb	r3, [r7, #3]
 8000cf0:	f003 0307 	and.w	r3, r3, #7
 8000cf4:	b2da      	uxtb	r2, r3
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8000cfa:	883a      	ldrh	r2, [r7, #0]
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	78ba      	ldrb	r2, [r7, #2]
 8000d04:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	785b      	ldrb	r3, [r3, #1]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d004      	beq.n	8000d18 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	b29a      	uxth	r2, r3
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8000d18:	78bb      	ldrb	r3, [r7, #2]
 8000d1a:	2b02      	cmp	r3, #2
 8000d1c:	d102      	bne.n	8000d24 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	2200      	movs	r2, #0
 8000d22:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000d2a:	2b01      	cmp	r3, #1
 8000d2c:	d101      	bne.n	8000d32 <HAL_PCD_EP_Open+0xa6>
 8000d2e:	2302      	movs	r3, #2
 8000d30:	e00e      	b.n	8000d50 <HAL_PCD_EP_Open+0xc4>
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	2201      	movs	r2, #1
 8000d36:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	68f9      	ldr	r1, [r7, #12]
 8000d40:	4618      	mov	r0, r3
 8000d42:	f001 fec7 	bl	8002ad4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	2200      	movs	r2, #0
 8000d4a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8000d4e:	7afb      	ldrb	r3, [r7, #11]
}
 8000d50:	4618      	mov	r0, r3
 8000d52:	3710      	adds	r7, #16
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}

08000d58 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b084      	sub	sp, #16
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
 8000d60:	460b      	mov	r3, r1
 8000d62:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8000d64:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	da0e      	bge.n	8000d8a <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000d6c:	78fb      	ldrb	r3, [r7, #3]
 8000d6e:	f003 0307 	and.w	r3, r3, #7
 8000d72:	1c5a      	adds	r2, r3, #1
 8000d74:	4613      	mov	r3, r2
 8000d76:	009b      	lsls	r3, r3, #2
 8000d78:	4413      	add	r3, r2
 8000d7a:	00db      	lsls	r3, r3, #3
 8000d7c:	687a      	ldr	r2, [r7, #4]
 8000d7e:	4413      	add	r3, r2
 8000d80:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	2201      	movs	r2, #1
 8000d86:	705a      	strb	r2, [r3, #1]
 8000d88:	e00e      	b.n	8000da8 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000d8a:	78fb      	ldrb	r3, [r7, #3]
 8000d8c:	f003 0207 	and.w	r2, r3, #7
 8000d90:	4613      	mov	r3, r2
 8000d92:	009b      	lsls	r3, r3, #2
 8000d94:	4413      	add	r3, r2
 8000d96:	00db      	lsls	r3, r3, #3
 8000d98:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000d9c:	687a      	ldr	r2, [r7, #4]
 8000d9e:	4413      	add	r3, r2
 8000da0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	2200      	movs	r2, #0
 8000da6:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8000da8:	78fb      	ldrb	r3, [r7, #3]
 8000daa:	f003 0307 	and.w	r3, r3, #7
 8000dae:	b2da      	uxtb	r2, r3
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000dba:	2b01      	cmp	r3, #1
 8000dbc:	d101      	bne.n	8000dc2 <HAL_PCD_EP_Close+0x6a>
 8000dbe:	2302      	movs	r3, #2
 8000dc0:	e00e      	b.n	8000de0 <HAL_PCD_EP_Close+0x88>
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	68f9      	ldr	r1, [r7, #12]
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f002 f9e9 	bl	80031a8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	2200      	movs	r2, #0
 8000dda:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8000dde:	2300      	movs	r3, #0
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	3710      	adds	r7, #16
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}

08000de8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b086      	sub	sp, #24
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	60f8      	str	r0, [r7, #12]
 8000df0:	607a      	str	r2, [r7, #4]
 8000df2:	603b      	str	r3, [r7, #0]
 8000df4:	460b      	mov	r3, r1
 8000df6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000df8:	7afb      	ldrb	r3, [r7, #11]
 8000dfa:	f003 0207 	and.w	r2, r3, #7
 8000dfe:	4613      	mov	r3, r2
 8000e00:	009b      	lsls	r3, r3, #2
 8000e02:	4413      	add	r3, r2
 8000e04:	00db      	lsls	r3, r3, #3
 8000e06:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000e0a:	68fa      	ldr	r2, [r7, #12]
 8000e0c:	4413      	add	r3, r2
 8000e0e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	687a      	ldr	r2, [r7, #4]
 8000e14:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8000e16:	697b      	ldr	r3, [r7, #20]
 8000e18:	683a      	ldr	r2, [r7, #0]
 8000e1a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	2200      	movs	r2, #0
 8000e20:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8000e22:	697b      	ldr	r3, [r7, #20]
 8000e24:	2200      	movs	r2, #0
 8000e26:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000e28:	7afb      	ldrb	r3, [r7, #11]
 8000e2a:	f003 0307 	and.w	r3, r3, #7
 8000e2e:	b2da      	uxtb	r2, r3
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8000e34:	7afb      	ldrb	r3, [r7, #11]
 8000e36:	f003 0307 	and.w	r3, r3, #7
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d106      	bne.n	8000e4c <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	6979      	ldr	r1, [r7, #20]
 8000e44:	4618      	mov	r0, r3
 8000e46:	f002 fb9b 	bl	8003580 <USB_EPStartXfer>
 8000e4a:	e005      	b.n	8000e58 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	6979      	ldr	r1, [r7, #20]
 8000e52:	4618      	mov	r0, r3
 8000e54:	f002 fb94 	bl	8003580 <USB_EPStartXfer>
  }

  return HAL_OK;
 8000e58:	2300      	movs	r3, #0
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3718      	adds	r7, #24
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}

08000e62 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000e62:	b480      	push	{r7}
 8000e64:	b083      	sub	sp, #12
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	6078      	str	r0, [r7, #4]
 8000e6a:	460b      	mov	r3, r1
 8000e6c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8000e6e:	78fb      	ldrb	r3, [r7, #3]
 8000e70:	f003 0207 	and.w	r2, r3, #7
 8000e74:	6879      	ldr	r1, [r7, #4]
 8000e76:	4613      	mov	r3, r2
 8000e78:	009b      	lsls	r3, r3, #2
 8000e7a:	4413      	add	r3, r2
 8000e7c:	00db      	lsls	r3, r3, #3
 8000e7e:	440b      	add	r3, r1
 8000e80:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8000e84:	681b      	ldr	r3, [r3, #0]
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	370c      	adds	r7, #12
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bc80      	pop	{r7}
 8000e8e:	4770      	bx	lr

08000e90 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b086      	sub	sp, #24
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	60f8      	str	r0, [r7, #12]
 8000e98:	607a      	str	r2, [r7, #4]
 8000e9a:	603b      	str	r3, [r7, #0]
 8000e9c:	460b      	mov	r3, r1
 8000e9e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000ea0:	7afb      	ldrb	r3, [r7, #11]
 8000ea2:	f003 0307 	and.w	r3, r3, #7
 8000ea6:	1c5a      	adds	r2, r3, #1
 8000ea8:	4613      	mov	r3, r2
 8000eaa:	009b      	lsls	r3, r3, #2
 8000eac:	4413      	add	r3, r2
 8000eae:	00db      	lsls	r3, r3, #3
 8000eb0:	68fa      	ldr	r2, [r7, #12]
 8000eb2:	4413      	add	r3, r2
 8000eb4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8000eb6:	697b      	ldr	r3, [r7, #20]
 8000eb8:	687a      	ldr	r2, [r7, #4]
 8000eba:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	683a      	ldr	r2, [r7, #0]
 8000ec0:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	683a      	ldr	r2, [r7, #0]
 8000ece:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8000ed6:	697b      	ldr	r3, [r7, #20]
 8000ed8:	2201      	movs	r2, #1
 8000eda:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000edc:	7afb      	ldrb	r3, [r7, #11]
 8000ede:	f003 0307 	and.w	r3, r3, #7
 8000ee2:	b2da      	uxtb	r2, r3
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8000ee8:	7afb      	ldrb	r3, [r7, #11]
 8000eea:	f003 0307 	and.w	r3, r3, #7
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d106      	bne.n	8000f00 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	6979      	ldr	r1, [r7, #20]
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f002 fb41 	bl	8003580 <USB_EPStartXfer>
 8000efe:	e005      	b.n	8000f0c <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	6979      	ldr	r1, [r7, #20]
 8000f06:	4618      	mov	r0, r3
 8000f08:	f002 fb3a 	bl	8003580 <USB_EPStartXfer>
  }

  return HAL_OK;
 8000f0c:	2300      	movs	r3, #0
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	3718      	adds	r7, #24
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}

08000f16 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000f16:	b580      	push	{r7, lr}
 8000f18:	b084      	sub	sp, #16
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	6078      	str	r0, [r7, #4]
 8000f1e:	460b      	mov	r3, r1
 8000f20:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8000f22:	78fb      	ldrb	r3, [r7, #3]
 8000f24:	f003 0207 	and.w	r2, r3, #7
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	429a      	cmp	r2, r3
 8000f2e:	d901      	bls.n	8000f34 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8000f30:	2301      	movs	r3, #1
 8000f32:	e04c      	b.n	8000fce <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8000f34:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	da0e      	bge.n	8000f5a <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000f3c:	78fb      	ldrb	r3, [r7, #3]
 8000f3e:	f003 0307 	and.w	r3, r3, #7
 8000f42:	1c5a      	adds	r2, r3, #1
 8000f44:	4613      	mov	r3, r2
 8000f46:	009b      	lsls	r3, r3, #2
 8000f48:	4413      	add	r3, r2
 8000f4a:	00db      	lsls	r3, r3, #3
 8000f4c:	687a      	ldr	r2, [r7, #4]
 8000f4e:	4413      	add	r3, r2
 8000f50:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	2201      	movs	r2, #1
 8000f56:	705a      	strb	r2, [r3, #1]
 8000f58:	e00c      	b.n	8000f74 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8000f5a:	78fa      	ldrb	r2, [r7, #3]
 8000f5c:	4613      	mov	r3, r2
 8000f5e:	009b      	lsls	r3, r3, #2
 8000f60:	4413      	add	r3, r2
 8000f62:	00db      	lsls	r3, r3, #3
 8000f64:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000f68:	687a      	ldr	r2, [r7, #4]
 8000f6a:	4413      	add	r3, r2
 8000f6c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	2200      	movs	r2, #0
 8000f72:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	2201      	movs	r2, #1
 8000f78:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000f7a:	78fb      	ldrb	r3, [r7, #3]
 8000f7c:	f003 0307 	and.w	r3, r3, #7
 8000f80:	b2da      	uxtb	r2, r3
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000f8c:	2b01      	cmp	r3, #1
 8000f8e:	d101      	bne.n	8000f94 <HAL_PCD_EP_SetStall+0x7e>
 8000f90:	2302      	movs	r3, #2
 8000f92:	e01c      	b.n	8000fce <HAL_PCD_EP_SetStall+0xb8>
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2201      	movs	r2, #1
 8000f98:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	68f9      	ldr	r1, [r7, #12]
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f003 fde3 	bl	8004b6e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8000fa8:	78fb      	ldrb	r3, [r7, #3]
 8000faa:	f003 0307 	and.w	r3, r3, #7
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d108      	bne.n	8000fc4 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681a      	ldr	r2, [r3, #0]
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	4610      	mov	r0, r2
 8000fc0:	f003 ff08 	bl	8004dd4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8000fcc:	2300      	movs	r3, #0
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	3710      	adds	r7, #16
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}

08000fd6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000fd6:	b580      	push	{r7, lr}
 8000fd8:	b084      	sub	sp, #16
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	6078      	str	r0, [r7, #4]
 8000fde:	460b      	mov	r3, r1
 8000fe0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8000fe2:	78fb      	ldrb	r3, [r7, #3]
 8000fe4:	f003 020f 	and.w	r2, r3, #15
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	429a      	cmp	r2, r3
 8000fee:	d901      	bls.n	8000ff4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	e040      	b.n	8001076 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8000ff4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	da0e      	bge.n	800101a <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000ffc:	78fb      	ldrb	r3, [r7, #3]
 8000ffe:	f003 0307 	and.w	r3, r3, #7
 8001002:	1c5a      	adds	r2, r3, #1
 8001004:	4613      	mov	r3, r2
 8001006:	009b      	lsls	r3, r3, #2
 8001008:	4413      	add	r3, r2
 800100a:	00db      	lsls	r3, r3, #3
 800100c:	687a      	ldr	r2, [r7, #4]
 800100e:	4413      	add	r3, r2
 8001010:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	2201      	movs	r2, #1
 8001016:	705a      	strb	r2, [r3, #1]
 8001018:	e00e      	b.n	8001038 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800101a:	78fb      	ldrb	r3, [r7, #3]
 800101c:	f003 0207 	and.w	r2, r3, #7
 8001020:	4613      	mov	r3, r2
 8001022:	009b      	lsls	r3, r3, #2
 8001024:	4413      	add	r3, r2
 8001026:	00db      	lsls	r3, r3, #3
 8001028:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800102c:	687a      	ldr	r2, [r7, #4]
 800102e:	4413      	add	r3, r2
 8001030:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	2200      	movs	r2, #0
 8001036:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	2200      	movs	r2, #0
 800103c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800103e:	78fb      	ldrb	r3, [r7, #3]
 8001040:	f003 0307 	and.w	r3, r3, #7
 8001044:	b2da      	uxtb	r2, r3
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001050:	2b01      	cmp	r3, #1
 8001052:	d101      	bne.n	8001058 <HAL_PCD_EP_ClrStall+0x82>
 8001054:	2302      	movs	r3, #2
 8001056:	e00e      	b.n	8001076 <HAL_PCD_EP_ClrStall+0xa0>
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2201      	movs	r2, #1
 800105c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	68f9      	ldr	r1, [r7, #12]
 8001066:	4618      	mov	r0, r3
 8001068:	f003 fdd1 	bl	8004c0e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2200      	movs	r2, #0
 8001070:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001074:	2300      	movs	r3, #0
}
 8001076:	4618      	mov	r0, r3
 8001078:	3710      	adds	r7, #16
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}

0800107e <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800107e:	b580      	push	{r7, lr}
 8001080:	b08e      	sub	sp, #56	; 0x38
 8001082:	af00      	add	r7, sp, #0
 8001084:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001086:	e2ec      	b.n	8001662 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001090:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001092:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001094:	b2db      	uxtb	r3, r3
 8001096:	f003 030f 	and.w	r3, r3, #15
 800109a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 800109e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	f040 8161 	bne.w	800136a <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80010a8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80010aa:	f003 0310 	and.w	r3, r3, #16
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d152      	bne.n	8001158 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	881b      	ldrh	r3, [r3, #0]
 80010b8:	b29b      	uxth	r3, r3
 80010ba:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80010be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80010c2:	81fb      	strh	r3, [r7, #14]
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	89fb      	ldrh	r3, [r7, #14]
 80010ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80010ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80010d2:	b29b      	uxth	r3, r3
 80010d4:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	3328      	adds	r3, #40	; 0x28
 80010da:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80010e4:	b29b      	uxth	r3, r3
 80010e6:	461a      	mov	r2, r3
 80010e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	00db      	lsls	r3, r3, #3
 80010ee:	4413      	add	r3, r2
 80010f0:	3302      	adds	r3, #2
 80010f2:	005b      	lsls	r3, r3, #1
 80010f4:	687a      	ldr	r2, [r7, #4]
 80010f6:	6812      	ldr	r2, [r2, #0]
 80010f8:	4413      	add	r3, r2
 80010fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80010fe:	881b      	ldrh	r3, [r3, #0]
 8001100:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001106:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800110a:	695a      	ldr	r2, [r3, #20]
 800110c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800110e:	69db      	ldr	r3, [r3, #28]
 8001110:	441a      	add	r2, r3
 8001112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001114:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001116:	2100      	movs	r1, #0
 8001118:	6878      	ldr	r0, [r7, #4]
 800111a:	f005 fcd0 	bl	8006abe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001124:	b2db      	uxtb	r3, r3
 8001126:	2b00      	cmp	r3, #0
 8001128:	f000 829b 	beq.w	8001662 <PCD_EP_ISR_Handler+0x5e4>
 800112c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800112e:	699b      	ldr	r3, [r3, #24]
 8001130:	2b00      	cmp	r3, #0
 8001132:	f040 8296 	bne.w	8001662 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800113c:	b2db      	uxtb	r3, r3
 800113e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001142:	b2da      	uxtb	r2, r3
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	b292      	uxth	r2, r2
 800114a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2200      	movs	r2, #0
 8001152:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001156:	e284      	b.n	8001662 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800115e:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	881b      	ldrh	r3, [r3, #0]
 8001166:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001168:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800116a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800116e:	2b00      	cmp	r3, #0
 8001170:	d034      	beq.n	80011dc <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800117a:	b29b      	uxth	r3, r3
 800117c:	461a      	mov	r2, r3
 800117e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	00db      	lsls	r3, r3, #3
 8001184:	4413      	add	r3, r2
 8001186:	3306      	adds	r3, #6
 8001188:	005b      	lsls	r3, r3, #1
 800118a:	687a      	ldr	r2, [r7, #4]
 800118c:	6812      	ldr	r2, [r2, #0]
 800118e:	4413      	add	r3, r2
 8001190:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001194:	881b      	ldrh	r3, [r3, #0]
 8001196:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800119a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800119c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6818      	ldr	r0, [r3, #0]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80011a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011aa:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80011ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ae:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80011b0:	b29b      	uxth	r3, r3
 80011b2:	f003 fe5f 	bl	8004e74 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	881b      	ldrh	r3, [r3, #0]
 80011bc:	b29a      	uxth	r2, r3
 80011be:	f640 738f 	movw	r3, #3983	; 0xf8f
 80011c2:	4013      	ands	r3, r2
 80011c4:	823b      	strh	r3, [r7, #16]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	8a3a      	ldrh	r2, [r7, #16]
 80011cc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80011d0:	b292      	uxth	r2, r2
 80011d2:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80011d4:	6878      	ldr	r0, [r7, #4]
 80011d6:	f005 fc45 	bl	8006a64 <HAL_PCD_SetupStageCallback>
 80011da:	e242      	b.n	8001662 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80011dc:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	f280 823e 	bge.w	8001662 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	881b      	ldrh	r3, [r3, #0]
 80011ec:	b29a      	uxth	r2, r3
 80011ee:	f640 738f 	movw	r3, #3983	; 0xf8f
 80011f2:	4013      	ands	r3, r2
 80011f4:	83bb      	strh	r3, [r7, #28]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	8bba      	ldrh	r2, [r7, #28]
 80011fc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001200:	b292      	uxth	r2, r2
 8001202:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800120c:	b29b      	uxth	r3, r3
 800120e:	461a      	mov	r2, r3
 8001210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	00db      	lsls	r3, r3, #3
 8001216:	4413      	add	r3, r2
 8001218:	3306      	adds	r3, #6
 800121a:	005b      	lsls	r3, r3, #1
 800121c:	687a      	ldr	r2, [r7, #4]
 800121e:	6812      	ldr	r2, [r2, #0]
 8001220:	4413      	add	r3, r2
 8001222:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001226:	881b      	ldrh	r3, [r3, #0]
 8001228:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800122c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800122e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001232:	69db      	ldr	r3, [r3, #28]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d019      	beq.n	800126c <PCD_EP_ISR_Handler+0x1ee>
 8001238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800123a:	695b      	ldr	r3, [r3, #20]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d015      	beq.n	800126c <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6818      	ldr	r0, [r3, #0]
 8001244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001246:	6959      	ldr	r1, [r3, #20]
 8001248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800124a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800124c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800124e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001250:	b29b      	uxth	r3, r3
 8001252:	f003 fe0f 	bl	8004e74 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001258:	695a      	ldr	r2, [r3, #20]
 800125a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800125c:	69db      	ldr	r3, [r3, #28]
 800125e:	441a      	add	r2, r3
 8001260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001262:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001264:	2100      	movs	r1, #0
 8001266:	6878      	ldr	r0, [r7, #4]
 8001268:	f005 fc0e 	bl	8006a88 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	881b      	ldrh	r3, [r3, #0]
 8001272:	b29b      	uxth	r3, r3
 8001274:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001278:	2b00      	cmp	r3, #0
 800127a:	f040 81f2 	bne.w	8001662 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	61bb      	str	r3, [r7, #24]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800128c:	b29b      	uxth	r3, r3
 800128e:	461a      	mov	r2, r3
 8001290:	69bb      	ldr	r3, [r7, #24]
 8001292:	4413      	add	r3, r2
 8001294:	61bb      	str	r3, [r7, #24]
 8001296:	69bb      	ldr	r3, [r7, #24]
 8001298:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800129c:	617b      	str	r3, [r7, #20]
 800129e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a0:	691b      	ldr	r3, [r3, #16]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d112      	bne.n	80012cc <PCD_EP_ISR_Handler+0x24e>
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	881b      	ldrh	r3, [r3, #0]
 80012aa:	b29b      	uxth	r3, r3
 80012ac:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80012b0:	b29a      	uxth	r2, r3
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	801a      	strh	r2, [r3, #0]
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	881b      	ldrh	r3, [r3, #0]
 80012ba:	b29b      	uxth	r3, r3
 80012bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80012c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80012c4:	b29a      	uxth	r2, r3
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	801a      	strh	r2, [r3, #0]
 80012ca:	e02f      	b.n	800132c <PCD_EP_ISR_Handler+0x2ae>
 80012cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ce:	691b      	ldr	r3, [r3, #16]
 80012d0:	2b3e      	cmp	r3, #62	; 0x3e
 80012d2:	d813      	bhi.n	80012fc <PCD_EP_ISR_Handler+0x27e>
 80012d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d6:	691b      	ldr	r3, [r3, #16]
 80012d8:	085b      	lsrs	r3, r3, #1
 80012da:	633b      	str	r3, [r7, #48]	; 0x30
 80012dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012de:	691b      	ldr	r3, [r3, #16]
 80012e0:	f003 0301 	and.w	r3, r3, #1
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d002      	beq.n	80012ee <PCD_EP_ISR_Handler+0x270>
 80012e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012ea:	3301      	adds	r3, #1
 80012ec:	633b      	str	r3, [r7, #48]	; 0x30
 80012ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012f0:	b29b      	uxth	r3, r3
 80012f2:	029b      	lsls	r3, r3, #10
 80012f4:	b29a      	uxth	r2, r3
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	801a      	strh	r2, [r3, #0]
 80012fa:	e017      	b.n	800132c <PCD_EP_ISR_Handler+0x2ae>
 80012fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012fe:	691b      	ldr	r3, [r3, #16]
 8001300:	095b      	lsrs	r3, r3, #5
 8001302:	633b      	str	r3, [r7, #48]	; 0x30
 8001304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001306:	691b      	ldr	r3, [r3, #16]
 8001308:	f003 031f 	and.w	r3, r3, #31
 800130c:	2b00      	cmp	r3, #0
 800130e:	d102      	bne.n	8001316 <PCD_EP_ISR_Handler+0x298>
 8001310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001312:	3b01      	subs	r3, #1
 8001314:	633b      	str	r3, [r7, #48]	; 0x30
 8001316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001318:	b29b      	uxth	r3, r3
 800131a:	029b      	lsls	r3, r3, #10
 800131c:	b29b      	uxth	r3, r3
 800131e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001322:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001326:	b29a      	uxth	r2, r3
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	881b      	ldrh	r3, [r3, #0]
 8001332:	b29b      	uxth	r3, r3
 8001334:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001338:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800133c:	827b      	strh	r3, [r7, #18]
 800133e:	8a7b      	ldrh	r3, [r7, #18]
 8001340:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001344:	827b      	strh	r3, [r7, #18]
 8001346:	8a7b      	ldrh	r3, [r7, #18]
 8001348:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800134c:	827b      	strh	r3, [r7, #18]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	8a7b      	ldrh	r3, [r7, #18]
 8001354:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001358:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800135c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001360:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001364:	b29b      	uxth	r3, r3
 8001366:	8013      	strh	r3, [r2, #0]
 8001368:	e17b      	b.n	8001662 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	461a      	mov	r2, r3
 8001370:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001374:	009b      	lsls	r3, r3, #2
 8001376:	4413      	add	r3, r2
 8001378:	881b      	ldrh	r3, [r3, #0]
 800137a:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800137c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001380:	2b00      	cmp	r3, #0
 8001382:	f280 80ea 	bge.w	800155a <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	461a      	mov	r2, r3
 800138c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001390:	009b      	lsls	r3, r3, #2
 8001392:	4413      	add	r3, r2
 8001394:	881b      	ldrh	r3, [r3, #0]
 8001396:	b29a      	uxth	r2, r3
 8001398:	f640 738f 	movw	r3, #3983	; 0xf8f
 800139c:	4013      	ands	r3, r2
 800139e:	853b      	strh	r3, [r7, #40]	; 0x28
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	461a      	mov	r2, r3
 80013a6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80013aa:	009b      	lsls	r3, r3, #2
 80013ac:	4413      	add	r3, r2
 80013ae:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80013b0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80013b4:	b292      	uxth	r2, r2
 80013b6:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80013b8:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80013bc:	4613      	mov	r3, r2
 80013be:	009b      	lsls	r3, r3, #2
 80013c0:	4413      	add	r3, r2
 80013c2:	00db      	lsls	r3, r3, #3
 80013c4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80013c8:	687a      	ldr	r2, [r7, #4]
 80013ca:	4413      	add	r3, r2
 80013cc:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80013ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d0:	7b1b      	ldrb	r3, [r3, #12]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d122      	bne.n	800141c <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80013de:	b29b      	uxth	r3, r3
 80013e0:	461a      	mov	r2, r3
 80013e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	00db      	lsls	r3, r3, #3
 80013e8:	4413      	add	r3, r2
 80013ea:	3306      	adds	r3, #6
 80013ec:	005b      	lsls	r3, r3, #1
 80013ee:	687a      	ldr	r2, [r7, #4]
 80013f0:	6812      	ldr	r2, [r2, #0]
 80013f2:	4413      	add	r3, r2
 80013f4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80013f8:	881b      	ldrh	r3, [r3, #0]
 80013fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80013fe:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8001400:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001402:	2b00      	cmp	r3, #0
 8001404:	f000 8087 	beq.w	8001516 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6818      	ldr	r0, [r3, #0]
 800140c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800140e:	6959      	ldr	r1, [r3, #20]
 8001410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001412:	88da      	ldrh	r2, [r3, #6]
 8001414:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001416:	f003 fd2d 	bl	8004e74 <USB_ReadPMA>
 800141a:	e07c      	b.n	8001516 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800141c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800141e:	78db      	ldrb	r3, [r3, #3]
 8001420:	2b02      	cmp	r3, #2
 8001422:	d108      	bne.n	8001436 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001424:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001426:	461a      	mov	r2, r3
 8001428:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	f000 f927 	bl	800167e <HAL_PCD_EP_DB_Receive>
 8001430:	4603      	mov	r3, r0
 8001432:	86fb      	strh	r3, [r7, #54]	; 0x36
 8001434:	e06f      	b.n	8001516 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	461a      	mov	r2, r3
 800143c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	4413      	add	r3, r2
 8001444:	881b      	ldrh	r3, [r3, #0]
 8001446:	b29b      	uxth	r3, r3
 8001448:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800144c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001450:	847b      	strh	r3, [r7, #34]	; 0x22
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	461a      	mov	r2, r3
 8001458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	009b      	lsls	r3, r3, #2
 800145e:	441a      	add	r2, r3
 8001460:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001462:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001466:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800146a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800146e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001472:	b29b      	uxth	r3, r3
 8001474:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	461a      	mov	r2, r3
 800147c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	4413      	add	r3, r2
 8001484:	881b      	ldrh	r3, [r3, #0]
 8001486:	b29b      	uxth	r3, r3
 8001488:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800148c:	2b00      	cmp	r3, #0
 800148e:	d021      	beq.n	80014d4 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001498:	b29b      	uxth	r3, r3
 800149a:	461a      	mov	r2, r3
 800149c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	00db      	lsls	r3, r3, #3
 80014a2:	4413      	add	r3, r2
 80014a4:	3302      	adds	r3, #2
 80014a6:	005b      	lsls	r3, r3, #1
 80014a8:	687a      	ldr	r2, [r7, #4]
 80014aa:	6812      	ldr	r2, [r2, #0]
 80014ac:	4413      	add	r3, r2
 80014ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80014b2:	881b      	ldrh	r3, [r3, #0]
 80014b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80014b8:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80014ba:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d02a      	beq.n	8001516 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6818      	ldr	r0, [r3, #0]
 80014c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c6:	6959      	ldr	r1, [r3, #20]
 80014c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ca:	891a      	ldrh	r2, [r3, #8]
 80014cc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80014ce:	f003 fcd1 	bl	8004e74 <USB_ReadPMA>
 80014d2:	e020      	b.n	8001516 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80014dc:	b29b      	uxth	r3, r3
 80014de:	461a      	mov	r2, r3
 80014e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	00db      	lsls	r3, r3, #3
 80014e6:	4413      	add	r3, r2
 80014e8:	3306      	adds	r3, #6
 80014ea:	005b      	lsls	r3, r3, #1
 80014ec:	687a      	ldr	r2, [r7, #4]
 80014ee:	6812      	ldr	r2, [r2, #0]
 80014f0:	4413      	add	r3, r2
 80014f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80014f6:	881b      	ldrh	r3, [r3, #0]
 80014f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80014fc:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80014fe:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001500:	2b00      	cmp	r3, #0
 8001502:	d008      	beq.n	8001516 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6818      	ldr	r0, [r3, #0]
 8001508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800150a:	6959      	ldr	r1, [r3, #20]
 800150c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800150e:	895a      	ldrh	r2, [r3, #10]
 8001510:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001512:	f003 fcaf 	bl	8004e74 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001518:	69da      	ldr	r2, [r3, #28]
 800151a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800151c:	441a      	add	r2, r3
 800151e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001520:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001524:	695a      	ldr	r2, [r3, #20]
 8001526:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001528:	441a      	add	r2, r3
 800152a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800152c:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800152e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001530:	699b      	ldr	r3, [r3, #24]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d004      	beq.n	8001540 <PCD_EP_ISR_Handler+0x4c2>
 8001536:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800153a:	691b      	ldr	r3, [r3, #16]
 800153c:	429a      	cmp	r2, r3
 800153e:	d206      	bcs.n	800154e <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	4619      	mov	r1, r3
 8001546:	6878      	ldr	r0, [r7, #4]
 8001548:	f005 fa9e 	bl	8006a88 <HAL_PCD_DataOutStageCallback>
 800154c:	e005      	b.n	800155a <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001554:	4618      	mov	r0, r3
 8001556:	f002 f813 	bl	8003580 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800155a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800155c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001560:	2b00      	cmp	r3, #0
 8001562:	d07e      	beq.n	8001662 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8001564:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001568:	1c5a      	adds	r2, r3, #1
 800156a:	4613      	mov	r3, r2
 800156c:	009b      	lsls	r3, r3, #2
 800156e:	4413      	add	r3, r2
 8001570:	00db      	lsls	r3, r3, #3
 8001572:	687a      	ldr	r2, [r7, #4]
 8001574:	4413      	add	r3, r2
 8001576:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	461a      	mov	r2, r3
 800157e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001582:	009b      	lsls	r3, r3, #2
 8001584:	4413      	add	r3, r2
 8001586:	881b      	ldrh	r3, [r3, #0]
 8001588:	b29b      	uxth	r3, r3
 800158a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800158e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001592:	843b      	strh	r3, [r7, #32]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	461a      	mov	r2, r3
 800159a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800159e:	009b      	lsls	r3, r3, #2
 80015a0:	441a      	add	r2, r3
 80015a2:	8c3b      	ldrh	r3, [r7, #32]
 80015a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80015a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80015ac:	b29b      	uxth	r3, r3
 80015ae:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80015b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b2:	78db      	ldrb	r3, [r3, #3]
 80015b4:	2b03      	cmp	r3, #3
 80015b6:	d00c      	beq.n	80015d2 <PCD_EP_ISR_Handler+0x554>
 80015b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ba:	78db      	ldrb	r3, [r3, #3]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d008      	beq.n	80015d2 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80015c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c2:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80015c4:	2b02      	cmp	r3, #2
 80015c6:	d146      	bne.n	8001656 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80015c8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80015ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d141      	bne.n	8001656 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80015da:	b29b      	uxth	r3, r3
 80015dc:	461a      	mov	r2, r3
 80015de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	00db      	lsls	r3, r3, #3
 80015e4:	4413      	add	r3, r2
 80015e6:	3302      	adds	r3, #2
 80015e8:	005b      	lsls	r3, r3, #1
 80015ea:	687a      	ldr	r2, [r7, #4]
 80015ec:	6812      	ldr	r2, [r2, #0]
 80015ee:	4413      	add	r3, r2
 80015f0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80015f4:	881b      	ldrh	r3, [r3, #0]
 80015f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80015fa:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80015fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015fe:	699a      	ldr	r2, [r3, #24]
 8001600:	8bfb      	ldrh	r3, [r7, #30]
 8001602:	429a      	cmp	r2, r3
 8001604:	d906      	bls.n	8001614 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8001606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001608:	699a      	ldr	r2, [r3, #24]
 800160a:	8bfb      	ldrh	r3, [r7, #30]
 800160c:	1ad2      	subs	r2, r2, r3
 800160e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001610:	619a      	str	r2, [r3, #24]
 8001612:	e002      	b.n	800161a <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8001614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001616:	2200      	movs	r2, #0
 8001618:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 800161a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800161c:	699b      	ldr	r3, [r3, #24]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d106      	bne.n	8001630 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001624:	781b      	ldrb	r3, [r3, #0]
 8001626:	4619      	mov	r1, r3
 8001628:	6878      	ldr	r0, [r7, #4]
 800162a:	f005 fa48 	bl	8006abe <HAL_PCD_DataInStageCallback>
 800162e:	e018      	b.n	8001662 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8001630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001632:	695a      	ldr	r2, [r3, #20]
 8001634:	8bfb      	ldrh	r3, [r7, #30]
 8001636:	441a      	add	r2, r3
 8001638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800163a:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 800163c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800163e:	69da      	ldr	r2, [r3, #28]
 8001640:	8bfb      	ldrh	r3, [r7, #30]
 8001642:	441a      	add	r2, r3
 8001644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001646:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800164e:	4618      	mov	r0, r3
 8001650:	f001 ff96 	bl	8003580 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8001654:	e005      	b.n	8001662 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001656:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001658:	461a      	mov	r2, r3
 800165a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800165c:	6878      	ldr	r0, [r7, #4]
 800165e:	f000 f91b 	bl	8001898 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800166a:	b29b      	uxth	r3, r3
 800166c:	b21b      	sxth	r3, r3
 800166e:	2b00      	cmp	r3, #0
 8001670:	f6ff ad0a 	blt.w	8001088 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001674:	2300      	movs	r3, #0
}
 8001676:	4618      	mov	r0, r3
 8001678:	3738      	adds	r7, #56	; 0x38
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}

0800167e <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800167e:	b580      	push	{r7, lr}
 8001680:	b088      	sub	sp, #32
 8001682:	af00      	add	r7, sp, #0
 8001684:	60f8      	str	r0, [r7, #12]
 8001686:	60b9      	str	r1, [r7, #8]
 8001688:	4613      	mov	r3, r2
 800168a:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800168c:	88fb      	ldrh	r3, [r7, #6]
 800168e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001692:	2b00      	cmp	r3, #0
 8001694:	d07e      	beq.n	8001794 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800169e:	b29b      	uxth	r3, r3
 80016a0:	461a      	mov	r2, r3
 80016a2:	68bb      	ldr	r3, [r7, #8]
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	00db      	lsls	r3, r3, #3
 80016a8:	4413      	add	r3, r2
 80016aa:	3302      	adds	r3, #2
 80016ac:	005b      	lsls	r3, r3, #1
 80016ae:	68fa      	ldr	r2, [r7, #12]
 80016b0:	6812      	ldr	r2, [r2, #0]
 80016b2:	4413      	add	r3, r2
 80016b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80016b8:	881b      	ldrh	r3, [r3, #0]
 80016ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80016be:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	699a      	ldr	r2, [r3, #24]
 80016c4:	8b7b      	ldrh	r3, [r7, #26]
 80016c6:	429a      	cmp	r2, r3
 80016c8:	d306      	bcc.n	80016d8 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80016ca:	68bb      	ldr	r3, [r7, #8]
 80016cc:	699a      	ldr	r2, [r3, #24]
 80016ce:	8b7b      	ldrh	r3, [r7, #26]
 80016d0:	1ad2      	subs	r2, r2, r3
 80016d2:	68bb      	ldr	r3, [r7, #8]
 80016d4:	619a      	str	r2, [r3, #24]
 80016d6:	e002      	b.n	80016de <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	2200      	movs	r2, #0
 80016dc:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80016de:	68bb      	ldr	r3, [r7, #8]
 80016e0:	699b      	ldr	r3, [r3, #24]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d123      	bne.n	800172e <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	461a      	mov	r2, r3
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	009b      	lsls	r3, r3, #2
 80016f2:	4413      	add	r3, r2
 80016f4:	881b      	ldrh	r3, [r3, #0]
 80016f6:	b29b      	uxth	r3, r3
 80016f8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80016fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001700:	833b      	strh	r3, [r7, #24]
 8001702:	8b3b      	ldrh	r3, [r7, #24]
 8001704:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001708:	833b      	strh	r3, [r7, #24]
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	461a      	mov	r2, r3
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	009b      	lsls	r3, r3, #2
 8001716:	441a      	add	r2, r3
 8001718:	8b3b      	ldrh	r3, [r7, #24]
 800171a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800171e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001722:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001726:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800172a:	b29b      	uxth	r3, r3
 800172c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800172e:	88fb      	ldrh	r3, [r7, #6]
 8001730:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001734:	2b00      	cmp	r3, #0
 8001736:	d01f      	beq.n	8001778 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	461a      	mov	r2, r3
 800173e:	68bb      	ldr	r3, [r7, #8]
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	009b      	lsls	r3, r3, #2
 8001744:	4413      	add	r3, r2
 8001746:	881b      	ldrh	r3, [r3, #0]
 8001748:	b29b      	uxth	r3, r3
 800174a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800174e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001752:	82fb      	strh	r3, [r7, #22]
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	461a      	mov	r2, r3
 800175a:	68bb      	ldr	r3, [r7, #8]
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	009b      	lsls	r3, r3, #2
 8001760:	441a      	add	r2, r3
 8001762:	8afb      	ldrh	r3, [r7, #22]
 8001764:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001768:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800176c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001770:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001774:	b29b      	uxth	r3, r3
 8001776:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001778:	8b7b      	ldrh	r3, [r7, #26]
 800177a:	2b00      	cmp	r3, #0
 800177c:	f000 8087 	beq.w	800188e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	6818      	ldr	r0, [r3, #0]
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	6959      	ldr	r1, [r3, #20]
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	891a      	ldrh	r2, [r3, #8]
 800178c:	8b7b      	ldrh	r3, [r7, #26]
 800178e:	f003 fb71 	bl	8004e74 <USB_ReadPMA>
 8001792:	e07c      	b.n	800188e <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800179c:	b29b      	uxth	r3, r3
 800179e:	461a      	mov	r2, r3
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	00db      	lsls	r3, r3, #3
 80017a6:	4413      	add	r3, r2
 80017a8:	3306      	adds	r3, #6
 80017aa:	005b      	lsls	r3, r3, #1
 80017ac:	68fa      	ldr	r2, [r7, #12]
 80017ae:	6812      	ldr	r2, [r2, #0]
 80017b0:	4413      	add	r3, r2
 80017b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80017b6:	881b      	ldrh	r3, [r3, #0]
 80017b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80017bc:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80017be:	68bb      	ldr	r3, [r7, #8]
 80017c0:	699a      	ldr	r2, [r3, #24]
 80017c2:	8b7b      	ldrh	r3, [r7, #26]
 80017c4:	429a      	cmp	r2, r3
 80017c6:	d306      	bcc.n	80017d6 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	699a      	ldr	r2, [r3, #24]
 80017cc:	8b7b      	ldrh	r3, [r7, #26]
 80017ce:	1ad2      	subs	r2, r2, r3
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	619a      	str	r2, [r3, #24]
 80017d4:	e002      	b.n	80017dc <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	2200      	movs	r2, #0
 80017da:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	699b      	ldr	r3, [r3, #24]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d123      	bne.n	800182c <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	461a      	mov	r2, r3
 80017ea:	68bb      	ldr	r3, [r7, #8]
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	009b      	lsls	r3, r3, #2
 80017f0:	4413      	add	r3, r2
 80017f2:	881b      	ldrh	r3, [r3, #0]
 80017f4:	b29b      	uxth	r3, r3
 80017f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80017fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80017fe:	83fb      	strh	r3, [r7, #30]
 8001800:	8bfb      	ldrh	r3, [r7, #30]
 8001802:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001806:	83fb      	strh	r3, [r7, #30]
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	461a      	mov	r2, r3
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	009b      	lsls	r3, r3, #2
 8001814:	441a      	add	r2, r3
 8001816:	8bfb      	ldrh	r3, [r7, #30]
 8001818:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800181c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001820:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001824:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001828:	b29b      	uxth	r3, r3
 800182a:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800182c:	88fb      	ldrh	r3, [r7, #6]
 800182e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001832:	2b00      	cmp	r3, #0
 8001834:	d11f      	bne.n	8001876 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	461a      	mov	r2, r3
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	009b      	lsls	r3, r3, #2
 8001842:	4413      	add	r3, r2
 8001844:	881b      	ldrh	r3, [r3, #0]
 8001846:	b29b      	uxth	r3, r3
 8001848:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800184c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001850:	83bb      	strh	r3, [r7, #28]
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	461a      	mov	r2, r3
 8001858:	68bb      	ldr	r3, [r7, #8]
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	009b      	lsls	r3, r3, #2
 800185e:	441a      	add	r2, r3
 8001860:	8bbb      	ldrh	r3, [r7, #28]
 8001862:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001866:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800186a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800186e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001872:	b29b      	uxth	r3, r3
 8001874:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001876:	8b7b      	ldrh	r3, [r7, #26]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d008      	beq.n	800188e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	6818      	ldr	r0, [r3, #0]
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	6959      	ldr	r1, [r3, #20]
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	895a      	ldrh	r2, [r3, #10]
 8001888:	8b7b      	ldrh	r3, [r7, #26]
 800188a:	f003 faf3 	bl	8004e74 <USB_ReadPMA>
    }
  }

  return count;
 800188e:	8b7b      	ldrh	r3, [r7, #26]
}
 8001890:	4618      	mov	r0, r3
 8001892:	3720      	adds	r7, #32
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}

08001898 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b0a2      	sub	sp, #136	; 0x88
 800189c:	af00      	add	r7, sp, #0
 800189e:	60f8      	str	r0, [r7, #12]
 80018a0:	60b9      	str	r1, [r7, #8]
 80018a2:	4613      	mov	r3, r2
 80018a4:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80018a6:	88fb      	ldrh	r3, [r7, #6]
 80018a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	f000 81c7 	beq.w	8001c40 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80018ba:	b29b      	uxth	r3, r3
 80018bc:	461a      	mov	r2, r3
 80018be:	68bb      	ldr	r3, [r7, #8]
 80018c0:	781b      	ldrb	r3, [r3, #0]
 80018c2:	00db      	lsls	r3, r3, #3
 80018c4:	4413      	add	r3, r2
 80018c6:	3302      	adds	r3, #2
 80018c8:	005b      	lsls	r3, r3, #1
 80018ca:	68fa      	ldr	r2, [r7, #12]
 80018cc:	6812      	ldr	r2, [r2, #0]
 80018ce:	4413      	add	r3, r2
 80018d0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80018d4:	881b      	ldrh	r3, [r3, #0]
 80018d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80018da:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	699a      	ldr	r2, [r3, #24]
 80018e2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80018e6:	429a      	cmp	r2, r3
 80018e8:	d907      	bls.n	80018fa <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 80018ea:	68bb      	ldr	r3, [r7, #8]
 80018ec:	699a      	ldr	r2, [r3, #24]
 80018ee:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80018f2:	1ad2      	subs	r2, r2, r3
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	619a      	str	r2, [r3, #24]
 80018f8:	e002      	b.n	8001900 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80018fa:	68bb      	ldr	r3, [r7, #8]
 80018fc:	2200      	movs	r2, #0
 80018fe:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	699b      	ldr	r3, [r3, #24]
 8001904:	2b00      	cmp	r3, #0
 8001906:	f040 80b9 	bne.w	8001a7c <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800190a:	68bb      	ldr	r3, [r7, #8]
 800190c:	785b      	ldrb	r3, [r3, #1]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d126      	bne.n	8001960 <HAL_PCD_EP_DB_Transmit+0xc8>
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	62bb      	str	r3, [r7, #40]	; 0x28
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001920:	b29b      	uxth	r3, r3
 8001922:	461a      	mov	r2, r3
 8001924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001926:	4413      	add	r3, r2
 8001928:	62bb      	str	r3, [r7, #40]	; 0x28
 800192a:	68bb      	ldr	r3, [r7, #8]
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	011a      	lsls	r2, r3, #4
 8001930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001932:	4413      	add	r3, r2
 8001934:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001938:	627b      	str	r3, [r7, #36]	; 0x24
 800193a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800193c:	881b      	ldrh	r3, [r3, #0]
 800193e:	b29b      	uxth	r3, r3
 8001940:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001944:	b29a      	uxth	r2, r3
 8001946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001948:	801a      	strh	r2, [r3, #0]
 800194a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800194c:	881b      	ldrh	r3, [r3, #0]
 800194e:	b29b      	uxth	r3, r3
 8001950:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001954:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001958:	b29a      	uxth	r2, r3
 800195a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195c:	801a      	strh	r2, [r3, #0]
 800195e:	e01a      	b.n	8001996 <HAL_PCD_EP_DB_Transmit+0xfe>
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	785b      	ldrb	r3, [r3, #1]
 8001964:	2b01      	cmp	r3, #1
 8001966:	d116      	bne.n	8001996 <HAL_PCD_EP_DB_Transmit+0xfe>
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	633b      	str	r3, [r7, #48]	; 0x30
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001976:	b29b      	uxth	r3, r3
 8001978:	461a      	mov	r2, r3
 800197a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800197c:	4413      	add	r3, r2
 800197e:	633b      	str	r3, [r7, #48]	; 0x30
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	011a      	lsls	r2, r3, #4
 8001986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001988:	4413      	add	r3, r2
 800198a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800198e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001992:	2200      	movs	r2, #0
 8001994:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	623b      	str	r3, [r7, #32]
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	785b      	ldrb	r3, [r3, #1]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d126      	bne.n	80019f2 <HAL_PCD_EP_DB_Transmit+0x15a>
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	61bb      	str	r3, [r7, #24]
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80019b2:	b29b      	uxth	r3, r3
 80019b4:	461a      	mov	r2, r3
 80019b6:	69bb      	ldr	r3, [r7, #24]
 80019b8:	4413      	add	r3, r2
 80019ba:	61bb      	str	r3, [r7, #24]
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	011a      	lsls	r2, r3, #4
 80019c2:	69bb      	ldr	r3, [r7, #24]
 80019c4:	4413      	add	r3, r2
 80019c6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80019ca:	617b      	str	r3, [r7, #20]
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	881b      	ldrh	r3, [r3, #0]
 80019d0:	b29b      	uxth	r3, r3
 80019d2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80019d6:	b29a      	uxth	r2, r3
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	801a      	strh	r2, [r3, #0]
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	881b      	ldrh	r3, [r3, #0]
 80019e0:	b29b      	uxth	r3, r3
 80019e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80019e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80019ea:	b29a      	uxth	r2, r3
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	801a      	strh	r2, [r3, #0]
 80019f0:	e017      	b.n	8001a22 <HAL_PCD_EP_DB_Transmit+0x18a>
 80019f2:	68bb      	ldr	r3, [r7, #8]
 80019f4:	785b      	ldrb	r3, [r3, #1]
 80019f6:	2b01      	cmp	r3, #1
 80019f8:	d113      	bne.n	8001a22 <HAL_PCD_EP_DB_Transmit+0x18a>
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a02:	b29b      	uxth	r3, r3
 8001a04:	461a      	mov	r2, r3
 8001a06:	6a3b      	ldr	r3, [r7, #32]
 8001a08:	4413      	add	r3, r2
 8001a0a:	623b      	str	r3, [r7, #32]
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	011a      	lsls	r2, r3, #4
 8001a12:	6a3b      	ldr	r3, [r7, #32]
 8001a14:	4413      	add	r3, r2
 8001a16:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001a1a:	61fb      	str	r3, [r7, #28]
 8001a1c:	69fb      	ldr	r3, [r7, #28]
 8001a1e:	2200      	movs	r2, #0
 8001a20:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001a22:	68bb      	ldr	r3, [r7, #8]
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	4619      	mov	r1, r3
 8001a28:	68f8      	ldr	r0, [r7, #12]
 8001a2a:	f005 f848 	bl	8006abe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001a2e:	88fb      	ldrh	r3, [r7, #6]
 8001a30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	f000 82d4 	beq.w	8001fe2 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	461a      	mov	r2, r3
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	009b      	lsls	r3, r3, #2
 8001a46:	4413      	add	r3, r2
 8001a48:	881b      	ldrh	r3, [r3, #0]
 8001a4a:	b29b      	uxth	r3, r3
 8001a4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001a50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a54:	827b      	strh	r3, [r7, #18]
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	009b      	lsls	r3, r3, #2
 8001a62:	441a      	add	r2, r3
 8001a64:	8a7b      	ldrh	r3, [r7, #18]
 8001a66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001a6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001a6e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a76:	b29b      	uxth	r3, r3
 8001a78:	8013      	strh	r3, [r2, #0]
 8001a7a:	e2b2      	b.n	8001fe2 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001a7c:	88fb      	ldrh	r3, [r7, #6]
 8001a7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d021      	beq.n	8001aca <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	461a      	mov	r2, r3
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	009b      	lsls	r3, r3, #2
 8001a92:	4413      	add	r3, r2
 8001a94:	881b      	ldrh	r3, [r3, #0]
 8001a96:	b29b      	uxth	r3, r3
 8001a98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001a9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001aa0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	461a      	mov	r2, r3
 8001aaa:	68bb      	ldr	r3, [r7, #8]
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	441a      	add	r2, r3
 8001ab2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8001ab6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001aba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001abe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001ac2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ac6:	b29b      	uxth	r3, r3
 8001ac8:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8001aca:	68bb      	ldr	r3, [r7, #8]
 8001acc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	f040 8286 	bne.w	8001fe2 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8001ad6:	68bb      	ldr	r3, [r7, #8]
 8001ad8:	695a      	ldr	r2, [r3, #20]
 8001ada:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001ade:	441a      	add	r2, r3
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	69da      	ldr	r2, [r3, #28]
 8001ae8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001aec:	441a      	add	r2, r3
 8001aee:	68bb      	ldr	r3, [r7, #8]
 8001af0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8001af2:	68bb      	ldr	r3, [r7, #8]
 8001af4:	6a1a      	ldr	r2, [r3, #32]
 8001af6:	68bb      	ldr	r3, [r7, #8]
 8001af8:	691b      	ldr	r3, [r3, #16]
 8001afa:	429a      	cmp	r2, r3
 8001afc:	d309      	bcc.n	8001b12 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	691b      	ldr	r3, [r3, #16]
 8001b02:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	6a1a      	ldr	r2, [r3, #32]
 8001b08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b0a:	1ad2      	subs	r2, r2, r3
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	621a      	str	r2, [r3, #32]
 8001b10:	e015      	b.n	8001b3e <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8001b12:	68bb      	ldr	r3, [r7, #8]
 8001b14:	6a1b      	ldr	r3, [r3, #32]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d107      	bne.n	8001b2a <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8001b1a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001b1e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	2200      	movs	r2, #0
 8001b24:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001b28:	e009      	b.n	8001b3e <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8001b32:	68bb      	ldr	r3, [r7, #8]
 8001b34:	6a1b      	ldr	r3, [r3, #32]
 8001b36:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001b3e:	68bb      	ldr	r3, [r7, #8]
 8001b40:	785b      	ldrb	r3, [r3, #1]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d155      	bne.n	8001bf2 <HAL_PCD_EP_DB_Transmit+0x35a>
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	63bb      	str	r3, [r7, #56]	; 0x38
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b54:	b29b      	uxth	r3, r3
 8001b56:	461a      	mov	r2, r3
 8001b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b5a:	4413      	add	r3, r2
 8001b5c:	63bb      	str	r3, [r7, #56]	; 0x38
 8001b5e:	68bb      	ldr	r3, [r7, #8]
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	011a      	lsls	r2, r3, #4
 8001b64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b66:	4413      	add	r3, r2
 8001b68:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001b6c:	637b      	str	r3, [r7, #52]	; 0x34
 8001b6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d112      	bne.n	8001b9a <HAL_PCD_EP_DB_Transmit+0x302>
 8001b74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b76:	881b      	ldrh	r3, [r3, #0]
 8001b78:	b29b      	uxth	r3, r3
 8001b7a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001b7e:	b29a      	uxth	r2, r3
 8001b80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b82:	801a      	strh	r2, [r3, #0]
 8001b84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b86:	881b      	ldrh	r3, [r3, #0]
 8001b88:	b29b      	uxth	r3, r3
 8001b8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001b8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001b92:	b29a      	uxth	r2, r3
 8001b94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b96:	801a      	strh	r2, [r3, #0]
 8001b98:	e047      	b.n	8001c2a <HAL_PCD_EP_DB_Transmit+0x392>
 8001b9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b9c:	2b3e      	cmp	r3, #62	; 0x3e
 8001b9e:	d811      	bhi.n	8001bc4 <HAL_PCD_EP_DB_Transmit+0x32c>
 8001ba0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ba2:	085b      	lsrs	r3, r3, #1
 8001ba4:	64bb      	str	r3, [r7, #72]	; 0x48
 8001ba6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ba8:	f003 0301 	and.w	r3, r3, #1
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d002      	beq.n	8001bb6 <HAL_PCD_EP_DB_Transmit+0x31e>
 8001bb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001bb2:	3301      	adds	r3, #1
 8001bb4:	64bb      	str	r3, [r7, #72]	; 0x48
 8001bb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001bb8:	b29b      	uxth	r3, r3
 8001bba:	029b      	lsls	r3, r3, #10
 8001bbc:	b29a      	uxth	r2, r3
 8001bbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bc0:	801a      	strh	r2, [r3, #0]
 8001bc2:	e032      	b.n	8001c2a <HAL_PCD_EP_DB_Transmit+0x392>
 8001bc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001bc6:	095b      	lsrs	r3, r3, #5
 8001bc8:	64bb      	str	r3, [r7, #72]	; 0x48
 8001bca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001bcc:	f003 031f 	and.w	r3, r3, #31
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d102      	bne.n	8001bda <HAL_PCD_EP_DB_Transmit+0x342>
 8001bd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001bd6:	3b01      	subs	r3, #1
 8001bd8:	64bb      	str	r3, [r7, #72]	; 0x48
 8001bda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001bdc:	b29b      	uxth	r3, r3
 8001bde:	029b      	lsls	r3, r3, #10
 8001be0:	b29b      	uxth	r3, r3
 8001be2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001be6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001bea:	b29a      	uxth	r2, r3
 8001bec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bee:	801a      	strh	r2, [r3, #0]
 8001bf0:	e01b      	b.n	8001c2a <HAL_PCD_EP_DB_Transmit+0x392>
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	785b      	ldrb	r3, [r3, #1]
 8001bf6:	2b01      	cmp	r3, #1
 8001bf8:	d117      	bne.n	8001c2a <HAL_PCD_EP_DB_Transmit+0x392>
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	643b      	str	r3, [r7, #64]	; 0x40
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c08:	b29b      	uxth	r3, r3
 8001c0a:	461a      	mov	r2, r3
 8001c0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c0e:	4413      	add	r3, r2
 8001c10:	643b      	str	r3, [r7, #64]	; 0x40
 8001c12:	68bb      	ldr	r3, [r7, #8]
 8001c14:	781b      	ldrb	r3, [r3, #0]
 8001c16:	011a      	lsls	r2, r3, #4
 8001c18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c1a:	4413      	add	r3, r2
 8001c1c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001c20:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c24:	b29a      	uxth	r2, r3
 8001c26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c28:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	6818      	ldr	r0, [r3, #0]
 8001c2e:	68bb      	ldr	r3, [r7, #8]
 8001c30:	6959      	ldr	r1, [r3, #20]
 8001c32:	68bb      	ldr	r3, [r7, #8]
 8001c34:	891a      	ldrh	r2, [r3, #8]
 8001c36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c38:	b29b      	uxth	r3, r3
 8001c3a:	f003 f8d6 	bl	8004dea <USB_WritePMA>
 8001c3e:	e1d0      	b.n	8001fe2 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c48:	b29b      	uxth	r3, r3
 8001c4a:	461a      	mov	r2, r3
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	00db      	lsls	r3, r3, #3
 8001c52:	4413      	add	r3, r2
 8001c54:	3306      	adds	r3, #6
 8001c56:	005b      	lsls	r3, r3, #1
 8001c58:	68fa      	ldr	r2, [r7, #12]
 8001c5a:	6812      	ldr	r2, [r2, #0]
 8001c5c:	4413      	add	r3, r2
 8001c5e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001c62:	881b      	ldrh	r3, [r3, #0]
 8001c64:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c68:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	699a      	ldr	r2, [r3, #24]
 8001c70:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d307      	bcc.n	8001c88 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	699a      	ldr	r2, [r3, #24]
 8001c7c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001c80:	1ad2      	subs	r2, r2, r3
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	619a      	str	r2, [r3, #24]
 8001c86:	e002      	b.n	8001c8e <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	699b      	ldr	r3, [r3, #24]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	f040 80c4 	bne.w	8001e20 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	785b      	ldrb	r3, [r3, #1]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d126      	bne.n	8001cee <HAL_PCD_EP_DB_Transmit+0x456>
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001cae:	b29b      	uxth	r3, r3
 8001cb0:	461a      	mov	r2, r3
 8001cb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001cb4:	4413      	add	r3, r2
 8001cb6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	011a      	lsls	r2, r3, #4
 8001cbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001cc0:	4413      	add	r3, r2
 8001cc2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001cc6:	66bb      	str	r3, [r7, #104]	; 0x68
 8001cc8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001cca:	881b      	ldrh	r3, [r3, #0]
 8001ccc:	b29b      	uxth	r3, r3
 8001cce:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001cd2:	b29a      	uxth	r2, r3
 8001cd4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001cd6:	801a      	strh	r2, [r3, #0]
 8001cd8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001cda:	881b      	ldrh	r3, [r3, #0]
 8001cdc:	b29b      	uxth	r3, r3
 8001cde:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001ce2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001ce6:	b29a      	uxth	r2, r3
 8001ce8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001cea:	801a      	strh	r2, [r3, #0]
 8001cec:	e01a      	b.n	8001d24 <HAL_PCD_EP_DB_Transmit+0x48c>
 8001cee:	68bb      	ldr	r3, [r7, #8]
 8001cf0:	785b      	ldrb	r3, [r3, #1]
 8001cf2:	2b01      	cmp	r3, #1
 8001cf4:	d116      	bne.n	8001d24 <HAL_PCD_EP_DB_Transmit+0x48c>
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	677b      	str	r3, [r7, #116]	; 0x74
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d04:	b29b      	uxth	r3, r3
 8001d06:	461a      	mov	r2, r3
 8001d08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d0a:	4413      	add	r3, r2
 8001d0c:	677b      	str	r3, [r7, #116]	; 0x74
 8001d0e:	68bb      	ldr	r3, [r7, #8]
 8001d10:	781b      	ldrb	r3, [r3, #0]
 8001d12:	011a      	lsls	r2, r3, #4
 8001d14:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d16:	4413      	add	r3, r2
 8001d18:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001d1c:	673b      	str	r3, [r7, #112]	; 0x70
 8001d1e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d20:	2200      	movs	r2, #0
 8001d22:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	67bb      	str	r3, [r7, #120]	; 0x78
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	785b      	ldrb	r3, [r3, #1]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d12f      	bne.n	8001d92 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d42:	b29b      	uxth	r3, r3
 8001d44:	461a      	mov	r2, r3
 8001d46:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001d4a:	4413      	add	r3, r2
 8001d4c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	011a      	lsls	r2, r3, #4
 8001d56:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001d5a:	4413      	add	r3, r2
 8001d5c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001d60:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001d64:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d68:	881b      	ldrh	r3, [r3, #0]
 8001d6a:	b29b      	uxth	r3, r3
 8001d6c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001d70:	b29a      	uxth	r2, r3
 8001d72:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d76:	801a      	strh	r2, [r3, #0]
 8001d78:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d7c:	881b      	ldrh	r3, [r3, #0]
 8001d7e:	b29b      	uxth	r3, r3
 8001d80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d88:	b29a      	uxth	r2, r3
 8001d8a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d8e:	801a      	strh	r2, [r3, #0]
 8001d90:	e017      	b.n	8001dc2 <HAL_PCD_EP_DB_Transmit+0x52a>
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	785b      	ldrb	r3, [r3, #1]
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	d113      	bne.n	8001dc2 <HAL_PCD_EP_DB_Transmit+0x52a>
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001da2:	b29b      	uxth	r3, r3
 8001da4:	461a      	mov	r2, r3
 8001da6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001da8:	4413      	add	r3, r2
 8001daa:	67bb      	str	r3, [r7, #120]	; 0x78
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	011a      	lsls	r2, r3, #4
 8001db2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001db4:	4413      	add	r3, r2
 8001db6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001dba:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001dbc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	781b      	ldrb	r3, [r3, #0]
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	68f8      	ldr	r0, [r7, #12]
 8001dca:	f004 fe78 	bl	8006abe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8001dce:	88fb      	ldrh	r3, [r7, #6]
 8001dd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	f040 8104 	bne.w	8001fe2 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	461a      	mov	r2, r3
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	009b      	lsls	r3, r3, #2
 8001de6:	4413      	add	r3, r2
 8001de8:	881b      	ldrh	r3, [r3, #0]
 8001dea:	b29b      	uxth	r3, r3
 8001dec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001df0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001df4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	781b      	ldrb	r3, [r3, #0]
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	441a      	add	r2, r3
 8001e06:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001e0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001e0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001e12:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e1a:	b29b      	uxth	r3, r3
 8001e1c:	8013      	strh	r3, [r2, #0]
 8001e1e:	e0e0      	b.n	8001fe2 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8001e20:	88fb      	ldrh	r3, [r7, #6]
 8001e22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d121      	bne.n	8001e6e <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	461a      	mov	r2, r3
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	009b      	lsls	r3, r3, #2
 8001e36:	4413      	add	r3, r2
 8001e38:	881b      	ldrh	r3, [r3, #0]
 8001e3a:	b29b      	uxth	r3, r3
 8001e3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001e40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e44:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	461a      	mov	r2, r3
 8001e4e:	68bb      	ldr	r3, [r7, #8]
 8001e50:	781b      	ldrb	r3, [r3, #0]
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	441a      	add	r2, r3
 8001e56:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8001e5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001e5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001e62:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e6a:	b29b      	uxth	r3, r3
 8001e6c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	f040 80b4 	bne.w	8001fe2 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	695a      	ldr	r2, [r3, #20]
 8001e7e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001e82:	441a      	add	r2, r3
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	69da      	ldr	r2, [r3, #28]
 8001e8c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001e90:	441a      	add	r2, r3
 8001e92:	68bb      	ldr	r3, [r7, #8]
 8001e94:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8001e96:	68bb      	ldr	r3, [r7, #8]
 8001e98:	6a1a      	ldr	r2, [r3, #32]
 8001e9a:	68bb      	ldr	r3, [r7, #8]
 8001e9c:	691b      	ldr	r3, [r3, #16]
 8001e9e:	429a      	cmp	r2, r3
 8001ea0:	d309      	bcc.n	8001eb6 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	691b      	ldr	r3, [r3, #16]
 8001ea6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	6a1a      	ldr	r2, [r3, #32]
 8001eac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001eae:	1ad2      	subs	r2, r2, r3
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	621a      	str	r2, [r3, #32]
 8001eb4:	e015      	b.n	8001ee2 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	6a1b      	ldr	r3, [r3, #32]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d107      	bne.n	8001ece <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8001ebe:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001ec2:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001ecc:	e009      	b.n	8001ee2 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	6a1b      	ldr	r3, [r3, #32]
 8001ed2:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	2200      	movs	r2, #0
 8001ede:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	667b      	str	r3, [r7, #100]	; 0x64
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	785b      	ldrb	r3, [r3, #1]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d155      	bne.n	8001f9c <HAL_PCD_EP_DB_Transmit+0x704>
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001efe:	b29b      	uxth	r3, r3
 8001f00:	461a      	mov	r2, r3
 8001f02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f04:	4413      	add	r3, r2
 8001f06:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	011a      	lsls	r2, r3, #4
 8001f0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f10:	4413      	add	r3, r2
 8001f12:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001f16:	65bb      	str	r3, [r7, #88]	; 0x58
 8001f18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d112      	bne.n	8001f44 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8001f1e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f20:	881b      	ldrh	r3, [r3, #0]
 8001f22:	b29b      	uxth	r3, r3
 8001f24:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001f28:	b29a      	uxth	r2, r3
 8001f2a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f2c:	801a      	strh	r2, [r3, #0]
 8001f2e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f30:	881b      	ldrh	r3, [r3, #0]
 8001f32:	b29b      	uxth	r3, r3
 8001f34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f3c:	b29a      	uxth	r2, r3
 8001f3e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f40:	801a      	strh	r2, [r3, #0]
 8001f42:	e044      	b.n	8001fce <HAL_PCD_EP_DB_Transmit+0x736>
 8001f44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f46:	2b3e      	cmp	r3, #62	; 0x3e
 8001f48:	d811      	bhi.n	8001f6e <HAL_PCD_EP_DB_Transmit+0x6d6>
 8001f4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f4c:	085b      	lsrs	r3, r3, #1
 8001f4e:	657b      	str	r3, [r7, #84]	; 0x54
 8001f50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f52:	f003 0301 	and.w	r3, r3, #1
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d002      	beq.n	8001f60 <HAL_PCD_EP_DB_Transmit+0x6c8>
 8001f5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f5c:	3301      	adds	r3, #1
 8001f5e:	657b      	str	r3, [r7, #84]	; 0x54
 8001f60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f62:	b29b      	uxth	r3, r3
 8001f64:	029b      	lsls	r3, r3, #10
 8001f66:	b29a      	uxth	r2, r3
 8001f68:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f6a:	801a      	strh	r2, [r3, #0]
 8001f6c:	e02f      	b.n	8001fce <HAL_PCD_EP_DB_Transmit+0x736>
 8001f6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f70:	095b      	lsrs	r3, r3, #5
 8001f72:	657b      	str	r3, [r7, #84]	; 0x54
 8001f74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f76:	f003 031f 	and.w	r3, r3, #31
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d102      	bne.n	8001f84 <HAL_PCD_EP_DB_Transmit+0x6ec>
 8001f7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f80:	3b01      	subs	r3, #1
 8001f82:	657b      	str	r3, [r7, #84]	; 0x54
 8001f84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f86:	b29b      	uxth	r3, r3
 8001f88:	029b      	lsls	r3, r3, #10
 8001f8a:	b29b      	uxth	r3, r3
 8001f8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f94:	b29a      	uxth	r2, r3
 8001f96:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f98:	801a      	strh	r2, [r3, #0]
 8001f9a:	e018      	b.n	8001fce <HAL_PCD_EP_DB_Transmit+0x736>
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	785b      	ldrb	r3, [r3, #1]
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d114      	bne.n	8001fce <HAL_PCD_EP_DB_Transmit+0x736>
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fac:	b29b      	uxth	r3, r3
 8001fae:	461a      	mov	r2, r3
 8001fb0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001fb2:	4413      	add	r3, r2
 8001fb4:	667b      	str	r3, [r7, #100]	; 0x64
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	011a      	lsls	r2, r3, #4
 8001fbc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001fbe:	4413      	add	r3, r2
 8001fc0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001fc4:	663b      	str	r3, [r7, #96]	; 0x60
 8001fc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001fc8:	b29a      	uxth	r2, r3
 8001fca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001fcc:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	6818      	ldr	r0, [r3, #0]
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	6959      	ldr	r1, [r3, #20]
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	895a      	ldrh	r2, [r3, #10]
 8001fda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001fdc:	b29b      	uxth	r3, r3
 8001fde:	f002 ff04 	bl	8004dea <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	781b      	ldrb	r3, [r3, #0]
 8001fec:	009b      	lsls	r3, r3, #2
 8001fee:	4413      	add	r3, r2
 8001ff0:	881b      	ldrh	r3, [r3, #0]
 8001ff2:	b29b      	uxth	r3, r3
 8001ff4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001ff8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001ffc:	823b      	strh	r3, [r7, #16]
 8001ffe:	8a3b      	ldrh	r3, [r7, #16]
 8002000:	f083 0310 	eor.w	r3, r3, #16
 8002004:	823b      	strh	r3, [r7, #16]
 8002006:	8a3b      	ldrh	r3, [r7, #16]
 8002008:	f083 0320 	eor.w	r3, r3, #32
 800200c:	823b      	strh	r3, [r7, #16]
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	461a      	mov	r2, r3
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	441a      	add	r2, r3
 800201c:	8a3b      	ldrh	r3, [r7, #16]
 800201e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002022:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002026:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800202a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800202e:	b29b      	uxth	r3, r3
 8002030:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002032:	2300      	movs	r3, #0
}
 8002034:	4618      	mov	r0, r3
 8002036:	3788      	adds	r7, #136	; 0x88
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}

0800203c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800203c:	b480      	push	{r7}
 800203e:	b087      	sub	sp, #28
 8002040:	af00      	add	r7, sp, #0
 8002042:	60f8      	str	r0, [r7, #12]
 8002044:	607b      	str	r3, [r7, #4]
 8002046:	460b      	mov	r3, r1
 8002048:	817b      	strh	r3, [r7, #10]
 800204a:	4613      	mov	r3, r2
 800204c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800204e:	897b      	ldrh	r3, [r7, #10]
 8002050:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002054:	b29b      	uxth	r3, r3
 8002056:	2b00      	cmp	r3, #0
 8002058:	d00b      	beq.n	8002072 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800205a:	897b      	ldrh	r3, [r7, #10]
 800205c:	f003 0307 	and.w	r3, r3, #7
 8002060:	1c5a      	adds	r2, r3, #1
 8002062:	4613      	mov	r3, r2
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	4413      	add	r3, r2
 8002068:	00db      	lsls	r3, r3, #3
 800206a:	68fa      	ldr	r2, [r7, #12]
 800206c:	4413      	add	r3, r2
 800206e:	617b      	str	r3, [r7, #20]
 8002070:	e009      	b.n	8002086 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002072:	897a      	ldrh	r2, [r7, #10]
 8002074:	4613      	mov	r3, r2
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	4413      	add	r3, r2
 800207a:	00db      	lsls	r3, r3, #3
 800207c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002080:	68fa      	ldr	r2, [r7, #12]
 8002082:	4413      	add	r3, r2
 8002084:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002086:	893b      	ldrh	r3, [r7, #8]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d107      	bne.n	800209c <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	2200      	movs	r2, #0
 8002090:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	b29a      	uxth	r2, r3
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	80da      	strh	r2, [r3, #6]
 800209a:	e00b      	b.n	80020b4 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	2201      	movs	r2, #1
 80020a0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	b29a      	uxth	r2, r3
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	0c1b      	lsrs	r3, r3, #16
 80020ae:	b29a      	uxth	r2, r3
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80020b4:	2300      	movs	r3, #0
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	371c      	adds	r7, #28
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bc80      	pop	{r7}
 80020be:	4770      	bx	lr

080020c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b086      	sub	sp, #24
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d101      	bne.n	80020d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	e26c      	b.n	80025ac <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0301 	and.w	r3, r3, #1
 80020da:	2b00      	cmp	r3, #0
 80020dc:	f000 8087 	beq.w	80021ee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80020e0:	4b92      	ldr	r3, [pc, #584]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f003 030c 	and.w	r3, r3, #12
 80020e8:	2b04      	cmp	r3, #4
 80020ea:	d00c      	beq.n	8002106 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80020ec:	4b8f      	ldr	r3, [pc, #572]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f003 030c 	and.w	r3, r3, #12
 80020f4:	2b08      	cmp	r3, #8
 80020f6:	d112      	bne.n	800211e <HAL_RCC_OscConfig+0x5e>
 80020f8:	4b8c      	ldr	r3, [pc, #560]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002100:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002104:	d10b      	bne.n	800211e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002106:	4b89      	ldr	r3, [pc, #548]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800210e:	2b00      	cmp	r3, #0
 8002110:	d06c      	beq.n	80021ec <HAL_RCC_OscConfig+0x12c>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d168      	bne.n	80021ec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e246      	b.n	80025ac <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002126:	d106      	bne.n	8002136 <HAL_RCC_OscConfig+0x76>
 8002128:	4b80      	ldr	r3, [pc, #512]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a7f      	ldr	r2, [pc, #508]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 800212e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002132:	6013      	str	r3, [r2, #0]
 8002134:	e02e      	b.n	8002194 <HAL_RCC_OscConfig+0xd4>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d10c      	bne.n	8002158 <HAL_RCC_OscConfig+0x98>
 800213e:	4b7b      	ldr	r3, [pc, #492]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a7a      	ldr	r2, [pc, #488]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 8002144:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002148:	6013      	str	r3, [r2, #0]
 800214a:	4b78      	ldr	r3, [pc, #480]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a77      	ldr	r2, [pc, #476]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 8002150:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002154:	6013      	str	r3, [r2, #0]
 8002156:	e01d      	b.n	8002194 <HAL_RCC_OscConfig+0xd4>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002160:	d10c      	bne.n	800217c <HAL_RCC_OscConfig+0xbc>
 8002162:	4b72      	ldr	r3, [pc, #456]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a71      	ldr	r2, [pc, #452]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 8002168:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800216c:	6013      	str	r3, [r2, #0]
 800216e:	4b6f      	ldr	r3, [pc, #444]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a6e      	ldr	r2, [pc, #440]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 8002174:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002178:	6013      	str	r3, [r2, #0]
 800217a:	e00b      	b.n	8002194 <HAL_RCC_OscConfig+0xd4>
 800217c:	4b6b      	ldr	r3, [pc, #428]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a6a      	ldr	r2, [pc, #424]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 8002182:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002186:	6013      	str	r3, [r2, #0]
 8002188:	4b68      	ldr	r3, [pc, #416]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a67      	ldr	r2, [pc, #412]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 800218e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002192:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d013      	beq.n	80021c4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800219c:	f7fe f990 	bl	80004c0 <HAL_GetTick>
 80021a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021a2:	e008      	b.n	80021b6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021a4:	f7fe f98c 	bl	80004c0 <HAL_GetTick>
 80021a8:	4602      	mov	r2, r0
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	2b64      	cmp	r3, #100	; 0x64
 80021b0:	d901      	bls.n	80021b6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80021b2:	2303      	movs	r3, #3
 80021b4:	e1fa      	b.n	80025ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021b6:	4b5d      	ldr	r3, [pc, #372]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d0f0      	beq.n	80021a4 <HAL_RCC_OscConfig+0xe4>
 80021c2:	e014      	b.n	80021ee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021c4:	f7fe f97c 	bl	80004c0 <HAL_GetTick>
 80021c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021ca:	e008      	b.n	80021de <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021cc:	f7fe f978 	bl	80004c0 <HAL_GetTick>
 80021d0:	4602      	mov	r2, r0
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	2b64      	cmp	r3, #100	; 0x64
 80021d8:	d901      	bls.n	80021de <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80021da:	2303      	movs	r3, #3
 80021dc:	e1e6      	b.n	80025ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021de:	4b53      	ldr	r3, [pc, #332]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d1f0      	bne.n	80021cc <HAL_RCC_OscConfig+0x10c>
 80021ea:	e000      	b.n	80021ee <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 0302 	and.w	r3, r3, #2
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d063      	beq.n	80022c2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80021fa:	4b4c      	ldr	r3, [pc, #304]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	f003 030c 	and.w	r3, r3, #12
 8002202:	2b00      	cmp	r3, #0
 8002204:	d00b      	beq.n	800221e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002206:	4b49      	ldr	r3, [pc, #292]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	f003 030c 	and.w	r3, r3, #12
 800220e:	2b08      	cmp	r3, #8
 8002210:	d11c      	bne.n	800224c <HAL_RCC_OscConfig+0x18c>
 8002212:	4b46      	ldr	r3, [pc, #280]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800221a:	2b00      	cmp	r3, #0
 800221c:	d116      	bne.n	800224c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800221e:	4b43      	ldr	r3, [pc, #268]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 0302 	and.w	r3, r3, #2
 8002226:	2b00      	cmp	r3, #0
 8002228:	d005      	beq.n	8002236 <HAL_RCC_OscConfig+0x176>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	691b      	ldr	r3, [r3, #16]
 800222e:	2b01      	cmp	r3, #1
 8002230:	d001      	beq.n	8002236 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e1ba      	b.n	80025ac <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002236:	4b3d      	ldr	r3, [pc, #244]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	695b      	ldr	r3, [r3, #20]
 8002242:	00db      	lsls	r3, r3, #3
 8002244:	4939      	ldr	r1, [pc, #228]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 8002246:	4313      	orrs	r3, r2
 8002248:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800224a:	e03a      	b.n	80022c2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	691b      	ldr	r3, [r3, #16]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d020      	beq.n	8002296 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002254:	4b36      	ldr	r3, [pc, #216]	; (8002330 <HAL_RCC_OscConfig+0x270>)
 8002256:	2201      	movs	r2, #1
 8002258:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800225a:	f7fe f931 	bl	80004c0 <HAL_GetTick>
 800225e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002260:	e008      	b.n	8002274 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002262:	f7fe f92d 	bl	80004c0 <HAL_GetTick>
 8002266:	4602      	mov	r2, r0
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	1ad3      	subs	r3, r2, r3
 800226c:	2b02      	cmp	r3, #2
 800226e:	d901      	bls.n	8002274 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002270:	2303      	movs	r3, #3
 8002272:	e19b      	b.n	80025ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002274:	4b2d      	ldr	r3, [pc, #180]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 0302 	and.w	r3, r3, #2
 800227c:	2b00      	cmp	r3, #0
 800227e:	d0f0      	beq.n	8002262 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002280:	4b2a      	ldr	r3, [pc, #168]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	695b      	ldr	r3, [r3, #20]
 800228c:	00db      	lsls	r3, r3, #3
 800228e:	4927      	ldr	r1, [pc, #156]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 8002290:	4313      	orrs	r3, r2
 8002292:	600b      	str	r3, [r1, #0]
 8002294:	e015      	b.n	80022c2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002296:	4b26      	ldr	r3, [pc, #152]	; (8002330 <HAL_RCC_OscConfig+0x270>)
 8002298:	2200      	movs	r2, #0
 800229a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800229c:	f7fe f910 	bl	80004c0 <HAL_GetTick>
 80022a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022a2:	e008      	b.n	80022b6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022a4:	f7fe f90c 	bl	80004c0 <HAL_GetTick>
 80022a8:	4602      	mov	r2, r0
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	2b02      	cmp	r3, #2
 80022b0:	d901      	bls.n	80022b6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80022b2:	2303      	movs	r3, #3
 80022b4:	e17a      	b.n	80025ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022b6:	4b1d      	ldr	r3, [pc, #116]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 0302 	and.w	r3, r3, #2
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d1f0      	bne.n	80022a4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 0308 	and.w	r3, r3, #8
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d03a      	beq.n	8002344 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	699b      	ldr	r3, [r3, #24]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d019      	beq.n	800230a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022d6:	4b17      	ldr	r3, [pc, #92]	; (8002334 <HAL_RCC_OscConfig+0x274>)
 80022d8:	2201      	movs	r2, #1
 80022da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022dc:	f7fe f8f0 	bl	80004c0 <HAL_GetTick>
 80022e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022e2:	e008      	b.n	80022f6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022e4:	f7fe f8ec 	bl	80004c0 <HAL_GetTick>
 80022e8:	4602      	mov	r2, r0
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	2b02      	cmp	r3, #2
 80022f0:	d901      	bls.n	80022f6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80022f2:	2303      	movs	r3, #3
 80022f4:	e15a      	b.n	80025ac <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022f6:	4b0d      	ldr	r3, [pc, #52]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 80022f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022fa:	f003 0302 	and.w	r3, r3, #2
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d0f0      	beq.n	80022e4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002302:	2001      	movs	r0, #1
 8002304:	f000 faa6 	bl	8002854 <RCC_Delay>
 8002308:	e01c      	b.n	8002344 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800230a:	4b0a      	ldr	r3, [pc, #40]	; (8002334 <HAL_RCC_OscConfig+0x274>)
 800230c:	2200      	movs	r2, #0
 800230e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002310:	f7fe f8d6 	bl	80004c0 <HAL_GetTick>
 8002314:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002316:	e00f      	b.n	8002338 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002318:	f7fe f8d2 	bl	80004c0 <HAL_GetTick>
 800231c:	4602      	mov	r2, r0
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	2b02      	cmp	r3, #2
 8002324:	d908      	bls.n	8002338 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002326:	2303      	movs	r3, #3
 8002328:	e140      	b.n	80025ac <HAL_RCC_OscConfig+0x4ec>
 800232a:	bf00      	nop
 800232c:	40021000 	.word	0x40021000
 8002330:	42420000 	.word	0x42420000
 8002334:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002338:	4b9e      	ldr	r3, [pc, #632]	; (80025b4 <HAL_RCC_OscConfig+0x4f4>)
 800233a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800233c:	f003 0302 	and.w	r3, r3, #2
 8002340:	2b00      	cmp	r3, #0
 8002342:	d1e9      	bne.n	8002318 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 0304 	and.w	r3, r3, #4
 800234c:	2b00      	cmp	r3, #0
 800234e:	f000 80a6 	beq.w	800249e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002352:	2300      	movs	r3, #0
 8002354:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002356:	4b97      	ldr	r3, [pc, #604]	; (80025b4 <HAL_RCC_OscConfig+0x4f4>)
 8002358:	69db      	ldr	r3, [r3, #28]
 800235a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800235e:	2b00      	cmp	r3, #0
 8002360:	d10d      	bne.n	800237e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002362:	4b94      	ldr	r3, [pc, #592]	; (80025b4 <HAL_RCC_OscConfig+0x4f4>)
 8002364:	69db      	ldr	r3, [r3, #28]
 8002366:	4a93      	ldr	r2, [pc, #588]	; (80025b4 <HAL_RCC_OscConfig+0x4f4>)
 8002368:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800236c:	61d3      	str	r3, [r2, #28]
 800236e:	4b91      	ldr	r3, [pc, #580]	; (80025b4 <HAL_RCC_OscConfig+0x4f4>)
 8002370:	69db      	ldr	r3, [r3, #28]
 8002372:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002376:	60bb      	str	r3, [r7, #8]
 8002378:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800237a:	2301      	movs	r3, #1
 800237c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800237e:	4b8e      	ldr	r3, [pc, #568]	; (80025b8 <HAL_RCC_OscConfig+0x4f8>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002386:	2b00      	cmp	r3, #0
 8002388:	d118      	bne.n	80023bc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800238a:	4b8b      	ldr	r3, [pc, #556]	; (80025b8 <HAL_RCC_OscConfig+0x4f8>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a8a      	ldr	r2, [pc, #552]	; (80025b8 <HAL_RCC_OscConfig+0x4f8>)
 8002390:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002394:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002396:	f7fe f893 	bl	80004c0 <HAL_GetTick>
 800239a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800239c:	e008      	b.n	80023b0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800239e:	f7fe f88f 	bl	80004c0 <HAL_GetTick>
 80023a2:	4602      	mov	r2, r0
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	1ad3      	subs	r3, r2, r3
 80023a8:	2b64      	cmp	r3, #100	; 0x64
 80023aa:	d901      	bls.n	80023b0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80023ac:	2303      	movs	r3, #3
 80023ae:	e0fd      	b.n	80025ac <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023b0:	4b81      	ldr	r3, [pc, #516]	; (80025b8 <HAL_RCC_OscConfig+0x4f8>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d0f0      	beq.n	800239e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d106      	bne.n	80023d2 <HAL_RCC_OscConfig+0x312>
 80023c4:	4b7b      	ldr	r3, [pc, #492]	; (80025b4 <HAL_RCC_OscConfig+0x4f4>)
 80023c6:	6a1b      	ldr	r3, [r3, #32]
 80023c8:	4a7a      	ldr	r2, [pc, #488]	; (80025b4 <HAL_RCC_OscConfig+0x4f4>)
 80023ca:	f043 0301 	orr.w	r3, r3, #1
 80023ce:	6213      	str	r3, [r2, #32]
 80023d0:	e02d      	b.n	800242e <HAL_RCC_OscConfig+0x36e>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	68db      	ldr	r3, [r3, #12]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d10c      	bne.n	80023f4 <HAL_RCC_OscConfig+0x334>
 80023da:	4b76      	ldr	r3, [pc, #472]	; (80025b4 <HAL_RCC_OscConfig+0x4f4>)
 80023dc:	6a1b      	ldr	r3, [r3, #32]
 80023de:	4a75      	ldr	r2, [pc, #468]	; (80025b4 <HAL_RCC_OscConfig+0x4f4>)
 80023e0:	f023 0301 	bic.w	r3, r3, #1
 80023e4:	6213      	str	r3, [r2, #32]
 80023e6:	4b73      	ldr	r3, [pc, #460]	; (80025b4 <HAL_RCC_OscConfig+0x4f4>)
 80023e8:	6a1b      	ldr	r3, [r3, #32]
 80023ea:	4a72      	ldr	r2, [pc, #456]	; (80025b4 <HAL_RCC_OscConfig+0x4f4>)
 80023ec:	f023 0304 	bic.w	r3, r3, #4
 80023f0:	6213      	str	r3, [r2, #32]
 80023f2:	e01c      	b.n	800242e <HAL_RCC_OscConfig+0x36e>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	2b05      	cmp	r3, #5
 80023fa:	d10c      	bne.n	8002416 <HAL_RCC_OscConfig+0x356>
 80023fc:	4b6d      	ldr	r3, [pc, #436]	; (80025b4 <HAL_RCC_OscConfig+0x4f4>)
 80023fe:	6a1b      	ldr	r3, [r3, #32]
 8002400:	4a6c      	ldr	r2, [pc, #432]	; (80025b4 <HAL_RCC_OscConfig+0x4f4>)
 8002402:	f043 0304 	orr.w	r3, r3, #4
 8002406:	6213      	str	r3, [r2, #32]
 8002408:	4b6a      	ldr	r3, [pc, #424]	; (80025b4 <HAL_RCC_OscConfig+0x4f4>)
 800240a:	6a1b      	ldr	r3, [r3, #32]
 800240c:	4a69      	ldr	r2, [pc, #420]	; (80025b4 <HAL_RCC_OscConfig+0x4f4>)
 800240e:	f043 0301 	orr.w	r3, r3, #1
 8002412:	6213      	str	r3, [r2, #32]
 8002414:	e00b      	b.n	800242e <HAL_RCC_OscConfig+0x36e>
 8002416:	4b67      	ldr	r3, [pc, #412]	; (80025b4 <HAL_RCC_OscConfig+0x4f4>)
 8002418:	6a1b      	ldr	r3, [r3, #32]
 800241a:	4a66      	ldr	r2, [pc, #408]	; (80025b4 <HAL_RCC_OscConfig+0x4f4>)
 800241c:	f023 0301 	bic.w	r3, r3, #1
 8002420:	6213      	str	r3, [r2, #32]
 8002422:	4b64      	ldr	r3, [pc, #400]	; (80025b4 <HAL_RCC_OscConfig+0x4f4>)
 8002424:	6a1b      	ldr	r3, [r3, #32]
 8002426:	4a63      	ldr	r2, [pc, #396]	; (80025b4 <HAL_RCC_OscConfig+0x4f4>)
 8002428:	f023 0304 	bic.w	r3, r3, #4
 800242c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	68db      	ldr	r3, [r3, #12]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d015      	beq.n	8002462 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002436:	f7fe f843 	bl	80004c0 <HAL_GetTick>
 800243a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800243c:	e00a      	b.n	8002454 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800243e:	f7fe f83f 	bl	80004c0 <HAL_GetTick>
 8002442:	4602      	mov	r2, r0
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	1ad3      	subs	r3, r2, r3
 8002448:	f241 3288 	movw	r2, #5000	; 0x1388
 800244c:	4293      	cmp	r3, r2
 800244e:	d901      	bls.n	8002454 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002450:	2303      	movs	r3, #3
 8002452:	e0ab      	b.n	80025ac <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002454:	4b57      	ldr	r3, [pc, #348]	; (80025b4 <HAL_RCC_OscConfig+0x4f4>)
 8002456:	6a1b      	ldr	r3, [r3, #32]
 8002458:	f003 0302 	and.w	r3, r3, #2
 800245c:	2b00      	cmp	r3, #0
 800245e:	d0ee      	beq.n	800243e <HAL_RCC_OscConfig+0x37e>
 8002460:	e014      	b.n	800248c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002462:	f7fe f82d 	bl	80004c0 <HAL_GetTick>
 8002466:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002468:	e00a      	b.n	8002480 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800246a:	f7fe f829 	bl	80004c0 <HAL_GetTick>
 800246e:	4602      	mov	r2, r0
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	1ad3      	subs	r3, r2, r3
 8002474:	f241 3288 	movw	r2, #5000	; 0x1388
 8002478:	4293      	cmp	r3, r2
 800247a:	d901      	bls.n	8002480 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800247c:	2303      	movs	r3, #3
 800247e:	e095      	b.n	80025ac <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002480:	4b4c      	ldr	r3, [pc, #304]	; (80025b4 <HAL_RCC_OscConfig+0x4f4>)
 8002482:	6a1b      	ldr	r3, [r3, #32]
 8002484:	f003 0302 	and.w	r3, r3, #2
 8002488:	2b00      	cmp	r3, #0
 800248a:	d1ee      	bne.n	800246a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800248c:	7dfb      	ldrb	r3, [r7, #23]
 800248e:	2b01      	cmp	r3, #1
 8002490:	d105      	bne.n	800249e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002492:	4b48      	ldr	r3, [pc, #288]	; (80025b4 <HAL_RCC_OscConfig+0x4f4>)
 8002494:	69db      	ldr	r3, [r3, #28]
 8002496:	4a47      	ldr	r2, [pc, #284]	; (80025b4 <HAL_RCC_OscConfig+0x4f4>)
 8002498:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800249c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	69db      	ldr	r3, [r3, #28]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	f000 8081 	beq.w	80025aa <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024a8:	4b42      	ldr	r3, [pc, #264]	; (80025b4 <HAL_RCC_OscConfig+0x4f4>)
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f003 030c 	and.w	r3, r3, #12
 80024b0:	2b08      	cmp	r3, #8
 80024b2:	d061      	beq.n	8002578 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	69db      	ldr	r3, [r3, #28]
 80024b8:	2b02      	cmp	r3, #2
 80024ba:	d146      	bne.n	800254a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024bc:	4b3f      	ldr	r3, [pc, #252]	; (80025bc <HAL_RCC_OscConfig+0x4fc>)
 80024be:	2200      	movs	r2, #0
 80024c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024c2:	f7fd fffd 	bl	80004c0 <HAL_GetTick>
 80024c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024c8:	e008      	b.n	80024dc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024ca:	f7fd fff9 	bl	80004c0 <HAL_GetTick>
 80024ce:	4602      	mov	r2, r0
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	1ad3      	subs	r3, r2, r3
 80024d4:	2b02      	cmp	r3, #2
 80024d6:	d901      	bls.n	80024dc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80024d8:	2303      	movs	r3, #3
 80024da:	e067      	b.n	80025ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024dc:	4b35      	ldr	r3, [pc, #212]	; (80025b4 <HAL_RCC_OscConfig+0x4f4>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d1f0      	bne.n	80024ca <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6a1b      	ldr	r3, [r3, #32]
 80024ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024f0:	d108      	bne.n	8002504 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80024f2:	4b30      	ldr	r3, [pc, #192]	; (80025b4 <HAL_RCC_OscConfig+0x4f4>)
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	492d      	ldr	r1, [pc, #180]	; (80025b4 <HAL_RCC_OscConfig+0x4f4>)
 8002500:	4313      	orrs	r3, r2
 8002502:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002504:	4b2b      	ldr	r3, [pc, #172]	; (80025b4 <HAL_RCC_OscConfig+0x4f4>)
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6a19      	ldr	r1, [r3, #32]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002514:	430b      	orrs	r3, r1
 8002516:	4927      	ldr	r1, [pc, #156]	; (80025b4 <HAL_RCC_OscConfig+0x4f4>)
 8002518:	4313      	orrs	r3, r2
 800251a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800251c:	4b27      	ldr	r3, [pc, #156]	; (80025bc <HAL_RCC_OscConfig+0x4fc>)
 800251e:	2201      	movs	r2, #1
 8002520:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002522:	f7fd ffcd 	bl	80004c0 <HAL_GetTick>
 8002526:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002528:	e008      	b.n	800253c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800252a:	f7fd ffc9 	bl	80004c0 <HAL_GetTick>
 800252e:	4602      	mov	r2, r0
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	1ad3      	subs	r3, r2, r3
 8002534:	2b02      	cmp	r3, #2
 8002536:	d901      	bls.n	800253c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002538:	2303      	movs	r3, #3
 800253a:	e037      	b.n	80025ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800253c:	4b1d      	ldr	r3, [pc, #116]	; (80025b4 <HAL_RCC_OscConfig+0x4f4>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002544:	2b00      	cmp	r3, #0
 8002546:	d0f0      	beq.n	800252a <HAL_RCC_OscConfig+0x46a>
 8002548:	e02f      	b.n	80025aa <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800254a:	4b1c      	ldr	r3, [pc, #112]	; (80025bc <HAL_RCC_OscConfig+0x4fc>)
 800254c:	2200      	movs	r2, #0
 800254e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002550:	f7fd ffb6 	bl	80004c0 <HAL_GetTick>
 8002554:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002556:	e008      	b.n	800256a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002558:	f7fd ffb2 	bl	80004c0 <HAL_GetTick>
 800255c:	4602      	mov	r2, r0
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	2b02      	cmp	r3, #2
 8002564:	d901      	bls.n	800256a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002566:	2303      	movs	r3, #3
 8002568:	e020      	b.n	80025ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800256a:	4b12      	ldr	r3, [pc, #72]	; (80025b4 <HAL_RCC_OscConfig+0x4f4>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002572:	2b00      	cmp	r3, #0
 8002574:	d1f0      	bne.n	8002558 <HAL_RCC_OscConfig+0x498>
 8002576:	e018      	b.n	80025aa <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	69db      	ldr	r3, [r3, #28]
 800257c:	2b01      	cmp	r3, #1
 800257e:	d101      	bne.n	8002584 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	e013      	b.n	80025ac <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002584:	4b0b      	ldr	r3, [pc, #44]	; (80025b4 <HAL_RCC_OscConfig+0x4f4>)
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6a1b      	ldr	r3, [r3, #32]
 8002594:	429a      	cmp	r2, r3
 8002596:	d106      	bne.n	80025a6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025a2:	429a      	cmp	r2, r3
 80025a4:	d001      	beq.n	80025aa <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e000      	b.n	80025ac <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80025aa:	2300      	movs	r3, #0
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3718      	adds	r7, #24
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	40021000 	.word	0x40021000
 80025b8:	40007000 	.word	0x40007000
 80025bc:	42420060 	.word	0x42420060

080025c0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b084      	sub	sp, #16
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
 80025c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d101      	bne.n	80025d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	e0d0      	b.n	8002776 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025d4:	4b6a      	ldr	r3, [pc, #424]	; (8002780 <HAL_RCC_ClockConfig+0x1c0>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 0307 	and.w	r3, r3, #7
 80025dc:	683a      	ldr	r2, [r7, #0]
 80025de:	429a      	cmp	r2, r3
 80025e0:	d910      	bls.n	8002604 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025e2:	4b67      	ldr	r3, [pc, #412]	; (8002780 <HAL_RCC_ClockConfig+0x1c0>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f023 0207 	bic.w	r2, r3, #7
 80025ea:	4965      	ldr	r1, [pc, #404]	; (8002780 <HAL_RCC_ClockConfig+0x1c0>)
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	4313      	orrs	r3, r2
 80025f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025f2:	4b63      	ldr	r3, [pc, #396]	; (8002780 <HAL_RCC_ClockConfig+0x1c0>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 0307 	and.w	r3, r3, #7
 80025fa:	683a      	ldr	r2, [r7, #0]
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d001      	beq.n	8002604 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	e0b8      	b.n	8002776 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 0302 	and.w	r3, r3, #2
 800260c:	2b00      	cmp	r3, #0
 800260e:	d020      	beq.n	8002652 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 0304 	and.w	r3, r3, #4
 8002618:	2b00      	cmp	r3, #0
 800261a:	d005      	beq.n	8002628 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800261c:	4b59      	ldr	r3, [pc, #356]	; (8002784 <HAL_RCC_ClockConfig+0x1c4>)
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	4a58      	ldr	r2, [pc, #352]	; (8002784 <HAL_RCC_ClockConfig+0x1c4>)
 8002622:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002626:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 0308 	and.w	r3, r3, #8
 8002630:	2b00      	cmp	r3, #0
 8002632:	d005      	beq.n	8002640 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002634:	4b53      	ldr	r3, [pc, #332]	; (8002784 <HAL_RCC_ClockConfig+0x1c4>)
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	4a52      	ldr	r2, [pc, #328]	; (8002784 <HAL_RCC_ClockConfig+0x1c4>)
 800263a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800263e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002640:	4b50      	ldr	r3, [pc, #320]	; (8002784 <HAL_RCC_ClockConfig+0x1c4>)
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	494d      	ldr	r1, [pc, #308]	; (8002784 <HAL_RCC_ClockConfig+0x1c4>)
 800264e:	4313      	orrs	r3, r2
 8002650:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 0301 	and.w	r3, r3, #1
 800265a:	2b00      	cmp	r3, #0
 800265c:	d040      	beq.n	80026e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	2b01      	cmp	r3, #1
 8002664:	d107      	bne.n	8002676 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002666:	4b47      	ldr	r3, [pc, #284]	; (8002784 <HAL_RCC_ClockConfig+0x1c4>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800266e:	2b00      	cmp	r3, #0
 8002670:	d115      	bne.n	800269e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e07f      	b.n	8002776 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	2b02      	cmp	r3, #2
 800267c:	d107      	bne.n	800268e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800267e:	4b41      	ldr	r3, [pc, #260]	; (8002784 <HAL_RCC_ClockConfig+0x1c4>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002686:	2b00      	cmp	r3, #0
 8002688:	d109      	bne.n	800269e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e073      	b.n	8002776 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800268e:	4b3d      	ldr	r3, [pc, #244]	; (8002784 <HAL_RCC_ClockConfig+0x1c4>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 0302 	and.w	r3, r3, #2
 8002696:	2b00      	cmp	r3, #0
 8002698:	d101      	bne.n	800269e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e06b      	b.n	8002776 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800269e:	4b39      	ldr	r3, [pc, #228]	; (8002784 <HAL_RCC_ClockConfig+0x1c4>)
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	f023 0203 	bic.w	r2, r3, #3
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	4936      	ldr	r1, [pc, #216]	; (8002784 <HAL_RCC_ClockConfig+0x1c4>)
 80026ac:	4313      	orrs	r3, r2
 80026ae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026b0:	f7fd ff06 	bl	80004c0 <HAL_GetTick>
 80026b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026b6:	e00a      	b.n	80026ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026b8:	f7fd ff02 	bl	80004c0 <HAL_GetTick>
 80026bc:	4602      	mov	r2, r0
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d901      	bls.n	80026ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026ca:	2303      	movs	r3, #3
 80026cc:	e053      	b.n	8002776 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026ce:	4b2d      	ldr	r3, [pc, #180]	; (8002784 <HAL_RCC_ClockConfig+0x1c4>)
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	f003 020c 	and.w	r2, r3, #12
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	429a      	cmp	r2, r3
 80026de:	d1eb      	bne.n	80026b8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026e0:	4b27      	ldr	r3, [pc, #156]	; (8002780 <HAL_RCC_ClockConfig+0x1c0>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 0307 	and.w	r3, r3, #7
 80026e8:	683a      	ldr	r2, [r7, #0]
 80026ea:	429a      	cmp	r2, r3
 80026ec:	d210      	bcs.n	8002710 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026ee:	4b24      	ldr	r3, [pc, #144]	; (8002780 <HAL_RCC_ClockConfig+0x1c0>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f023 0207 	bic.w	r2, r3, #7
 80026f6:	4922      	ldr	r1, [pc, #136]	; (8002780 <HAL_RCC_ClockConfig+0x1c0>)
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	4313      	orrs	r3, r2
 80026fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026fe:	4b20      	ldr	r3, [pc, #128]	; (8002780 <HAL_RCC_ClockConfig+0x1c0>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 0307 	and.w	r3, r3, #7
 8002706:	683a      	ldr	r2, [r7, #0]
 8002708:	429a      	cmp	r2, r3
 800270a:	d001      	beq.n	8002710 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	e032      	b.n	8002776 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0304 	and.w	r3, r3, #4
 8002718:	2b00      	cmp	r3, #0
 800271a:	d008      	beq.n	800272e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800271c:	4b19      	ldr	r3, [pc, #100]	; (8002784 <HAL_RCC_ClockConfig+0x1c4>)
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	4916      	ldr	r1, [pc, #88]	; (8002784 <HAL_RCC_ClockConfig+0x1c4>)
 800272a:	4313      	orrs	r3, r2
 800272c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 0308 	and.w	r3, r3, #8
 8002736:	2b00      	cmp	r3, #0
 8002738:	d009      	beq.n	800274e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800273a:	4b12      	ldr	r3, [pc, #72]	; (8002784 <HAL_RCC_ClockConfig+0x1c4>)
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	691b      	ldr	r3, [r3, #16]
 8002746:	00db      	lsls	r3, r3, #3
 8002748:	490e      	ldr	r1, [pc, #56]	; (8002784 <HAL_RCC_ClockConfig+0x1c4>)
 800274a:	4313      	orrs	r3, r2
 800274c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800274e:	f000 f821 	bl	8002794 <HAL_RCC_GetSysClockFreq>
 8002752:	4602      	mov	r2, r0
 8002754:	4b0b      	ldr	r3, [pc, #44]	; (8002784 <HAL_RCC_ClockConfig+0x1c4>)
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	091b      	lsrs	r3, r3, #4
 800275a:	f003 030f 	and.w	r3, r3, #15
 800275e:	490a      	ldr	r1, [pc, #40]	; (8002788 <HAL_RCC_ClockConfig+0x1c8>)
 8002760:	5ccb      	ldrb	r3, [r1, r3]
 8002762:	fa22 f303 	lsr.w	r3, r2, r3
 8002766:	4a09      	ldr	r2, [pc, #36]	; (800278c <HAL_RCC_ClockConfig+0x1cc>)
 8002768:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800276a:	4b09      	ldr	r3, [pc, #36]	; (8002790 <HAL_RCC_ClockConfig+0x1d0>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4618      	mov	r0, r3
 8002770:	f7fd fe64 	bl	800043c <HAL_InitTick>

  return HAL_OK;
 8002774:	2300      	movs	r3, #0
}
 8002776:	4618      	mov	r0, r3
 8002778:	3710      	adds	r7, #16
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop
 8002780:	40022000 	.word	0x40022000
 8002784:	40021000 	.word	0x40021000
 8002788:	080078f0 	.word	0x080078f0
 800278c:	20000014 	.word	0x20000014
 8002790:	20000018 	.word	0x20000018

08002794 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002794:	b490      	push	{r4, r7}
 8002796:	b08a      	sub	sp, #40	; 0x28
 8002798:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800279a:	4b2a      	ldr	r3, [pc, #168]	; (8002844 <HAL_RCC_GetSysClockFreq+0xb0>)
 800279c:	1d3c      	adds	r4, r7, #4
 800279e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80027a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80027a4:	f240 2301 	movw	r3, #513	; 0x201
 80027a8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80027aa:	2300      	movs	r3, #0
 80027ac:	61fb      	str	r3, [r7, #28]
 80027ae:	2300      	movs	r3, #0
 80027b0:	61bb      	str	r3, [r7, #24]
 80027b2:	2300      	movs	r3, #0
 80027b4:	627b      	str	r3, [r7, #36]	; 0x24
 80027b6:	2300      	movs	r3, #0
 80027b8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80027ba:	2300      	movs	r3, #0
 80027bc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80027be:	4b22      	ldr	r3, [pc, #136]	; (8002848 <HAL_RCC_GetSysClockFreq+0xb4>)
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80027c4:	69fb      	ldr	r3, [r7, #28]
 80027c6:	f003 030c 	and.w	r3, r3, #12
 80027ca:	2b04      	cmp	r3, #4
 80027cc:	d002      	beq.n	80027d4 <HAL_RCC_GetSysClockFreq+0x40>
 80027ce:	2b08      	cmp	r3, #8
 80027d0:	d003      	beq.n	80027da <HAL_RCC_GetSysClockFreq+0x46>
 80027d2:	e02d      	b.n	8002830 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80027d4:	4b1d      	ldr	r3, [pc, #116]	; (800284c <HAL_RCC_GetSysClockFreq+0xb8>)
 80027d6:	623b      	str	r3, [r7, #32]
      break;
 80027d8:	e02d      	b.n	8002836 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	0c9b      	lsrs	r3, r3, #18
 80027de:	f003 030f 	and.w	r3, r3, #15
 80027e2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80027e6:	4413      	add	r3, r2
 80027e8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80027ec:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80027ee:	69fb      	ldr	r3, [r7, #28]
 80027f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d013      	beq.n	8002820 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80027f8:	4b13      	ldr	r3, [pc, #76]	; (8002848 <HAL_RCC_GetSysClockFreq+0xb4>)
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	0c5b      	lsrs	r3, r3, #17
 80027fe:	f003 0301 	and.w	r3, r3, #1
 8002802:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002806:	4413      	add	r3, r2
 8002808:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800280c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	4a0e      	ldr	r2, [pc, #56]	; (800284c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002812:	fb02 f203 	mul.w	r2, r2, r3
 8002816:	69bb      	ldr	r3, [r7, #24]
 8002818:	fbb2 f3f3 	udiv	r3, r2, r3
 800281c:	627b      	str	r3, [r7, #36]	; 0x24
 800281e:	e004      	b.n	800282a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	4a0b      	ldr	r2, [pc, #44]	; (8002850 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002824:	fb02 f303 	mul.w	r3, r2, r3
 8002828:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800282a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800282c:	623b      	str	r3, [r7, #32]
      break;
 800282e:	e002      	b.n	8002836 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002830:	4b06      	ldr	r3, [pc, #24]	; (800284c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002832:	623b      	str	r3, [r7, #32]
      break;
 8002834:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002836:	6a3b      	ldr	r3, [r7, #32]
}
 8002838:	4618      	mov	r0, r3
 800283a:	3728      	adds	r7, #40	; 0x28
 800283c:	46bd      	mov	sp, r7
 800283e:	bc90      	pop	{r4, r7}
 8002840:	4770      	bx	lr
 8002842:	bf00      	nop
 8002844:	08007898 	.word	0x08007898
 8002848:	40021000 	.word	0x40021000
 800284c:	007a1200 	.word	0x007a1200
 8002850:	003d0900 	.word	0x003d0900

08002854 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002854:	b480      	push	{r7}
 8002856:	b085      	sub	sp, #20
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800285c:	4b0a      	ldr	r3, [pc, #40]	; (8002888 <RCC_Delay+0x34>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a0a      	ldr	r2, [pc, #40]	; (800288c <RCC_Delay+0x38>)
 8002862:	fba2 2303 	umull	r2, r3, r2, r3
 8002866:	0a5b      	lsrs	r3, r3, #9
 8002868:	687a      	ldr	r2, [r7, #4]
 800286a:	fb02 f303 	mul.w	r3, r2, r3
 800286e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002870:	bf00      	nop
  }
  while (Delay --);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	1e5a      	subs	r2, r3, #1
 8002876:	60fa      	str	r2, [r7, #12]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d1f9      	bne.n	8002870 <RCC_Delay+0x1c>
}
 800287c:	bf00      	nop
 800287e:	bf00      	nop
 8002880:	3714      	adds	r7, #20
 8002882:	46bd      	mov	sp, r7
 8002884:	bc80      	pop	{r7}
 8002886:	4770      	bx	lr
 8002888:	20000014 	.word	0x20000014
 800288c:	10624dd3 	.word	0x10624dd3

08002890 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b086      	sub	sp, #24
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002898:	2300      	movs	r3, #0
 800289a:	613b      	str	r3, [r7, #16]
 800289c:	2300      	movs	r3, #0
 800289e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 0301 	and.w	r3, r3, #1
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d07d      	beq.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80028ac:	2300      	movs	r3, #0
 80028ae:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028b0:	4b4f      	ldr	r3, [pc, #316]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028b2:	69db      	ldr	r3, [r3, #28]
 80028b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d10d      	bne.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028bc:	4b4c      	ldr	r3, [pc, #304]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028be:	69db      	ldr	r3, [r3, #28]
 80028c0:	4a4b      	ldr	r2, [pc, #300]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028c6:	61d3      	str	r3, [r2, #28]
 80028c8:	4b49      	ldr	r3, [pc, #292]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028ca:	69db      	ldr	r3, [r3, #28]
 80028cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028d0:	60bb      	str	r3, [r7, #8]
 80028d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028d4:	2301      	movs	r3, #1
 80028d6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028d8:	4b46      	ldr	r3, [pc, #280]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d118      	bne.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028e4:	4b43      	ldr	r3, [pc, #268]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a42      	ldr	r2, [pc, #264]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80028ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028ee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028f0:	f7fd fde6 	bl	80004c0 <HAL_GetTick>
 80028f4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028f6:	e008      	b.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028f8:	f7fd fde2 	bl	80004c0 <HAL_GetTick>
 80028fc:	4602      	mov	r2, r0
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	2b64      	cmp	r3, #100	; 0x64
 8002904:	d901      	bls.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002906:	2303      	movs	r3, #3
 8002908:	e06d      	b.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800290a:	4b3a      	ldr	r3, [pc, #232]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002912:	2b00      	cmp	r3, #0
 8002914:	d0f0      	beq.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002916:	4b36      	ldr	r3, [pc, #216]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002918:	6a1b      	ldr	r3, [r3, #32]
 800291a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800291e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d02e      	beq.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800292e:	68fa      	ldr	r2, [r7, #12]
 8002930:	429a      	cmp	r2, r3
 8002932:	d027      	beq.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002934:	4b2e      	ldr	r3, [pc, #184]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002936:	6a1b      	ldr	r3, [r3, #32]
 8002938:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800293c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800293e:	4b2e      	ldr	r3, [pc, #184]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002940:	2201      	movs	r2, #1
 8002942:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002944:	4b2c      	ldr	r3, [pc, #176]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002946:	2200      	movs	r2, #0
 8002948:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800294a:	4a29      	ldr	r2, [pc, #164]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	f003 0301 	and.w	r3, r3, #1
 8002956:	2b00      	cmp	r3, #0
 8002958:	d014      	beq.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800295a:	f7fd fdb1 	bl	80004c0 <HAL_GetTick>
 800295e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002960:	e00a      	b.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002962:	f7fd fdad 	bl	80004c0 <HAL_GetTick>
 8002966:	4602      	mov	r2, r0
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	1ad3      	subs	r3, r2, r3
 800296c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002970:	4293      	cmp	r3, r2
 8002972:	d901      	bls.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002974:	2303      	movs	r3, #3
 8002976:	e036      	b.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002978:	4b1d      	ldr	r3, [pc, #116]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800297a:	6a1b      	ldr	r3, [r3, #32]
 800297c:	f003 0302 	and.w	r3, r3, #2
 8002980:	2b00      	cmp	r3, #0
 8002982:	d0ee      	beq.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002984:	4b1a      	ldr	r3, [pc, #104]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002986:	6a1b      	ldr	r3, [r3, #32]
 8002988:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	4917      	ldr	r1, [pc, #92]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002992:	4313      	orrs	r3, r2
 8002994:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002996:	7dfb      	ldrb	r3, [r7, #23]
 8002998:	2b01      	cmp	r3, #1
 800299a:	d105      	bne.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800299c:	4b14      	ldr	r3, [pc, #80]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800299e:	69db      	ldr	r3, [r3, #28]
 80029a0:	4a13      	ldr	r2, [pc, #76]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029a6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 0302 	and.w	r3, r3, #2
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d008      	beq.n	80029c6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80029b4:	4b0e      	ldr	r3, [pc, #56]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	490b      	ldr	r1, [pc, #44]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029c2:	4313      	orrs	r3, r2
 80029c4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 0310 	and.w	r3, r3, #16
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d008      	beq.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80029d2:	4b07      	ldr	r3, [pc, #28]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	68db      	ldr	r3, [r3, #12]
 80029de:	4904      	ldr	r1, [pc, #16]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029e0:	4313      	orrs	r3, r2
 80029e2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80029e4:	2300      	movs	r3, #0
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	3718      	adds	r7, #24
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	40021000 	.word	0x40021000
 80029f4:	40007000 	.word	0x40007000
 80029f8:	42420440 	.word	0x42420440

080029fc <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80029fc:	b084      	sub	sp, #16
 80029fe:	b480      	push	{r7}
 8002a00:	b083      	sub	sp, #12
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	6078      	str	r0, [r7, #4]
 8002a06:	f107 0014 	add.w	r0, r7, #20
 8002a0a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8002a0e:	2300      	movs	r3, #0
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	370c      	adds	r7, #12
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bc80      	pop	{r7}
 8002a18:	b004      	add	sp, #16
 8002a1a:	4770      	bx	lr

08002a1c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b085      	sub	sp, #20
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2200      	movs	r2, #0
 8002a28:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002a2c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8002a30:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	b29a      	uxth	r2, r3
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002a3c:	2300      	movs	r3, #0
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3714      	adds	r7, #20
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bc80      	pop	{r7}
 8002a46:	4770      	bx	lr

08002a48 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b085      	sub	sp, #20
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002a50:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8002a54:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002a5c:	b29a      	uxth	r2, r3
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	b29b      	uxth	r3, r3
 8002a62:	43db      	mvns	r3, r3
 8002a64:	b29b      	uxth	r3, r3
 8002a66:	4013      	ands	r3, r2
 8002a68:	b29a      	uxth	r2, r3
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002a70:	2300      	movs	r3, #0
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3714      	adds	r7, #20
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bc80      	pop	{r7}
 8002a7a:	4770      	bx	lr

08002a7c <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b083      	sub	sp, #12
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
 8002a84:	460b      	mov	r3, r1
 8002a86:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8002a88:	2300      	movs	r3, #0
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	370c      	adds	r7, #12
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bc80      	pop	{r7}
 8002a92:	4770      	bx	lr

08002a94 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002a94:	b084      	sub	sp, #16
 8002a96:	b480      	push	{r7}
 8002a98:	b083      	sub	sp, #12
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	6078      	str	r0, [r7, #4]
 8002a9e:	f107 0014 	add.w	r0, r7, #20
 8002aa2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8002ac6:	2300      	movs	r3, #0
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	370c      	adds	r7, #12
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bc80      	pop	{r7}
 8002ad0:	b004      	add	sp, #16
 8002ad2:	4770      	bx	lr

08002ad4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b09b      	sub	sp, #108	; 0x6c
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
 8002adc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8002ae4:	687a      	ldr	r2, [r7, #4]
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	781b      	ldrb	r3, [r3, #0]
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	4413      	add	r3, r2
 8002aee:	881b      	ldrh	r3, [r3, #0]
 8002af0:	b29b      	uxth	r3, r3
 8002af2:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8002af6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002afa:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	78db      	ldrb	r3, [r3, #3]
 8002b02:	2b03      	cmp	r3, #3
 8002b04:	d81f      	bhi.n	8002b46 <USB_ActivateEndpoint+0x72>
 8002b06:	a201      	add	r2, pc, #4	; (adr r2, 8002b0c <USB_ActivateEndpoint+0x38>)
 8002b08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b0c:	08002b1d 	.word	0x08002b1d
 8002b10:	08002b39 	.word	0x08002b39
 8002b14:	08002b4f 	.word	0x08002b4f
 8002b18:	08002b2b 	.word	0x08002b2b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8002b1c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002b20:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b24:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8002b28:	e012      	b.n	8002b50 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8002b2a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002b2e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8002b32:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8002b36:	e00b      	b.n	8002b50 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8002b38:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002b3c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b40:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8002b44:	e004      	b.n	8002b50 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8002b4c:	e000      	b.n	8002b50 <USB_ActivateEndpoint+0x7c>
      break;
 8002b4e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8002b50:	687a      	ldr	r2, [r7, #4]
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	781b      	ldrb	r3, [r3, #0]
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	441a      	add	r2, r3
 8002b5a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002b5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b6e:	b29b      	uxth	r3, r3
 8002b70:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8002b72:	687a      	ldr	r2, [r7, #4]
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	781b      	ldrb	r3, [r3, #0]
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	4413      	add	r3, r2
 8002b7c:	881b      	ldrh	r3, [r3, #0]
 8002b7e:	b29b      	uxth	r3, r3
 8002b80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b88:	b29a      	uxth	r2, r3
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	781b      	ldrb	r3, [r3, #0]
 8002b8e:	b29b      	uxth	r3, r3
 8002b90:	4313      	orrs	r3, r2
 8002b92:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8002b96:	687a      	ldr	r2, [r7, #4]
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	781b      	ldrb	r3, [r3, #0]
 8002b9c:	009b      	lsls	r3, r3, #2
 8002b9e:	441a      	add	r2, r3
 8002ba0:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8002ba4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ba8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002bac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bb4:	b29b      	uxth	r3, r3
 8002bb6:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	7b1b      	ldrb	r3, [r3, #12]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	f040 8149 	bne.w	8002e54 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	785b      	ldrb	r3, [r3, #1]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	f000 8084 	beq.w	8002cd4 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	617b      	str	r3, [r7, #20]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bd6:	b29b      	uxth	r3, r3
 8002bd8:	461a      	mov	r2, r3
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	4413      	add	r3, r2
 8002bde:	617b      	str	r3, [r7, #20]
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	781b      	ldrb	r3, [r3, #0]
 8002be4:	011a      	lsls	r2, r3, #4
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	4413      	add	r3, r2
 8002bea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002bee:	613b      	str	r3, [r7, #16]
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	88db      	ldrh	r3, [r3, #6]
 8002bf4:	085b      	lsrs	r3, r3, #1
 8002bf6:	b29b      	uxth	r3, r3
 8002bf8:	005b      	lsls	r3, r3, #1
 8002bfa:	b29a      	uxth	r2, r3
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002c00:	687a      	ldr	r2, [r7, #4]
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	781b      	ldrb	r3, [r3, #0]
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	4413      	add	r3, r2
 8002c0a:	881b      	ldrh	r3, [r3, #0]
 8002c0c:	81fb      	strh	r3, [r7, #14]
 8002c0e:	89fb      	ldrh	r3, [r7, #14]
 8002c10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d01b      	beq.n	8002c50 <USB_ActivateEndpoint+0x17c>
 8002c18:	687a      	ldr	r2, [r7, #4]
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	781b      	ldrb	r3, [r3, #0]
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	4413      	add	r3, r2
 8002c22:	881b      	ldrh	r3, [r3, #0]
 8002c24:	b29b      	uxth	r3, r3
 8002c26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c2e:	81bb      	strh	r3, [r7, #12]
 8002c30:	687a      	ldr	r2, [r7, #4]
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	781b      	ldrb	r3, [r3, #0]
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	441a      	add	r2, r3
 8002c3a:	89bb      	ldrh	r3, [r7, #12]
 8002c3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c48:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002c4c:	b29b      	uxth	r3, r3
 8002c4e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	78db      	ldrb	r3, [r3, #3]
 8002c54:	2b01      	cmp	r3, #1
 8002c56:	d020      	beq.n	8002c9a <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002c58:	687a      	ldr	r2, [r7, #4]
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	781b      	ldrb	r3, [r3, #0]
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	4413      	add	r3, r2
 8002c62:	881b      	ldrh	r3, [r3, #0]
 8002c64:	b29b      	uxth	r3, r3
 8002c66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c6e:	813b      	strh	r3, [r7, #8]
 8002c70:	893b      	ldrh	r3, [r7, #8]
 8002c72:	f083 0320 	eor.w	r3, r3, #32
 8002c76:	813b      	strh	r3, [r7, #8]
 8002c78:	687a      	ldr	r2, [r7, #4]
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	781b      	ldrb	r3, [r3, #0]
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	441a      	add	r2, r3
 8002c82:	893b      	ldrh	r3, [r7, #8]
 8002c84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c94:	b29b      	uxth	r3, r3
 8002c96:	8013      	strh	r3, [r2, #0]
 8002c98:	e27f      	b.n	800319a <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002c9a:	687a      	ldr	r2, [r7, #4]
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	781b      	ldrb	r3, [r3, #0]
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	4413      	add	r3, r2
 8002ca4:	881b      	ldrh	r3, [r3, #0]
 8002ca6:	b29b      	uxth	r3, r3
 8002ca8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002cac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002cb0:	817b      	strh	r3, [r7, #10]
 8002cb2:	687a      	ldr	r2, [r7, #4]
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	781b      	ldrb	r3, [r3, #0]
 8002cb8:	009b      	lsls	r3, r3, #2
 8002cba:	441a      	add	r2, r3
 8002cbc:	897b      	ldrh	r3, [r7, #10]
 8002cbe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002cc2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002cc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002cca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cce:	b29b      	uxth	r3, r3
 8002cd0:	8013      	strh	r3, [r2, #0]
 8002cd2:	e262      	b.n	800319a <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cde:	b29b      	uxth	r3, r3
 8002ce0:	461a      	mov	r2, r3
 8002ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ce4:	4413      	add	r3, r2
 8002ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	781b      	ldrb	r3, [r3, #0]
 8002cec:	011a      	lsls	r2, r3, #4
 8002cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cf0:	4413      	add	r3, r2
 8002cf2:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8002cf6:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	88db      	ldrh	r3, [r3, #6]
 8002cfc:	085b      	lsrs	r3, r3, #1
 8002cfe:	b29b      	uxth	r3, r3
 8002d00:	005b      	lsls	r3, r3, #1
 8002d02:	b29a      	uxth	r2, r3
 8002d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d06:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	627b      	str	r3, [r7, #36]	; 0x24
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d12:	b29b      	uxth	r3, r3
 8002d14:	461a      	mov	r2, r3
 8002d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d18:	4413      	add	r3, r2
 8002d1a:	627b      	str	r3, [r7, #36]	; 0x24
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	781b      	ldrb	r3, [r3, #0]
 8002d20:	011a      	lsls	r2, r3, #4
 8002d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d24:	4413      	add	r3, r2
 8002d26:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002d2a:	623b      	str	r3, [r7, #32]
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	691b      	ldr	r3, [r3, #16]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d112      	bne.n	8002d5a <USB_ActivateEndpoint+0x286>
 8002d34:	6a3b      	ldr	r3, [r7, #32]
 8002d36:	881b      	ldrh	r3, [r3, #0]
 8002d38:	b29b      	uxth	r3, r3
 8002d3a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002d3e:	b29a      	uxth	r2, r3
 8002d40:	6a3b      	ldr	r3, [r7, #32]
 8002d42:	801a      	strh	r2, [r3, #0]
 8002d44:	6a3b      	ldr	r3, [r7, #32]
 8002d46:	881b      	ldrh	r3, [r3, #0]
 8002d48:	b29b      	uxth	r3, r3
 8002d4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d52:	b29a      	uxth	r2, r3
 8002d54:	6a3b      	ldr	r3, [r7, #32]
 8002d56:	801a      	strh	r2, [r3, #0]
 8002d58:	e02f      	b.n	8002dba <USB_ActivateEndpoint+0x2e6>
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	691b      	ldr	r3, [r3, #16]
 8002d5e:	2b3e      	cmp	r3, #62	; 0x3e
 8002d60:	d813      	bhi.n	8002d8a <USB_ActivateEndpoint+0x2b6>
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	691b      	ldr	r3, [r3, #16]
 8002d66:	085b      	lsrs	r3, r3, #1
 8002d68:	663b      	str	r3, [r7, #96]	; 0x60
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	691b      	ldr	r3, [r3, #16]
 8002d6e:	f003 0301 	and.w	r3, r3, #1
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d002      	beq.n	8002d7c <USB_ActivateEndpoint+0x2a8>
 8002d76:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d78:	3301      	adds	r3, #1
 8002d7a:	663b      	str	r3, [r7, #96]	; 0x60
 8002d7c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d7e:	b29b      	uxth	r3, r3
 8002d80:	029b      	lsls	r3, r3, #10
 8002d82:	b29a      	uxth	r2, r3
 8002d84:	6a3b      	ldr	r3, [r7, #32]
 8002d86:	801a      	strh	r2, [r3, #0]
 8002d88:	e017      	b.n	8002dba <USB_ActivateEndpoint+0x2e6>
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	691b      	ldr	r3, [r3, #16]
 8002d8e:	095b      	lsrs	r3, r3, #5
 8002d90:	663b      	str	r3, [r7, #96]	; 0x60
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	691b      	ldr	r3, [r3, #16]
 8002d96:	f003 031f 	and.w	r3, r3, #31
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d102      	bne.n	8002da4 <USB_ActivateEndpoint+0x2d0>
 8002d9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002da0:	3b01      	subs	r3, #1
 8002da2:	663b      	str	r3, [r7, #96]	; 0x60
 8002da4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002da6:	b29b      	uxth	r3, r3
 8002da8:	029b      	lsls	r3, r3, #10
 8002daa:	b29b      	uxth	r3, r3
 8002dac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002db0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002db4:	b29a      	uxth	r2, r3
 8002db6:	6a3b      	ldr	r3, [r7, #32]
 8002db8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002dba:	687a      	ldr	r2, [r7, #4]
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	781b      	ldrb	r3, [r3, #0]
 8002dc0:	009b      	lsls	r3, r3, #2
 8002dc2:	4413      	add	r3, r2
 8002dc4:	881b      	ldrh	r3, [r3, #0]
 8002dc6:	83fb      	strh	r3, [r7, #30]
 8002dc8:	8bfb      	ldrh	r3, [r7, #30]
 8002dca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d01b      	beq.n	8002e0a <USB_ActivateEndpoint+0x336>
 8002dd2:	687a      	ldr	r2, [r7, #4]
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	781b      	ldrb	r3, [r3, #0]
 8002dd8:	009b      	lsls	r3, r3, #2
 8002dda:	4413      	add	r3, r2
 8002ddc:	881b      	ldrh	r3, [r3, #0]
 8002dde:	b29b      	uxth	r3, r3
 8002de0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002de4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002de8:	83bb      	strh	r3, [r7, #28]
 8002dea:	687a      	ldr	r2, [r7, #4]
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	781b      	ldrb	r3, [r3, #0]
 8002df0:	009b      	lsls	r3, r3, #2
 8002df2:	441a      	add	r2, r3
 8002df4:	8bbb      	ldrh	r3, [r7, #28]
 8002df6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002dfa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002dfe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e06:	b29b      	uxth	r3, r3
 8002e08:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	781b      	ldrb	r3, [r3, #0]
 8002e10:	009b      	lsls	r3, r3, #2
 8002e12:	4413      	add	r3, r2
 8002e14:	881b      	ldrh	r3, [r3, #0]
 8002e16:	b29b      	uxth	r3, r3
 8002e18:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002e1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e20:	837b      	strh	r3, [r7, #26]
 8002e22:	8b7b      	ldrh	r3, [r7, #26]
 8002e24:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002e28:	837b      	strh	r3, [r7, #26]
 8002e2a:	8b7b      	ldrh	r3, [r7, #26]
 8002e2c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002e30:	837b      	strh	r3, [r7, #26]
 8002e32:	687a      	ldr	r2, [r7, #4]
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	781b      	ldrb	r3, [r3, #0]
 8002e38:	009b      	lsls	r3, r3, #2
 8002e3a:	441a      	add	r2, r3
 8002e3c:	8b7b      	ldrh	r3, [r7, #26]
 8002e3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e4e:	b29b      	uxth	r3, r3
 8002e50:	8013      	strh	r3, [r2, #0]
 8002e52:	e1a2      	b.n	800319a <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8002e54:	687a      	ldr	r2, [r7, #4]
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	781b      	ldrb	r3, [r3, #0]
 8002e5a:	009b      	lsls	r3, r3, #2
 8002e5c:	4413      	add	r3, r2
 8002e5e:	881b      	ldrh	r3, [r3, #0]
 8002e60:	b29b      	uxth	r3, r3
 8002e62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e6a:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8002e6e:	687a      	ldr	r2, [r7, #4]
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	781b      	ldrb	r3, [r3, #0]
 8002e74:	009b      	lsls	r3, r3, #2
 8002e76:	441a      	add	r2, r3
 8002e78:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8002e7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e84:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8002e88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e8c:	b29b      	uxth	r3, r3
 8002e8e:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	65bb      	str	r3, [r7, #88]	; 0x58
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e9a:	b29b      	uxth	r3, r3
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ea0:	4413      	add	r3, r2
 8002ea2:	65bb      	str	r3, [r7, #88]	; 0x58
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	011a      	lsls	r2, r3, #4
 8002eaa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002eac:	4413      	add	r3, r2
 8002eae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002eb2:	657b      	str	r3, [r7, #84]	; 0x54
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	891b      	ldrh	r3, [r3, #8]
 8002eb8:	085b      	lsrs	r3, r3, #1
 8002eba:	b29b      	uxth	r3, r3
 8002ebc:	005b      	lsls	r3, r3, #1
 8002ebe:	b29a      	uxth	r2, r3
 8002ec0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ec2:	801a      	strh	r2, [r3, #0]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	653b      	str	r3, [r7, #80]	; 0x50
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ece:	b29b      	uxth	r3, r3
 8002ed0:	461a      	mov	r2, r3
 8002ed2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ed4:	4413      	add	r3, r2
 8002ed6:	653b      	str	r3, [r7, #80]	; 0x50
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	781b      	ldrb	r3, [r3, #0]
 8002edc:	011a      	lsls	r2, r3, #4
 8002ede:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ee0:	4413      	add	r3, r2
 8002ee2:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8002ee6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	895b      	ldrh	r3, [r3, #10]
 8002eec:	085b      	lsrs	r3, r3, #1
 8002eee:	b29b      	uxth	r3, r3
 8002ef0:	005b      	lsls	r3, r3, #1
 8002ef2:	b29a      	uxth	r2, r3
 8002ef4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ef6:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	785b      	ldrb	r3, [r3, #1]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	f040 8091 	bne.w	8003024 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002f02:	687a      	ldr	r2, [r7, #4]
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	781b      	ldrb	r3, [r3, #0]
 8002f08:	009b      	lsls	r3, r3, #2
 8002f0a:	4413      	add	r3, r2
 8002f0c:	881b      	ldrh	r3, [r3, #0]
 8002f0e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8002f10:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8002f12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d01b      	beq.n	8002f52 <USB_ActivateEndpoint+0x47e>
 8002f1a:	687a      	ldr	r2, [r7, #4]
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	781b      	ldrb	r3, [r3, #0]
 8002f20:	009b      	lsls	r3, r3, #2
 8002f22:	4413      	add	r3, r2
 8002f24:	881b      	ldrh	r3, [r3, #0]
 8002f26:	b29b      	uxth	r3, r3
 8002f28:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f30:	877b      	strh	r3, [r7, #58]	; 0x3a
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	781b      	ldrb	r3, [r3, #0]
 8002f38:	009b      	lsls	r3, r3, #2
 8002f3a:	441a      	add	r2, r3
 8002f3c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8002f3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f46:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f4e:	b29b      	uxth	r3, r3
 8002f50:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002f52:	687a      	ldr	r2, [r7, #4]
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	781b      	ldrb	r3, [r3, #0]
 8002f58:	009b      	lsls	r3, r3, #2
 8002f5a:	4413      	add	r3, r2
 8002f5c:	881b      	ldrh	r3, [r3, #0]
 8002f5e:	873b      	strh	r3, [r7, #56]	; 0x38
 8002f60:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002f62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d01b      	beq.n	8002fa2 <USB_ActivateEndpoint+0x4ce>
 8002f6a:	687a      	ldr	r2, [r7, #4]
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	781b      	ldrb	r3, [r3, #0]
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	4413      	add	r3, r2
 8002f74:	881b      	ldrh	r3, [r3, #0]
 8002f76:	b29b      	uxth	r3, r3
 8002f78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f80:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002f82:	687a      	ldr	r2, [r7, #4]
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	781b      	ldrb	r3, [r3, #0]
 8002f88:	009b      	lsls	r3, r3, #2
 8002f8a:	441a      	add	r2, r3
 8002f8c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002f8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f9a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002f9e:	b29b      	uxth	r3, r3
 8002fa0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	781b      	ldrb	r3, [r3, #0]
 8002fa8:	009b      	lsls	r3, r3, #2
 8002faa:	4413      	add	r3, r2
 8002fac:	881b      	ldrh	r3, [r3, #0]
 8002fae:	b29b      	uxth	r3, r3
 8002fb0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002fb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fb8:	86bb      	strh	r3, [r7, #52]	; 0x34
 8002fba:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8002fbc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002fc0:	86bb      	strh	r3, [r7, #52]	; 0x34
 8002fc2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8002fc4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002fc8:	86bb      	strh	r3, [r7, #52]	; 0x34
 8002fca:	687a      	ldr	r2, [r7, #4]
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	781b      	ldrb	r3, [r3, #0]
 8002fd0:	009b      	lsls	r3, r3, #2
 8002fd2:	441a      	add	r2, r3
 8002fd4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8002fd6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002fda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002fde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fe2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fe6:	b29b      	uxth	r3, r3
 8002fe8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002fea:	687a      	ldr	r2, [r7, #4]
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	781b      	ldrb	r3, [r3, #0]
 8002ff0:	009b      	lsls	r3, r3, #2
 8002ff2:	4413      	add	r3, r2
 8002ff4:	881b      	ldrh	r3, [r3, #0]
 8002ff6:	b29b      	uxth	r3, r3
 8002ff8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ffc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003000:	867b      	strh	r3, [r7, #50]	; 0x32
 8003002:	687a      	ldr	r2, [r7, #4]
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	781b      	ldrb	r3, [r3, #0]
 8003008:	009b      	lsls	r3, r3, #2
 800300a:	441a      	add	r2, r3
 800300c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800300e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003012:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003016:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800301a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800301e:	b29b      	uxth	r3, r3
 8003020:	8013      	strh	r3, [r2, #0]
 8003022:	e0ba      	b.n	800319a <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003024:	687a      	ldr	r2, [r7, #4]
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	781b      	ldrb	r3, [r3, #0]
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	4413      	add	r3, r2
 800302e:	881b      	ldrh	r3, [r3, #0]
 8003030:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8003034:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003038:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800303c:	2b00      	cmp	r3, #0
 800303e:	d01d      	beq.n	800307c <USB_ActivateEndpoint+0x5a8>
 8003040:	687a      	ldr	r2, [r7, #4]
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	781b      	ldrb	r3, [r3, #0]
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	4413      	add	r3, r2
 800304a:	881b      	ldrh	r3, [r3, #0]
 800304c:	b29b      	uxth	r3, r3
 800304e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003052:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003056:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800305a:	687a      	ldr	r2, [r7, #4]
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	781b      	ldrb	r3, [r3, #0]
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	441a      	add	r2, r3
 8003064:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003068:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800306c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003070:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003074:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003078:	b29b      	uxth	r3, r3
 800307a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800307c:	687a      	ldr	r2, [r7, #4]
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	781b      	ldrb	r3, [r3, #0]
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	4413      	add	r3, r2
 8003086:	881b      	ldrh	r3, [r3, #0]
 8003088:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800308c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003090:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003094:	2b00      	cmp	r3, #0
 8003096:	d01d      	beq.n	80030d4 <USB_ActivateEndpoint+0x600>
 8003098:	687a      	ldr	r2, [r7, #4]
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	781b      	ldrb	r3, [r3, #0]
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	4413      	add	r3, r2
 80030a2:	881b      	ldrh	r3, [r3, #0]
 80030a4:	b29b      	uxth	r3, r3
 80030a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030ae:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	781b      	ldrb	r3, [r3, #0]
 80030b8:	009b      	lsls	r3, r3, #2
 80030ba:	441a      	add	r2, r3
 80030bc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80030c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80030c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80030c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030cc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80030d0:	b29b      	uxth	r3, r3
 80030d2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	78db      	ldrb	r3, [r3, #3]
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d024      	beq.n	8003126 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80030dc:	687a      	ldr	r2, [r7, #4]
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	781b      	ldrb	r3, [r3, #0]
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	4413      	add	r3, r2
 80030e6:	881b      	ldrh	r3, [r3, #0]
 80030e8:	b29b      	uxth	r3, r3
 80030ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80030f2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80030f6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80030fa:	f083 0320 	eor.w	r3, r3, #32
 80030fe:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	781b      	ldrb	r3, [r3, #0]
 8003108:	009b      	lsls	r3, r3, #2
 800310a:	441a      	add	r2, r3
 800310c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003110:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003114:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003118:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800311c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003120:	b29b      	uxth	r3, r3
 8003122:	8013      	strh	r3, [r2, #0]
 8003124:	e01d      	b.n	8003162 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003126:	687a      	ldr	r2, [r7, #4]
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	781b      	ldrb	r3, [r3, #0]
 800312c:	009b      	lsls	r3, r3, #2
 800312e:	4413      	add	r3, r2
 8003130:	881b      	ldrh	r3, [r3, #0]
 8003132:	b29b      	uxth	r3, r3
 8003134:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003138:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800313c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8003140:	687a      	ldr	r2, [r7, #4]
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	781b      	ldrb	r3, [r3, #0]
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	441a      	add	r2, r3
 800314a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800314e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003152:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003156:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800315a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800315e:	b29b      	uxth	r3, r3
 8003160:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003162:	687a      	ldr	r2, [r7, #4]
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	781b      	ldrb	r3, [r3, #0]
 8003168:	009b      	lsls	r3, r3, #2
 800316a:	4413      	add	r3, r2
 800316c:	881b      	ldrh	r3, [r3, #0]
 800316e:	b29b      	uxth	r3, r3
 8003170:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003174:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003178:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800317a:	687a      	ldr	r2, [r7, #4]
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	781b      	ldrb	r3, [r3, #0]
 8003180:	009b      	lsls	r3, r3, #2
 8003182:	441a      	add	r2, r3
 8003184:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003186:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800318a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800318e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003192:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003196:	b29b      	uxth	r3, r3
 8003198:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800319a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800319e:	4618      	mov	r0, r3
 80031a0:	376c      	adds	r7, #108	; 0x6c
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bc80      	pop	{r7}
 80031a6:	4770      	bx	lr

080031a8 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b08d      	sub	sp, #52	; 0x34
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
 80031b0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	7b1b      	ldrb	r3, [r3, #12]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	f040 808e 	bne.w	80032d8 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	785b      	ldrb	r3, [r3, #1]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d044      	beq.n	800324e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80031c4:	687a      	ldr	r2, [r7, #4]
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	781b      	ldrb	r3, [r3, #0]
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	4413      	add	r3, r2
 80031ce:	881b      	ldrh	r3, [r3, #0]
 80031d0:	81bb      	strh	r3, [r7, #12]
 80031d2:	89bb      	ldrh	r3, [r7, #12]
 80031d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d01b      	beq.n	8003214 <USB_DeactivateEndpoint+0x6c>
 80031dc:	687a      	ldr	r2, [r7, #4]
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	781b      	ldrb	r3, [r3, #0]
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	4413      	add	r3, r2
 80031e6:	881b      	ldrh	r3, [r3, #0]
 80031e8:	b29b      	uxth	r3, r3
 80031ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031f2:	817b      	strh	r3, [r7, #10]
 80031f4:	687a      	ldr	r2, [r7, #4]
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	781b      	ldrb	r3, [r3, #0]
 80031fa:	009b      	lsls	r3, r3, #2
 80031fc:	441a      	add	r2, r3
 80031fe:	897b      	ldrh	r3, [r7, #10]
 8003200:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003204:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003208:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800320c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003210:	b29b      	uxth	r3, r3
 8003212:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003214:	687a      	ldr	r2, [r7, #4]
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	781b      	ldrb	r3, [r3, #0]
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	4413      	add	r3, r2
 800321e:	881b      	ldrh	r3, [r3, #0]
 8003220:	b29b      	uxth	r3, r3
 8003222:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003226:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800322a:	813b      	strh	r3, [r7, #8]
 800322c:	687a      	ldr	r2, [r7, #4]
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	781b      	ldrb	r3, [r3, #0]
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	441a      	add	r2, r3
 8003236:	893b      	ldrh	r3, [r7, #8]
 8003238:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800323c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003240:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003244:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003248:	b29b      	uxth	r3, r3
 800324a:	8013      	strh	r3, [r2, #0]
 800324c:	e192      	b.n	8003574 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800324e:	687a      	ldr	r2, [r7, #4]
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	781b      	ldrb	r3, [r3, #0]
 8003254:	009b      	lsls	r3, r3, #2
 8003256:	4413      	add	r3, r2
 8003258:	881b      	ldrh	r3, [r3, #0]
 800325a:	827b      	strh	r3, [r7, #18]
 800325c:	8a7b      	ldrh	r3, [r7, #18]
 800325e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003262:	2b00      	cmp	r3, #0
 8003264:	d01b      	beq.n	800329e <USB_DeactivateEndpoint+0xf6>
 8003266:	687a      	ldr	r2, [r7, #4]
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	781b      	ldrb	r3, [r3, #0]
 800326c:	009b      	lsls	r3, r3, #2
 800326e:	4413      	add	r3, r2
 8003270:	881b      	ldrh	r3, [r3, #0]
 8003272:	b29b      	uxth	r3, r3
 8003274:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003278:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800327c:	823b      	strh	r3, [r7, #16]
 800327e:	687a      	ldr	r2, [r7, #4]
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	781b      	ldrb	r3, [r3, #0]
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	441a      	add	r2, r3
 8003288:	8a3b      	ldrh	r3, [r7, #16]
 800328a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800328e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003292:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003296:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800329a:	b29b      	uxth	r3, r3
 800329c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800329e:	687a      	ldr	r2, [r7, #4]
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	781b      	ldrb	r3, [r3, #0]
 80032a4:	009b      	lsls	r3, r3, #2
 80032a6:	4413      	add	r3, r2
 80032a8:	881b      	ldrh	r3, [r3, #0]
 80032aa:	b29b      	uxth	r3, r3
 80032ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80032b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032b4:	81fb      	strh	r3, [r7, #14]
 80032b6:	687a      	ldr	r2, [r7, #4]
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	781b      	ldrb	r3, [r3, #0]
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	441a      	add	r2, r3
 80032c0:	89fb      	ldrh	r3, [r7, #14]
 80032c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80032c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80032ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032d2:	b29b      	uxth	r3, r3
 80032d4:	8013      	strh	r3, [r2, #0]
 80032d6:	e14d      	b.n	8003574 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	785b      	ldrb	r3, [r3, #1]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	f040 80a5 	bne.w	800342c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	781b      	ldrb	r3, [r3, #0]
 80032e8:	009b      	lsls	r3, r3, #2
 80032ea:	4413      	add	r3, r2
 80032ec:	881b      	ldrh	r3, [r3, #0]
 80032ee:	843b      	strh	r3, [r7, #32]
 80032f0:	8c3b      	ldrh	r3, [r7, #32]
 80032f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d01b      	beq.n	8003332 <USB_DeactivateEndpoint+0x18a>
 80032fa:	687a      	ldr	r2, [r7, #4]
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	781b      	ldrb	r3, [r3, #0]
 8003300:	009b      	lsls	r3, r3, #2
 8003302:	4413      	add	r3, r2
 8003304:	881b      	ldrh	r3, [r3, #0]
 8003306:	b29b      	uxth	r3, r3
 8003308:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800330c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003310:	83fb      	strh	r3, [r7, #30]
 8003312:	687a      	ldr	r2, [r7, #4]
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	781b      	ldrb	r3, [r3, #0]
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	441a      	add	r2, r3
 800331c:	8bfb      	ldrh	r3, [r7, #30]
 800331e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003322:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003326:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800332a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800332e:	b29b      	uxth	r3, r3
 8003330:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003332:	687a      	ldr	r2, [r7, #4]
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	781b      	ldrb	r3, [r3, #0]
 8003338:	009b      	lsls	r3, r3, #2
 800333a:	4413      	add	r3, r2
 800333c:	881b      	ldrh	r3, [r3, #0]
 800333e:	83bb      	strh	r3, [r7, #28]
 8003340:	8bbb      	ldrh	r3, [r7, #28]
 8003342:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003346:	2b00      	cmp	r3, #0
 8003348:	d01b      	beq.n	8003382 <USB_DeactivateEndpoint+0x1da>
 800334a:	687a      	ldr	r2, [r7, #4]
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	781b      	ldrb	r3, [r3, #0]
 8003350:	009b      	lsls	r3, r3, #2
 8003352:	4413      	add	r3, r2
 8003354:	881b      	ldrh	r3, [r3, #0]
 8003356:	b29b      	uxth	r3, r3
 8003358:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800335c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003360:	837b      	strh	r3, [r7, #26]
 8003362:	687a      	ldr	r2, [r7, #4]
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	781b      	ldrb	r3, [r3, #0]
 8003368:	009b      	lsls	r3, r3, #2
 800336a:	441a      	add	r2, r3
 800336c:	8b7b      	ldrh	r3, [r7, #26]
 800336e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003372:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003376:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800337a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800337e:	b29b      	uxth	r3, r3
 8003380:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8003382:	687a      	ldr	r2, [r7, #4]
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	781b      	ldrb	r3, [r3, #0]
 8003388:	009b      	lsls	r3, r3, #2
 800338a:	4413      	add	r3, r2
 800338c:	881b      	ldrh	r3, [r3, #0]
 800338e:	b29b      	uxth	r3, r3
 8003390:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003394:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003398:	833b      	strh	r3, [r7, #24]
 800339a:	687a      	ldr	r2, [r7, #4]
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	781b      	ldrb	r3, [r3, #0]
 80033a0:	009b      	lsls	r3, r3, #2
 80033a2:	441a      	add	r2, r3
 80033a4:	8b3b      	ldrh	r3, [r7, #24]
 80033a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80033aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80033ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033b2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80033b6:	b29b      	uxth	r3, r3
 80033b8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80033ba:	687a      	ldr	r2, [r7, #4]
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	781b      	ldrb	r3, [r3, #0]
 80033c0:	009b      	lsls	r3, r3, #2
 80033c2:	4413      	add	r3, r2
 80033c4:	881b      	ldrh	r3, [r3, #0]
 80033c6:	b29b      	uxth	r3, r3
 80033c8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80033cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033d0:	82fb      	strh	r3, [r7, #22]
 80033d2:	687a      	ldr	r2, [r7, #4]
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	781b      	ldrb	r3, [r3, #0]
 80033d8:	009b      	lsls	r3, r3, #2
 80033da:	441a      	add	r2, r3
 80033dc:	8afb      	ldrh	r3, [r7, #22]
 80033de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80033e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80033e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033ee:	b29b      	uxth	r3, r3
 80033f0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80033f2:	687a      	ldr	r2, [r7, #4]
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	781b      	ldrb	r3, [r3, #0]
 80033f8:	009b      	lsls	r3, r3, #2
 80033fa:	4413      	add	r3, r2
 80033fc:	881b      	ldrh	r3, [r3, #0]
 80033fe:	b29b      	uxth	r3, r3
 8003400:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003404:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003408:	82bb      	strh	r3, [r7, #20]
 800340a:	687a      	ldr	r2, [r7, #4]
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	781b      	ldrb	r3, [r3, #0]
 8003410:	009b      	lsls	r3, r3, #2
 8003412:	441a      	add	r2, r3
 8003414:	8abb      	ldrh	r3, [r7, #20]
 8003416:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800341a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800341e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003422:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003426:	b29b      	uxth	r3, r3
 8003428:	8013      	strh	r3, [r2, #0]
 800342a:	e0a3      	b.n	8003574 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800342c:	687a      	ldr	r2, [r7, #4]
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	781b      	ldrb	r3, [r3, #0]
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	4413      	add	r3, r2
 8003436:	881b      	ldrh	r3, [r3, #0]
 8003438:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800343a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800343c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003440:	2b00      	cmp	r3, #0
 8003442:	d01b      	beq.n	800347c <USB_DeactivateEndpoint+0x2d4>
 8003444:	687a      	ldr	r2, [r7, #4]
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	781b      	ldrb	r3, [r3, #0]
 800344a:	009b      	lsls	r3, r3, #2
 800344c:	4413      	add	r3, r2
 800344e:	881b      	ldrh	r3, [r3, #0]
 8003450:	b29b      	uxth	r3, r3
 8003452:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003456:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800345a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800345c:	687a      	ldr	r2, [r7, #4]
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	781b      	ldrb	r3, [r3, #0]
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	441a      	add	r2, r3
 8003466:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003468:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800346c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003470:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003474:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003478:	b29b      	uxth	r3, r3
 800347a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800347c:	687a      	ldr	r2, [r7, #4]
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	781b      	ldrb	r3, [r3, #0]
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	4413      	add	r3, r2
 8003486:	881b      	ldrh	r3, [r3, #0]
 8003488:	857b      	strh	r3, [r7, #42]	; 0x2a
 800348a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800348c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003490:	2b00      	cmp	r3, #0
 8003492:	d01b      	beq.n	80034cc <USB_DeactivateEndpoint+0x324>
 8003494:	687a      	ldr	r2, [r7, #4]
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	781b      	ldrb	r3, [r3, #0]
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	4413      	add	r3, r2
 800349e:	881b      	ldrh	r3, [r3, #0]
 80034a0:	b29b      	uxth	r3, r3
 80034a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034aa:	853b      	strh	r3, [r7, #40]	; 0x28
 80034ac:	687a      	ldr	r2, [r7, #4]
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	781b      	ldrb	r3, [r3, #0]
 80034b2:	009b      	lsls	r3, r3, #2
 80034b4:	441a      	add	r2, r3
 80034b6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80034b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80034bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80034c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034c4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80034c8:	b29b      	uxth	r3, r3
 80034ca:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80034cc:	687a      	ldr	r2, [r7, #4]
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	781b      	ldrb	r3, [r3, #0]
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	4413      	add	r3, r2
 80034d6:	881b      	ldrh	r3, [r3, #0]
 80034d8:	b29b      	uxth	r3, r3
 80034da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034e2:	84fb      	strh	r3, [r7, #38]	; 0x26
 80034e4:	687a      	ldr	r2, [r7, #4]
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	781b      	ldrb	r3, [r3, #0]
 80034ea:	009b      	lsls	r3, r3, #2
 80034ec:	441a      	add	r2, r3
 80034ee:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80034f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80034f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80034f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80034fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003500:	b29b      	uxth	r3, r3
 8003502:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003504:	687a      	ldr	r2, [r7, #4]
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	781b      	ldrb	r3, [r3, #0]
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	4413      	add	r3, r2
 800350e:	881b      	ldrh	r3, [r3, #0]
 8003510:	b29b      	uxth	r3, r3
 8003512:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003516:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800351a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800351c:	687a      	ldr	r2, [r7, #4]
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	781b      	ldrb	r3, [r3, #0]
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	441a      	add	r2, r3
 8003526:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003528:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800352c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003530:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003534:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003538:	b29b      	uxth	r3, r3
 800353a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800353c:	687a      	ldr	r2, [r7, #4]
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	781b      	ldrb	r3, [r3, #0]
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	4413      	add	r3, r2
 8003546:	881b      	ldrh	r3, [r3, #0]
 8003548:	b29b      	uxth	r3, r3
 800354a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800354e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003552:	847b      	strh	r3, [r7, #34]	; 0x22
 8003554:	687a      	ldr	r2, [r7, #4]
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	781b      	ldrb	r3, [r3, #0]
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	441a      	add	r2, r3
 800355e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003560:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003564:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003568:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800356c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003570:	b29b      	uxth	r3, r3
 8003572:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8003574:	2300      	movs	r3, #0
}
 8003576:	4618      	mov	r0, r3
 8003578:	3734      	adds	r7, #52	; 0x34
 800357a:	46bd      	mov	sp, r7
 800357c:	bc80      	pop	{r7}
 800357e:	4770      	bx	lr

08003580 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b0cc      	sub	sp, #304	; 0x130
 8003584:	af00      	add	r7, sp, #0
 8003586:	1d3b      	adds	r3, r7, #4
 8003588:	6018      	str	r0, [r3, #0]
 800358a:	463b      	mov	r3, r7
 800358c:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800358e:	463b      	mov	r3, r7
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	785b      	ldrb	r3, [r3, #1]
 8003594:	2b01      	cmp	r3, #1
 8003596:	f040 872e 	bne.w	80043f6 <USB_EPStartXfer+0xe76>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800359a:	463b      	mov	r3, r7
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	699a      	ldr	r2, [r3, #24]
 80035a0:	463b      	mov	r3, r7
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	691b      	ldr	r3, [r3, #16]
 80035a6:	429a      	cmp	r2, r3
 80035a8:	d905      	bls.n	80035b6 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 80035aa:	463b      	mov	r3, r7
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	691b      	ldr	r3, [r3, #16]
 80035b0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80035b4:	e004      	b.n	80035c0 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 80035b6:	463b      	mov	r3, r7
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	699b      	ldr	r3, [r3, #24]
 80035bc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80035c0:	463b      	mov	r3, r7
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	7b1b      	ldrb	r3, [r3, #12]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d134      	bne.n	8003634 <USB_EPStartXfer+0xb4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80035ca:	463b      	mov	r3, r7
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	6959      	ldr	r1, [r3, #20]
 80035d0:	463b      	mov	r3, r7
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	88da      	ldrh	r2, [r3, #6]
 80035d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80035da:	b29b      	uxth	r3, r3
 80035dc:	1d38      	adds	r0, r7, #4
 80035de:	6800      	ldr	r0, [r0, #0]
 80035e0:	f001 fc03 	bl	8004dea <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80035e4:	f107 0310 	add.w	r3, r7, #16
 80035e8:	1d3a      	adds	r2, r7, #4
 80035ea:	6812      	ldr	r2, [r2, #0]
 80035ec:	601a      	str	r2, [r3, #0]
 80035ee:	1d3b      	adds	r3, r7, #4
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80035f6:	b29b      	uxth	r3, r3
 80035f8:	4619      	mov	r1, r3
 80035fa:	f107 0310 	add.w	r3, r7, #16
 80035fe:	f107 0210 	add.w	r2, r7, #16
 8003602:	6812      	ldr	r2, [r2, #0]
 8003604:	440a      	add	r2, r1
 8003606:	601a      	str	r2, [r3, #0]
 8003608:	463b      	mov	r3, r7
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	781b      	ldrb	r3, [r3, #0]
 800360e:	011a      	lsls	r2, r3, #4
 8003610:	f107 0310 	add.w	r3, r7, #16
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4413      	add	r3, r2
 8003618:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800361c:	f107 030c 	add.w	r3, r7, #12
 8003620:	601a      	str	r2, [r3, #0]
 8003622:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003626:	b29a      	uxth	r2, r3
 8003628:	f107 030c 	add.w	r3, r7, #12
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	801a      	strh	r2, [r3, #0]
 8003630:	f000 beac 	b.w	800438c <USB_EPStartXfer+0xe0c>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8003634:	463b      	mov	r3, r7
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	78db      	ldrb	r3, [r3, #3]
 800363a:	2b02      	cmp	r3, #2
 800363c:	f040 838c 	bne.w	8003d58 <USB_EPStartXfer+0x7d8>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8003640:	463b      	mov	r3, r7
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	6a1a      	ldr	r2, [r3, #32]
 8003646:	463b      	mov	r3, r7
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	691b      	ldr	r3, [r3, #16]
 800364c:	429a      	cmp	r2, r3
 800364e:	f240 8330 	bls.w	8003cb2 <USB_EPStartXfer+0x732>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8003652:	1d3b      	adds	r3, r7, #4
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	463b      	mov	r3, r7
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	781b      	ldrb	r3, [r3, #0]
 800365c:	009b      	lsls	r3, r3, #2
 800365e:	4413      	add	r3, r2
 8003660:	881b      	ldrh	r3, [r3, #0]
 8003662:	b29b      	uxth	r3, r3
 8003664:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003668:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800366c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8003670:	1d3b      	adds	r3, r7, #4
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	463b      	mov	r3, r7
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	781b      	ldrb	r3, [r3, #0]
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	441a      	add	r2, r3
 800367e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003682:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003686:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800368a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800368e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003692:	b29b      	uxth	r3, r3
 8003694:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8003696:	463b      	mov	r3, r7
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	6a1a      	ldr	r2, [r3, #32]
 800369c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80036a0:	1ad2      	subs	r2, r2, r3
 80036a2:	463b      	mov	r3, r7
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80036a8:	1d3b      	adds	r3, r7, #4
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	463b      	mov	r3, r7
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	781b      	ldrb	r3, [r3, #0]
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	4413      	add	r3, r2
 80036b6:	881b      	ldrh	r3, [r3, #0]
 80036b8:	b29b      	uxth	r3, r3
 80036ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036be:	2b00      	cmp	r3, #0
 80036c0:	f000 819e 	beq.w	8003a00 <USB_EPStartXfer+0x480>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80036c4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80036c8:	1d3a      	adds	r2, r7, #4
 80036ca:	6812      	ldr	r2, [r2, #0]
 80036cc:	601a      	str	r2, [r3, #0]
 80036ce:	463b      	mov	r3, r7
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	785b      	ldrb	r3, [r3, #1]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d17a      	bne.n	80037ce <USB_EPStartXfer+0x24e>
 80036d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80036dc:	1d3a      	adds	r2, r7, #4
 80036de:	6812      	ldr	r2, [r2, #0]
 80036e0:	601a      	str	r2, [r3, #0]
 80036e2:	1d3b      	adds	r3, r7, #4
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80036ea:	b29b      	uxth	r3, r3
 80036ec:	4619      	mov	r1, r3
 80036ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80036f2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80036f6:	6812      	ldr	r2, [r2, #0]
 80036f8:	440a      	add	r2, r1
 80036fa:	601a      	str	r2, [r3, #0]
 80036fc:	463b      	mov	r3, r7
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	781b      	ldrb	r3, [r3, #0]
 8003702:	011a      	lsls	r2, r3, #4
 8003704:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4413      	add	r3, r2
 800370c:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8003710:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003714:	601a      	str	r2, [r3, #0]
 8003716:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800371a:	2b00      	cmp	r3, #0
 800371c:	d11a      	bne.n	8003754 <USB_EPStartXfer+0x1d4>
 800371e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	881b      	ldrh	r3, [r3, #0]
 8003726:	b29b      	uxth	r3, r3
 8003728:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800372c:	b29a      	uxth	r2, r3
 800372e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	801a      	strh	r2, [r3, #0]
 8003736:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	881b      	ldrh	r3, [r3, #0]
 800373e:	b29b      	uxth	r3, r3
 8003740:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003744:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003748:	b29a      	uxth	r2, r3
 800374a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	801a      	strh	r2, [r3, #0]
 8003752:	e062      	b.n	800381a <USB_EPStartXfer+0x29a>
 8003754:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003758:	2b3e      	cmp	r3, #62	; 0x3e
 800375a:	d819      	bhi.n	8003790 <USB_EPStartXfer+0x210>
 800375c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003760:	085b      	lsrs	r3, r3, #1
 8003762:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8003766:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800376a:	f003 0301 	and.w	r3, r3, #1
 800376e:	2b00      	cmp	r3, #0
 8003770:	d004      	beq.n	800377c <USB_EPStartXfer+0x1fc>
 8003772:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003776:	3301      	adds	r3, #1
 8003778:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800377c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003780:	b29b      	uxth	r3, r3
 8003782:	029b      	lsls	r3, r3, #10
 8003784:	b29a      	uxth	r2, r3
 8003786:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	801a      	strh	r2, [r3, #0]
 800378e:	e044      	b.n	800381a <USB_EPStartXfer+0x29a>
 8003790:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003794:	095b      	lsrs	r3, r3, #5
 8003796:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800379a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800379e:	f003 031f 	and.w	r3, r3, #31
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d104      	bne.n	80037b0 <USB_EPStartXfer+0x230>
 80037a6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80037aa:	3b01      	subs	r3, #1
 80037ac:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80037b0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80037b4:	b29b      	uxth	r3, r3
 80037b6:	029b      	lsls	r3, r3, #10
 80037b8:	b29b      	uxth	r3, r3
 80037ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80037be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80037c2:	b29a      	uxth	r2, r3
 80037c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	801a      	strh	r2, [r3, #0]
 80037cc:	e025      	b.n	800381a <USB_EPStartXfer+0x29a>
 80037ce:	463b      	mov	r3, r7
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	785b      	ldrb	r3, [r3, #1]
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	d120      	bne.n	800381a <USB_EPStartXfer+0x29a>
 80037d8:	1d3b      	adds	r3, r7, #4
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80037e0:	b29b      	uxth	r3, r3
 80037e2:	4619      	mov	r1, r3
 80037e4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80037e8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80037ec:	6812      	ldr	r2, [r2, #0]
 80037ee:	440a      	add	r2, r1
 80037f0:	601a      	str	r2, [r3, #0]
 80037f2:	463b      	mov	r3, r7
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	781b      	ldrb	r3, [r3, #0]
 80037f8:	011a      	lsls	r2, r3, #4
 80037fa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4413      	add	r3, r2
 8003802:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8003806:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800380a:	601a      	str	r2, [r3, #0]
 800380c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003810:	b29a      	uxth	r2, r3
 8003812:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800381a:	463b      	mov	r3, r7
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	895b      	ldrh	r3, [r3, #10]
 8003820:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003824:	463b      	mov	r3, r7
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	6959      	ldr	r1, [r3, #20]
 800382a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800382e:	b29b      	uxth	r3, r3
 8003830:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8003834:	1d38      	adds	r0, r7, #4
 8003836:	6800      	ldr	r0, [r0, #0]
 8003838:	f001 fad7 	bl	8004dea <USB_WritePMA>
            ep->xfer_buff += len;
 800383c:	463b      	mov	r3, r7
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	695a      	ldr	r2, [r3, #20]
 8003842:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003846:	441a      	add	r2, r3
 8003848:	463b      	mov	r3, r7
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800384e:	463b      	mov	r3, r7
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	6a1a      	ldr	r2, [r3, #32]
 8003854:	463b      	mov	r3, r7
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	691b      	ldr	r3, [r3, #16]
 800385a:	429a      	cmp	r2, r3
 800385c:	d909      	bls.n	8003872 <USB_EPStartXfer+0x2f2>
            {
              ep->xfer_len_db -= len;
 800385e:	463b      	mov	r3, r7
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	6a1a      	ldr	r2, [r3, #32]
 8003864:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003868:	1ad2      	subs	r2, r2, r3
 800386a:	463b      	mov	r3, r7
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	621a      	str	r2, [r3, #32]
 8003870:	e008      	b.n	8003884 <USB_EPStartXfer+0x304>
            }
            else
            {
              len = ep->xfer_len_db;
 8003872:	463b      	mov	r3, r7
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	6a1b      	ldr	r3, [r3, #32]
 8003878:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 800387c:	463b      	mov	r3, r7
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	2200      	movs	r2, #0
 8003882:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003884:	463b      	mov	r3, r7
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	785b      	ldrb	r3, [r3, #1]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d17a      	bne.n	8003984 <USB_EPStartXfer+0x404>
 800388e:	f107 0318 	add.w	r3, r7, #24
 8003892:	1d3a      	adds	r2, r7, #4
 8003894:	6812      	ldr	r2, [r2, #0]
 8003896:	601a      	str	r2, [r3, #0]
 8003898:	1d3b      	adds	r3, r7, #4
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80038a0:	b29b      	uxth	r3, r3
 80038a2:	4619      	mov	r1, r3
 80038a4:	f107 0318 	add.w	r3, r7, #24
 80038a8:	f107 0218 	add.w	r2, r7, #24
 80038ac:	6812      	ldr	r2, [r2, #0]
 80038ae:	440a      	add	r2, r1
 80038b0:	601a      	str	r2, [r3, #0]
 80038b2:	463b      	mov	r3, r7
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	781b      	ldrb	r3, [r3, #0]
 80038b8:	011a      	lsls	r2, r3, #4
 80038ba:	f107 0318 	add.w	r3, r7, #24
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4413      	add	r3, r2
 80038c2:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80038c6:	f107 0314 	add.w	r3, r7, #20
 80038ca:	601a      	str	r2, [r3, #0]
 80038cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d11a      	bne.n	800390a <USB_EPStartXfer+0x38a>
 80038d4:	f107 0314 	add.w	r3, r7, #20
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	881b      	ldrh	r3, [r3, #0]
 80038dc:	b29b      	uxth	r3, r3
 80038de:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80038e2:	b29a      	uxth	r2, r3
 80038e4:	f107 0314 	add.w	r3, r7, #20
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	801a      	strh	r2, [r3, #0]
 80038ec:	f107 0314 	add.w	r3, r7, #20
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	881b      	ldrh	r3, [r3, #0]
 80038f4:	b29b      	uxth	r3, r3
 80038f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80038fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80038fe:	b29a      	uxth	r2, r3
 8003900:	f107 0314 	add.w	r3, r7, #20
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	801a      	strh	r2, [r3, #0]
 8003908:	e067      	b.n	80039da <USB_EPStartXfer+0x45a>
 800390a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800390e:	2b3e      	cmp	r3, #62	; 0x3e
 8003910:	d819      	bhi.n	8003946 <USB_EPStartXfer+0x3c6>
 8003912:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003916:	085b      	lsrs	r3, r3, #1
 8003918:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800391c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003920:	f003 0301 	and.w	r3, r3, #1
 8003924:	2b00      	cmp	r3, #0
 8003926:	d004      	beq.n	8003932 <USB_EPStartXfer+0x3b2>
 8003928:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800392c:	3301      	adds	r3, #1
 800392e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003932:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003936:	b29b      	uxth	r3, r3
 8003938:	029b      	lsls	r3, r3, #10
 800393a:	b29a      	uxth	r2, r3
 800393c:	f107 0314 	add.w	r3, r7, #20
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	801a      	strh	r2, [r3, #0]
 8003944:	e049      	b.n	80039da <USB_EPStartXfer+0x45a>
 8003946:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800394a:	095b      	lsrs	r3, r3, #5
 800394c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003950:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003954:	f003 031f 	and.w	r3, r3, #31
 8003958:	2b00      	cmp	r3, #0
 800395a:	d104      	bne.n	8003966 <USB_EPStartXfer+0x3e6>
 800395c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003960:	3b01      	subs	r3, #1
 8003962:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003966:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800396a:	b29b      	uxth	r3, r3
 800396c:	029b      	lsls	r3, r3, #10
 800396e:	b29b      	uxth	r3, r3
 8003970:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003974:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003978:	b29a      	uxth	r2, r3
 800397a:	f107 0314 	add.w	r3, r7, #20
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	801a      	strh	r2, [r3, #0]
 8003982:	e02a      	b.n	80039da <USB_EPStartXfer+0x45a>
 8003984:	463b      	mov	r3, r7
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	785b      	ldrb	r3, [r3, #1]
 800398a:	2b01      	cmp	r3, #1
 800398c:	d125      	bne.n	80039da <USB_EPStartXfer+0x45a>
 800398e:	f107 0320 	add.w	r3, r7, #32
 8003992:	1d3a      	adds	r2, r7, #4
 8003994:	6812      	ldr	r2, [r2, #0]
 8003996:	601a      	str	r2, [r3, #0]
 8003998:	1d3b      	adds	r3, r7, #4
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039a0:	b29b      	uxth	r3, r3
 80039a2:	4619      	mov	r1, r3
 80039a4:	f107 0320 	add.w	r3, r7, #32
 80039a8:	f107 0220 	add.w	r2, r7, #32
 80039ac:	6812      	ldr	r2, [r2, #0]
 80039ae:	440a      	add	r2, r1
 80039b0:	601a      	str	r2, [r3, #0]
 80039b2:	463b      	mov	r3, r7
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	781b      	ldrb	r3, [r3, #0]
 80039b8:	011a      	lsls	r2, r3, #4
 80039ba:	f107 0320 	add.w	r3, r7, #32
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4413      	add	r3, r2
 80039c2:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80039c6:	f107 031c 	add.w	r3, r7, #28
 80039ca:	601a      	str	r2, [r3, #0]
 80039cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80039d0:	b29a      	uxth	r2, r3
 80039d2:	f107 031c 	add.w	r3, r7, #28
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80039da:	463b      	mov	r3, r7
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	891b      	ldrh	r3, [r3, #8]
 80039e0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80039e4:	463b      	mov	r3, r7
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	6959      	ldr	r1, [r3, #20]
 80039ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80039ee:	b29b      	uxth	r3, r3
 80039f0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80039f4:	1d38      	adds	r0, r7, #4
 80039f6:	6800      	ldr	r0, [r0, #0]
 80039f8:	f001 f9f7 	bl	8004dea <USB_WritePMA>
 80039fc:	f000 bcc6 	b.w	800438c <USB_EPStartXfer+0xe0c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003a00:	463b      	mov	r3, r7
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	785b      	ldrb	r3, [r3, #1]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d164      	bne.n	8003ad4 <USB_EPStartXfer+0x554>
 8003a0a:	1d3b      	adds	r3, r7, #4
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003a10:	1d3b      	adds	r3, r7, #4
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a18:	b29b      	uxth	r3, r3
 8003a1a:	461a      	mov	r2, r3
 8003a1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a1e:	4413      	add	r3, r2
 8003a20:	64bb      	str	r3, [r7, #72]	; 0x48
 8003a22:	463b      	mov	r3, r7
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	781b      	ldrb	r3, [r3, #0]
 8003a28:	011a      	lsls	r2, r3, #4
 8003a2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a2c:	4413      	add	r3, r2
 8003a2e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003a32:	647b      	str	r3, [r7, #68]	; 0x44
 8003a34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d112      	bne.n	8003a62 <USB_EPStartXfer+0x4e2>
 8003a3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a3e:	881b      	ldrh	r3, [r3, #0]
 8003a40:	b29b      	uxth	r3, r3
 8003a42:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003a46:	b29a      	uxth	r2, r3
 8003a48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a4a:	801a      	strh	r2, [r3, #0]
 8003a4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a4e:	881b      	ldrh	r3, [r3, #0]
 8003a50:	b29b      	uxth	r3, r3
 8003a52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a5a:	b29a      	uxth	r2, r3
 8003a5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a5e:	801a      	strh	r2, [r3, #0]
 8003a60:	e057      	b.n	8003b12 <USB_EPStartXfer+0x592>
 8003a62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003a66:	2b3e      	cmp	r3, #62	; 0x3e
 8003a68:	d817      	bhi.n	8003a9a <USB_EPStartXfer+0x51a>
 8003a6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003a6e:	085b      	lsrs	r3, r3, #1
 8003a70:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003a74:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003a78:	f003 0301 	and.w	r3, r3, #1
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d004      	beq.n	8003a8a <USB_EPStartXfer+0x50a>
 8003a80:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003a84:	3301      	adds	r3, #1
 8003a86:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003a8a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003a8e:	b29b      	uxth	r3, r3
 8003a90:	029b      	lsls	r3, r3, #10
 8003a92:	b29a      	uxth	r2, r3
 8003a94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a96:	801a      	strh	r2, [r3, #0]
 8003a98:	e03b      	b.n	8003b12 <USB_EPStartXfer+0x592>
 8003a9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003a9e:	095b      	lsrs	r3, r3, #5
 8003aa0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003aa4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003aa8:	f003 031f 	and.w	r3, r3, #31
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d104      	bne.n	8003aba <USB_EPStartXfer+0x53a>
 8003ab0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003ab4:	3b01      	subs	r3, #1
 8003ab6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003aba:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003abe:	b29b      	uxth	r3, r3
 8003ac0:	029b      	lsls	r3, r3, #10
 8003ac2:	b29b      	uxth	r3, r3
 8003ac4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ac8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003acc:	b29a      	uxth	r2, r3
 8003ace:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ad0:	801a      	strh	r2, [r3, #0]
 8003ad2:	e01e      	b.n	8003b12 <USB_EPStartXfer+0x592>
 8003ad4:	463b      	mov	r3, r7
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	785b      	ldrb	r3, [r3, #1]
 8003ada:	2b01      	cmp	r3, #1
 8003adc:	d119      	bne.n	8003b12 <USB_EPStartXfer+0x592>
 8003ade:	1d3b      	adds	r3, r7, #4
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	653b      	str	r3, [r7, #80]	; 0x50
 8003ae4:	1d3b      	adds	r3, r7, #4
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003aec:	b29b      	uxth	r3, r3
 8003aee:	461a      	mov	r2, r3
 8003af0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003af2:	4413      	add	r3, r2
 8003af4:	653b      	str	r3, [r7, #80]	; 0x50
 8003af6:	463b      	mov	r3, r7
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	781b      	ldrb	r3, [r3, #0]
 8003afc:	011a      	lsls	r2, r3, #4
 8003afe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b00:	4413      	add	r3, r2
 8003b02:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003b06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b08:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003b0c:	b29a      	uxth	r2, r3
 8003b0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b10:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8003b12:	463b      	mov	r3, r7
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	891b      	ldrh	r3, [r3, #8]
 8003b18:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003b1c:	463b      	mov	r3, r7
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	6959      	ldr	r1, [r3, #20]
 8003b22:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003b26:	b29b      	uxth	r3, r3
 8003b28:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8003b2c:	1d38      	adds	r0, r7, #4
 8003b2e:	6800      	ldr	r0, [r0, #0]
 8003b30:	f001 f95b 	bl	8004dea <USB_WritePMA>
            ep->xfer_buff += len;
 8003b34:	463b      	mov	r3, r7
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	695a      	ldr	r2, [r3, #20]
 8003b3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003b3e:	441a      	add	r2, r3
 8003b40:	463b      	mov	r3, r7
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8003b46:	463b      	mov	r3, r7
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	6a1a      	ldr	r2, [r3, #32]
 8003b4c:	463b      	mov	r3, r7
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	691b      	ldr	r3, [r3, #16]
 8003b52:	429a      	cmp	r2, r3
 8003b54:	d909      	bls.n	8003b6a <USB_EPStartXfer+0x5ea>
            {
              ep->xfer_len_db -= len;
 8003b56:	463b      	mov	r3, r7
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	6a1a      	ldr	r2, [r3, #32]
 8003b5c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003b60:	1ad2      	subs	r2, r2, r3
 8003b62:	463b      	mov	r3, r7
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	621a      	str	r2, [r3, #32]
 8003b68:	e008      	b.n	8003b7c <USB_EPStartXfer+0x5fc>
            }
            else
            {
              len = ep->xfer_len_db;
 8003b6a:	463b      	mov	r3, r7
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	6a1b      	ldr	r3, [r3, #32]
 8003b70:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8003b74:	463b      	mov	r3, r7
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003b7c:	1d3b      	adds	r3, r7, #4
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	643b      	str	r3, [r7, #64]	; 0x40
 8003b82:	463b      	mov	r3, r7
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	785b      	ldrb	r3, [r3, #1]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d164      	bne.n	8003c56 <USB_EPStartXfer+0x6d6>
 8003b8c:	1d3b      	adds	r3, r7, #4
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	63bb      	str	r3, [r7, #56]	; 0x38
 8003b92:	1d3b      	adds	r3, r7, #4
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b9a:	b29b      	uxth	r3, r3
 8003b9c:	461a      	mov	r2, r3
 8003b9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ba0:	4413      	add	r3, r2
 8003ba2:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ba4:	463b      	mov	r3, r7
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	781b      	ldrb	r3, [r3, #0]
 8003baa:	011a      	lsls	r2, r3, #4
 8003bac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bae:	4413      	add	r3, r2
 8003bb0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003bb4:	637b      	str	r3, [r7, #52]	; 0x34
 8003bb6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d112      	bne.n	8003be4 <USB_EPStartXfer+0x664>
 8003bbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bc0:	881b      	ldrh	r3, [r3, #0]
 8003bc2:	b29b      	uxth	r3, r3
 8003bc4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003bc8:	b29a      	uxth	r2, r3
 8003bca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bcc:	801a      	strh	r2, [r3, #0]
 8003bce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bd0:	881b      	ldrh	r3, [r3, #0]
 8003bd2:	b29b      	uxth	r3, r3
 8003bd4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003bd8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003bdc:	b29a      	uxth	r2, r3
 8003bde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003be0:	801a      	strh	r2, [r3, #0]
 8003be2:	e054      	b.n	8003c8e <USB_EPStartXfer+0x70e>
 8003be4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003be8:	2b3e      	cmp	r3, #62	; 0x3e
 8003bea:	d817      	bhi.n	8003c1c <USB_EPStartXfer+0x69c>
 8003bec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003bf0:	085b      	lsrs	r3, r3, #1
 8003bf2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003bf6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003bfa:	f003 0301 	and.w	r3, r3, #1
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d004      	beq.n	8003c0c <USB_EPStartXfer+0x68c>
 8003c02:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003c06:	3301      	adds	r3, #1
 8003c08:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003c0c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003c10:	b29b      	uxth	r3, r3
 8003c12:	029b      	lsls	r3, r3, #10
 8003c14:	b29a      	uxth	r2, r3
 8003c16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c18:	801a      	strh	r2, [r3, #0]
 8003c1a:	e038      	b.n	8003c8e <USB_EPStartXfer+0x70e>
 8003c1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003c20:	095b      	lsrs	r3, r3, #5
 8003c22:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003c26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003c2a:	f003 031f 	and.w	r3, r3, #31
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d104      	bne.n	8003c3c <USB_EPStartXfer+0x6bc>
 8003c32:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003c36:	3b01      	subs	r3, #1
 8003c38:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003c3c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003c40:	b29b      	uxth	r3, r3
 8003c42:	029b      	lsls	r3, r3, #10
 8003c44:	b29b      	uxth	r3, r3
 8003c46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c4e:	b29a      	uxth	r2, r3
 8003c50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c52:	801a      	strh	r2, [r3, #0]
 8003c54:	e01b      	b.n	8003c8e <USB_EPStartXfer+0x70e>
 8003c56:	463b      	mov	r3, r7
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	785b      	ldrb	r3, [r3, #1]
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	d116      	bne.n	8003c8e <USB_EPStartXfer+0x70e>
 8003c60:	1d3b      	adds	r3, r7, #4
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c68:	b29b      	uxth	r3, r3
 8003c6a:	461a      	mov	r2, r3
 8003c6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c6e:	4413      	add	r3, r2
 8003c70:	643b      	str	r3, [r7, #64]	; 0x40
 8003c72:	463b      	mov	r3, r7
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	781b      	ldrb	r3, [r3, #0]
 8003c78:	011a      	lsls	r2, r3, #4
 8003c7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c7c:	4413      	add	r3, r2
 8003c7e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003c82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003c88:	b29a      	uxth	r2, r3
 8003c8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c8c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8003c8e:	463b      	mov	r3, r7
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	895b      	ldrh	r3, [r3, #10]
 8003c94:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003c98:	463b      	mov	r3, r7
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	6959      	ldr	r1, [r3, #20]
 8003c9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003ca2:	b29b      	uxth	r3, r3
 8003ca4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8003ca8:	1d38      	adds	r0, r7, #4
 8003caa:	6800      	ldr	r0, [r0, #0]
 8003cac:	f001 f89d 	bl	8004dea <USB_WritePMA>
 8003cb0:	e36c      	b.n	800438c <USB_EPStartXfer+0xe0c>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8003cb2:	463b      	mov	r3, r7
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	6a1b      	ldr	r3, [r3, #32]
 8003cb8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8003cbc:	1d3b      	adds	r3, r7, #4
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	463b      	mov	r3, r7
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	781b      	ldrb	r3, [r3, #0]
 8003cc6:	009b      	lsls	r3, r3, #2
 8003cc8:	4413      	add	r3, r2
 8003cca:	881b      	ldrh	r3, [r3, #0]
 8003ccc:	b29b      	uxth	r3, r3
 8003cce:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8003cd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cd6:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8003cda:	1d3b      	adds	r3, r7, #4
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	463b      	mov	r3, r7
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	781b      	ldrb	r3, [r3, #0]
 8003ce4:	009b      	lsls	r3, r3, #2
 8003ce6:	441a      	add	r2, r3
 8003ce8:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8003cec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003cf0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003cf4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003cf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cfc:	b29b      	uxth	r3, r3
 8003cfe:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003d00:	1d3b      	adds	r3, r7, #4
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d06:	1d3b      	adds	r3, r7, #4
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d0e:	b29b      	uxth	r3, r3
 8003d10:	461a      	mov	r2, r3
 8003d12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d14:	4413      	add	r3, r2
 8003d16:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d18:	463b      	mov	r3, r7
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	781b      	ldrb	r3, [r3, #0]
 8003d1e:	011a      	lsls	r2, r3, #4
 8003d20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d22:	4413      	add	r3, r2
 8003d24:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003d28:	65bb      	str	r3, [r7, #88]	; 0x58
 8003d2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003d2e:	b29a      	uxth	r2, r3
 8003d30:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003d32:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8003d34:	463b      	mov	r3, r7
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	891b      	ldrh	r3, [r3, #8]
 8003d3a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003d3e:	463b      	mov	r3, r7
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	6959      	ldr	r1, [r3, #20]
 8003d44:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003d48:	b29b      	uxth	r3, r3
 8003d4a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8003d4e:	1d38      	adds	r0, r7, #4
 8003d50:	6800      	ldr	r0, [r0, #0]
 8003d52:	f001 f84a 	bl	8004dea <USB_WritePMA>
 8003d56:	e319      	b.n	800438c <USB_EPStartXfer+0xe0c>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8003d58:	1d3b      	adds	r3, r7, #4
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	463b      	mov	r3, r7
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	781b      	ldrb	r3, [r3, #0]
 8003d62:	009b      	lsls	r3, r3, #2
 8003d64:	4413      	add	r3, r2
 8003d66:	881b      	ldrh	r3, [r3, #0]
 8003d68:	b29b      	uxth	r3, r3
 8003d6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d72:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8003d76:	1d3b      	adds	r3, r7, #4
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	463b      	mov	r3, r7
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	781b      	ldrb	r3, [r3, #0]
 8003d80:	009b      	lsls	r3, r3, #2
 8003d82:	441a      	add	r2, r3
 8003d84:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8003d88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d90:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8003d94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d98:	b29b      	uxth	r3, r3
 8003d9a:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8003d9c:	463b      	mov	r3, r7
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	6a1a      	ldr	r2, [r3, #32]
 8003da2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003da6:	1ad2      	subs	r2, r2, r3
 8003da8:	463b      	mov	r3, r7
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003dae:	1d3b      	adds	r3, r7, #4
 8003db0:	681a      	ldr	r2, [r3, #0]
 8003db2:	463b      	mov	r3, r7
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	781b      	ldrb	r3, [r3, #0]
 8003db8:	009b      	lsls	r3, r3, #2
 8003dba:	4413      	add	r3, r2
 8003dbc:	881b      	ldrh	r3, [r3, #0]
 8003dbe:	b29b      	uxth	r3, r3
 8003dc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	f000 8162 	beq.w	800408e <USB_EPStartXfer+0xb0e>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003dca:	1d3b      	adds	r3, r7, #4
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003dd2:	463b      	mov	r3, r7
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	785b      	ldrb	r3, [r3, #1]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d164      	bne.n	8003ea6 <USB_EPStartXfer+0x926>
 8003ddc:	1d3b      	adds	r3, r7, #4
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	67bb      	str	r3, [r7, #120]	; 0x78
 8003de2:	1d3b      	adds	r3, r7, #4
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003dea:	b29b      	uxth	r3, r3
 8003dec:	461a      	mov	r2, r3
 8003dee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003df0:	4413      	add	r3, r2
 8003df2:	67bb      	str	r3, [r7, #120]	; 0x78
 8003df4:	463b      	mov	r3, r7
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	781b      	ldrb	r3, [r3, #0]
 8003dfa:	011a      	lsls	r2, r3, #4
 8003dfc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003dfe:	4413      	add	r3, r2
 8003e00:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003e04:	677b      	str	r3, [r7, #116]	; 0x74
 8003e06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d112      	bne.n	8003e34 <USB_EPStartXfer+0x8b4>
 8003e0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e10:	881b      	ldrh	r3, [r3, #0]
 8003e12:	b29b      	uxth	r3, r3
 8003e14:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003e18:	b29a      	uxth	r2, r3
 8003e1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e1c:	801a      	strh	r2, [r3, #0]
 8003e1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e20:	881b      	ldrh	r3, [r3, #0]
 8003e22:	b29b      	uxth	r3, r3
 8003e24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e2c:	b29a      	uxth	r2, r3
 8003e2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e30:	801a      	strh	r2, [r3, #0]
 8003e32:	e057      	b.n	8003ee4 <USB_EPStartXfer+0x964>
 8003e34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003e38:	2b3e      	cmp	r3, #62	; 0x3e
 8003e3a:	d817      	bhi.n	8003e6c <USB_EPStartXfer+0x8ec>
 8003e3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003e40:	085b      	lsrs	r3, r3, #1
 8003e42:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8003e46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003e4a:	f003 0301 	and.w	r3, r3, #1
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d004      	beq.n	8003e5c <USB_EPStartXfer+0x8dc>
 8003e52:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003e56:	3301      	adds	r3, #1
 8003e58:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8003e5c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003e60:	b29b      	uxth	r3, r3
 8003e62:	029b      	lsls	r3, r3, #10
 8003e64:	b29a      	uxth	r2, r3
 8003e66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e68:	801a      	strh	r2, [r3, #0]
 8003e6a:	e03b      	b.n	8003ee4 <USB_EPStartXfer+0x964>
 8003e6c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003e70:	095b      	lsrs	r3, r3, #5
 8003e72:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8003e76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003e7a:	f003 031f 	and.w	r3, r3, #31
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d104      	bne.n	8003e8c <USB_EPStartXfer+0x90c>
 8003e82:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003e86:	3b01      	subs	r3, #1
 8003e88:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8003e8c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003e90:	b29b      	uxth	r3, r3
 8003e92:	029b      	lsls	r3, r3, #10
 8003e94:	b29b      	uxth	r3, r3
 8003e96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e9e:	b29a      	uxth	r2, r3
 8003ea0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ea2:	801a      	strh	r2, [r3, #0]
 8003ea4:	e01e      	b.n	8003ee4 <USB_EPStartXfer+0x964>
 8003ea6:	463b      	mov	r3, r7
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	785b      	ldrb	r3, [r3, #1]
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d119      	bne.n	8003ee4 <USB_EPStartXfer+0x964>
 8003eb0:	1d3b      	adds	r3, r7, #4
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003eb8:	b29b      	uxth	r3, r3
 8003eba:	461a      	mov	r2, r3
 8003ebc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003ec0:	4413      	add	r3, r2
 8003ec2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003ec6:	463b      	mov	r3, r7
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	781b      	ldrb	r3, [r3, #0]
 8003ecc:	011a      	lsls	r2, r3, #4
 8003ece:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003ed2:	4413      	add	r3, r2
 8003ed4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003ed8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003eda:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003ede:	b29a      	uxth	r2, r3
 8003ee0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003ee2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8003ee4:	463b      	mov	r3, r7
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	895b      	ldrh	r3, [r3, #10]
 8003eea:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003eee:	463b      	mov	r3, r7
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	6959      	ldr	r1, [r3, #20]
 8003ef4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003ef8:	b29b      	uxth	r3, r3
 8003efa:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8003efe:	1d38      	adds	r0, r7, #4
 8003f00:	6800      	ldr	r0, [r0, #0]
 8003f02:	f000 ff72 	bl	8004dea <USB_WritePMA>
          ep->xfer_buff += len;
 8003f06:	463b      	mov	r3, r7
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	695a      	ldr	r2, [r3, #20]
 8003f0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003f10:	441a      	add	r2, r3
 8003f12:	463b      	mov	r3, r7
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8003f18:	463b      	mov	r3, r7
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	6a1a      	ldr	r2, [r3, #32]
 8003f1e:	463b      	mov	r3, r7
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	691b      	ldr	r3, [r3, #16]
 8003f24:	429a      	cmp	r2, r3
 8003f26:	d909      	bls.n	8003f3c <USB_EPStartXfer+0x9bc>
          {
            ep->xfer_len_db -= len;
 8003f28:	463b      	mov	r3, r7
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	6a1a      	ldr	r2, [r3, #32]
 8003f2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003f32:	1ad2      	subs	r2, r2, r3
 8003f34:	463b      	mov	r3, r7
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	621a      	str	r2, [r3, #32]
 8003f3a:	e008      	b.n	8003f4e <USB_EPStartXfer+0x9ce>
          }
          else
          {
            len = ep->xfer_len_db;
 8003f3c:	463b      	mov	r3, r7
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	6a1b      	ldr	r3, [r3, #32]
 8003f42:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8003f46:	463b      	mov	r3, r7
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8003f4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	f000 821a 	beq.w	800438c <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003f58:	463b      	mov	r3, r7
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	785b      	ldrb	r3, [r3, #1]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d164      	bne.n	800402c <USB_EPStartXfer+0xaac>
 8003f62:	1d3b      	adds	r3, r7, #4
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	66bb      	str	r3, [r7, #104]	; 0x68
 8003f68:	1d3b      	adds	r3, r7, #4
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f70:	b29b      	uxth	r3, r3
 8003f72:	461a      	mov	r2, r3
 8003f74:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f76:	4413      	add	r3, r2
 8003f78:	66bb      	str	r3, [r7, #104]	; 0x68
 8003f7a:	463b      	mov	r3, r7
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	781b      	ldrb	r3, [r3, #0]
 8003f80:	011a      	lsls	r2, r3, #4
 8003f82:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f84:	4413      	add	r3, r2
 8003f86:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003f8a:	667b      	str	r3, [r7, #100]	; 0x64
 8003f8c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d112      	bne.n	8003fba <USB_EPStartXfer+0xa3a>
 8003f94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f96:	881b      	ldrh	r3, [r3, #0]
 8003f98:	b29b      	uxth	r3, r3
 8003f9a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003f9e:	b29a      	uxth	r2, r3
 8003fa0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003fa2:	801a      	strh	r2, [r3, #0]
 8003fa4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003fa6:	881b      	ldrh	r3, [r3, #0]
 8003fa8:	b29b      	uxth	r3, r3
 8003faa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003fae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003fb2:	b29a      	uxth	r2, r3
 8003fb4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003fb6:	801a      	strh	r2, [r3, #0]
 8003fb8:	e057      	b.n	800406a <USB_EPStartXfer+0xaea>
 8003fba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003fbe:	2b3e      	cmp	r3, #62	; 0x3e
 8003fc0:	d817      	bhi.n	8003ff2 <USB_EPStartXfer+0xa72>
 8003fc2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003fc6:	085b      	lsrs	r3, r3, #1
 8003fc8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8003fcc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003fd0:	f003 0301 	and.w	r3, r3, #1
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d004      	beq.n	8003fe2 <USB_EPStartXfer+0xa62>
 8003fd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fdc:	3301      	adds	r3, #1
 8003fde:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8003fe2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fe6:	b29b      	uxth	r3, r3
 8003fe8:	029b      	lsls	r3, r3, #10
 8003fea:	b29a      	uxth	r2, r3
 8003fec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003fee:	801a      	strh	r2, [r3, #0]
 8003ff0:	e03b      	b.n	800406a <USB_EPStartXfer+0xaea>
 8003ff2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003ff6:	095b      	lsrs	r3, r3, #5
 8003ff8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8003ffc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004000:	f003 031f 	and.w	r3, r3, #31
 8004004:	2b00      	cmp	r3, #0
 8004006:	d104      	bne.n	8004012 <USB_EPStartXfer+0xa92>
 8004008:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800400c:	3b01      	subs	r3, #1
 800400e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8004012:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004016:	b29b      	uxth	r3, r3
 8004018:	029b      	lsls	r3, r3, #10
 800401a:	b29b      	uxth	r3, r3
 800401c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004020:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004024:	b29a      	uxth	r2, r3
 8004026:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004028:	801a      	strh	r2, [r3, #0]
 800402a:	e01e      	b.n	800406a <USB_EPStartXfer+0xaea>
 800402c:	463b      	mov	r3, r7
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	785b      	ldrb	r3, [r3, #1]
 8004032:	2b01      	cmp	r3, #1
 8004034:	d119      	bne.n	800406a <USB_EPStartXfer+0xaea>
 8004036:	1d3b      	adds	r3, r7, #4
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	673b      	str	r3, [r7, #112]	; 0x70
 800403c:	1d3b      	adds	r3, r7, #4
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004044:	b29b      	uxth	r3, r3
 8004046:	461a      	mov	r2, r3
 8004048:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800404a:	4413      	add	r3, r2
 800404c:	673b      	str	r3, [r7, #112]	; 0x70
 800404e:	463b      	mov	r3, r7
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	781b      	ldrb	r3, [r3, #0]
 8004054:	011a      	lsls	r2, r3, #4
 8004056:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004058:	4413      	add	r3, r2
 800405a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800405e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004060:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004064:	b29a      	uxth	r2, r3
 8004066:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004068:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800406a:	463b      	mov	r3, r7
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	891b      	ldrh	r3, [r3, #8]
 8004070:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004074:	463b      	mov	r3, r7
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	6959      	ldr	r1, [r3, #20]
 800407a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800407e:	b29b      	uxth	r3, r3
 8004080:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004084:	1d38      	adds	r0, r7, #4
 8004086:	6800      	ldr	r0, [r0, #0]
 8004088:	f000 feaf 	bl	8004dea <USB_WritePMA>
 800408c:	e17e      	b.n	800438c <USB_EPStartXfer+0xe0c>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800408e:	463b      	mov	r3, r7
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	785b      	ldrb	r3, [r3, #1]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d16f      	bne.n	8004178 <USB_EPStartXfer+0xbf8>
 8004098:	1d3b      	adds	r3, r7, #4
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80040a0:	1d3b      	adds	r3, r7, #4
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040a8:	b29b      	uxth	r3, r3
 80040aa:	461a      	mov	r2, r3
 80040ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80040b0:	4413      	add	r3, r2
 80040b2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80040b6:	463b      	mov	r3, r7
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	781b      	ldrb	r3, [r3, #0]
 80040bc:	011a      	lsls	r2, r3, #4
 80040be:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80040c2:	4413      	add	r3, r2
 80040c4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80040c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80040cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d116      	bne.n	8004102 <USB_EPStartXfer+0xb82>
 80040d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80040d8:	881b      	ldrh	r3, [r3, #0]
 80040da:	b29b      	uxth	r3, r3
 80040dc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80040e0:	b29a      	uxth	r2, r3
 80040e2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80040e6:	801a      	strh	r2, [r3, #0]
 80040e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80040ec:	881b      	ldrh	r3, [r3, #0]
 80040ee:	b29b      	uxth	r3, r3
 80040f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040f8:	b29a      	uxth	r2, r3
 80040fa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80040fe:	801a      	strh	r2, [r3, #0]
 8004100:	e05f      	b.n	80041c2 <USB_EPStartXfer+0xc42>
 8004102:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004106:	2b3e      	cmp	r3, #62	; 0x3e
 8004108:	d818      	bhi.n	800413c <USB_EPStartXfer+0xbbc>
 800410a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800410e:	085b      	lsrs	r3, r3, #1
 8004110:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8004114:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004118:	f003 0301 	and.w	r3, r3, #1
 800411c:	2b00      	cmp	r3, #0
 800411e:	d004      	beq.n	800412a <USB_EPStartXfer+0xbaa>
 8004120:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004124:	3301      	adds	r3, #1
 8004126:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800412a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800412e:	b29b      	uxth	r3, r3
 8004130:	029b      	lsls	r3, r3, #10
 8004132:	b29a      	uxth	r2, r3
 8004134:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004138:	801a      	strh	r2, [r3, #0]
 800413a:	e042      	b.n	80041c2 <USB_EPStartXfer+0xc42>
 800413c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004140:	095b      	lsrs	r3, r3, #5
 8004142:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8004146:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800414a:	f003 031f 	and.w	r3, r3, #31
 800414e:	2b00      	cmp	r3, #0
 8004150:	d104      	bne.n	800415c <USB_EPStartXfer+0xbdc>
 8004152:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004156:	3b01      	subs	r3, #1
 8004158:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800415c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004160:	b29b      	uxth	r3, r3
 8004162:	029b      	lsls	r3, r3, #10
 8004164:	b29b      	uxth	r3, r3
 8004166:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800416a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800416e:	b29a      	uxth	r2, r3
 8004170:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004174:	801a      	strh	r2, [r3, #0]
 8004176:	e024      	b.n	80041c2 <USB_EPStartXfer+0xc42>
 8004178:	463b      	mov	r3, r7
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	785b      	ldrb	r3, [r3, #1]
 800417e:	2b01      	cmp	r3, #1
 8004180:	d11f      	bne.n	80041c2 <USB_EPStartXfer+0xc42>
 8004182:	1d3b      	adds	r3, r7, #4
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800418a:	1d3b      	adds	r3, r7, #4
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004192:	b29b      	uxth	r3, r3
 8004194:	461a      	mov	r2, r3
 8004196:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800419a:	4413      	add	r3, r2
 800419c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80041a0:	463b      	mov	r3, r7
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	781b      	ldrb	r3, [r3, #0]
 80041a6:	011a      	lsls	r2, r3, #4
 80041a8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80041ac:	4413      	add	r3, r2
 80041ae:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80041b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80041b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80041ba:	b29a      	uxth	r2, r3
 80041bc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80041c0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80041c2:	463b      	mov	r3, r7
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	891b      	ldrh	r3, [r3, #8]
 80041c8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80041cc:	463b      	mov	r3, r7
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	6959      	ldr	r1, [r3, #20]
 80041d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80041d6:	b29b      	uxth	r3, r3
 80041d8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80041dc:	1d38      	adds	r0, r7, #4
 80041de:	6800      	ldr	r0, [r0, #0]
 80041e0:	f000 fe03 	bl	8004dea <USB_WritePMA>
          ep->xfer_buff += len;
 80041e4:	463b      	mov	r3, r7
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	695a      	ldr	r2, [r3, #20]
 80041ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80041ee:	441a      	add	r2, r3
 80041f0:	463b      	mov	r3, r7
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80041f6:	463b      	mov	r3, r7
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	6a1a      	ldr	r2, [r3, #32]
 80041fc:	463b      	mov	r3, r7
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	691b      	ldr	r3, [r3, #16]
 8004202:	429a      	cmp	r2, r3
 8004204:	d909      	bls.n	800421a <USB_EPStartXfer+0xc9a>
          {
            ep->xfer_len_db -= len;
 8004206:	463b      	mov	r3, r7
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	6a1a      	ldr	r2, [r3, #32]
 800420c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004210:	1ad2      	subs	r2, r2, r3
 8004212:	463b      	mov	r3, r7
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	621a      	str	r2, [r3, #32]
 8004218:	e008      	b.n	800422c <USB_EPStartXfer+0xcac>
          }
          else
          {
            len = ep->xfer_len_db;
 800421a:	463b      	mov	r3, r7
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	6a1b      	ldr	r3, [r3, #32]
 8004220:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8004224:	463b      	mov	r3, r7
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	2200      	movs	r2, #0
 800422a:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 800422c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004230:	2b00      	cmp	r3, #0
 8004232:	f000 80ab 	beq.w	800438c <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004236:	1d3b      	adds	r3, r7, #4
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800423e:	463b      	mov	r3, r7
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	785b      	ldrb	r3, [r3, #1]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d16f      	bne.n	8004328 <USB_EPStartXfer+0xda8>
 8004248:	1d3b      	adds	r3, r7, #4
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004250:	1d3b      	adds	r3, r7, #4
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004258:	b29b      	uxth	r3, r3
 800425a:	461a      	mov	r2, r3
 800425c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004260:	4413      	add	r3, r2
 8004262:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004266:	463b      	mov	r3, r7
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	781b      	ldrb	r3, [r3, #0]
 800426c:	011a      	lsls	r2, r3, #4
 800426e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004272:	4413      	add	r3, r2
 8004274:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004278:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800427c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004280:	2b00      	cmp	r3, #0
 8004282:	d116      	bne.n	80042b2 <USB_EPStartXfer+0xd32>
 8004284:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004288:	881b      	ldrh	r3, [r3, #0]
 800428a:	b29b      	uxth	r3, r3
 800428c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004290:	b29a      	uxth	r2, r3
 8004292:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004296:	801a      	strh	r2, [r3, #0]
 8004298:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800429c:	881b      	ldrh	r3, [r3, #0]
 800429e:	b29b      	uxth	r3, r3
 80042a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042a8:	b29a      	uxth	r2, r3
 80042aa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80042ae:	801a      	strh	r2, [r3, #0]
 80042b0:	e05b      	b.n	800436a <USB_EPStartXfer+0xdea>
 80042b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80042b6:	2b3e      	cmp	r3, #62	; 0x3e
 80042b8:	d818      	bhi.n	80042ec <USB_EPStartXfer+0xd6c>
 80042ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80042be:	085b      	lsrs	r3, r3, #1
 80042c0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80042c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80042c8:	f003 0301 	and.w	r3, r3, #1
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d004      	beq.n	80042da <USB_EPStartXfer+0xd5a>
 80042d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042d4:	3301      	adds	r3, #1
 80042d6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80042da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042de:	b29b      	uxth	r3, r3
 80042e0:	029b      	lsls	r3, r3, #10
 80042e2:	b29a      	uxth	r2, r3
 80042e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80042e8:	801a      	strh	r2, [r3, #0]
 80042ea:	e03e      	b.n	800436a <USB_EPStartXfer+0xdea>
 80042ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80042f0:	095b      	lsrs	r3, r3, #5
 80042f2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80042f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80042fa:	f003 031f 	and.w	r3, r3, #31
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d104      	bne.n	800430c <USB_EPStartXfer+0xd8c>
 8004302:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004306:	3b01      	subs	r3, #1
 8004308:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800430c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004310:	b29b      	uxth	r3, r3
 8004312:	029b      	lsls	r3, r3, #10
 8004314:	b29b      	uxth	r3, r3
 8004316:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800431a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800431e:	b29a      	uxth	r2, r3
 8004320:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004324:	801a      	strh	r2, [r3, #0]
 8004326:	e020      	b.n	800436a <USB_EPStartXfer+0xdea>
 8004328:	463b      	mov	r3, r7
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	785b      	ldrb	r3, [r3, #1]
 800432e:	2b01      	cmp	r3, #1
 8004330:	d11b      	bne.n	800436a <USB_EPStartXfer+0xdea>
 8004332:	1d3b      	adds	r3, r7, #4
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800433a:	b29b      	uxth	r3, r3
 800433c:	461a      	mov	r2, r3
 800433e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004342:	4413      	add	r3, r2
 8004344:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004348:	463b      	mov	r3, r7
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	781b      	ldrb	r3, [r3, #0]
 800434e:	011a      	lsls	r2, r3, #4
 8004350:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004354:	4413      	add	r3, r2
 8004356:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800435a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800435e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004362:	b29a      	uxth	r2, r3
 8004364:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004368:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800436a:	463b      	mov	r3, r7
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	895b      	ldrh	r3, [r3, #10]
 8004370:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004374:	463b      	mov	r3, r7
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	6959      	ldr	r1, [r3, #20]
 800437a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800437e:	b29b      	uxth	r3, r3
 8004380:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004384:	1d38      	adds	r0, r7, #4
 8004386:	6800      	ldr	r0, [r0, #0]
 8004388:	f000 fd2f 	bl	8004dea <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800438c:	1d3b      	adds	r3, r7, #4
 800438e:	681a      	ldr	r2, [r3, #0]
 8004390:	463b      	mov	r3, r7
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	781b      	ldrb	r3, [r3, #0]
 8004396:	009b      	lsls	r3, r3, #2
 8004398:	4413      	add	r3, r2
 800439a:	881b      	ldrh	r3, [r3, #0]
 800439c:	b29b      	uxth	r3, r3
 800439e:	f107 020a 	add.w	r2, r7, #10
 80043a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043aa:	8013      	strh	r3, [r2, #0]
 80043ac:	f107 030a 	add.w	r3, r7, #10
 80043b0:	f107 020a 	add.w	r2, r7, #10
 80043b4:	8812      	ldrh	r2, [r2, #0]
 80043b6:	f082 0210 	eor.w	r2, r2, #16
 80043ba:	801a      	strh	r2, [r3, #0]
 80043bc:	f107 030a 	add.w	r3, r7, #10
 80043c0:	f107 020a 	add.w	r2, r7, #10
 80043c4:	8812      	ldrh	r2, [r2, #0]
 80043c6:	f082 0220 	eor.w	r2, r2, #32
 80043ca:	801a      	strh	r2, [r3, #0]
 80043cc:	1d3b      	adds	r3, r7, #4
 80043ce:	681a      	ldr	r2, [r3, #0]
 80043d0:	463b      	mov	r3, r7
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	781b      	ldrb	r3, [r3, #0]
 80043d6:	009b      	lsls	r3, r3, #2
 80043d8:	441a      	add	r2, r3
 80043da:	f107 030a 	add.w	r3, r7, #10
 80043de:	881b      	ldrh	r3, [r3, #0]
 80043e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043f0:	b29b      	uxth	r3, r3
 80043f2:	8013      	strh	r3, [r2, #0]
 80043f4:	e3b5      	b.n	8004b62 <USB_EPStartXfer+0x15e2>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80043f6:	463b      	mov	r3, r7
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	7b1b      	ldrb	r3, [r3, #12]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	f040 8090 	bne.w	8004522 <USB_EPStartXfer+0xfa2>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8004402:	463b      	mov	r3, r7
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	699a      	ldr	r2, [r3, #24]
 8004408:	463b      	mov	r3, r7
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	691b      	ldr	r3, [r3, #16]
 800440e:	429a      	cmp	r2, r3
 8004410:	d90e      	bls.n	8004430 <USB_EPStartXfer+0xeb0>
      {
        len = ep->maxpacket;
 8004412:	463b      	mov	r3, r7
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	691b      	ldr	r3, [r3, #16]
 8004418:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 800441c:	463b      	mov	r3, r7
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	699a      	ldr	r2, [r3, #24]
 8004422:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004426:	1ad2      	subs	r2, r2, r3
 8004428:	463b      	mov	r3, r7
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	619a      	str	r2, [r3, #24]
 800442e:	e008      	b.n	8004442 <USB_EPStartXfer+0xec2>
      }
      else
      {
        len = ep->xfer_len;
 8004430:	463b      	mov	r3, r7
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	699b      	ldr	r3, [r3, #24]
 8004436:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 800443a:	463b      	mov	r3, r7
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	2200      	movs	r2, #0
 8004440:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8004442:	1d3b      	adds	r3, r7, #4
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800444a:	1d3b      	adds	r3, r7, #4
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004452:	b29b      	uxth	r3, r3
 8004454:	461a      	mov	r2, r3
 8004456:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800445a:	4413      	add	r3, r2
 800445c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004460:	463b      	mov	r3, r7
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	781b      	ldrb	r3, [r3, #0]
 8004466:	011a      	lsls	r2, r3, #4
 8004468:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800446c:	4413      	add	r3, r2
 800446e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004472:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004476:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800447a:	2b00      	cmp	r3, #0
 800447c:	d116      	bne.n	80044ac <USB_EPStartXfer+0xf2c>
 800447e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004482:	881b      	ldrh	r3, [r3, #0]
 8004484:	b29b      	uxth	r3, r3
 8004486:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800448a:	b29a      	uxth	r2, r3
 800448c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004490:	801a      	strh	r2, [r3, #0]
 8004492:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004496:	881b      	ldrh	r3, [r3, #0]
 8004498:	b29b      	uxth	r3, r3
 800449a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800449e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80044a2:	b29a      	uxth	r2, r3
 80044a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80044a8:	801a      	strh	r2, [r3, #0]
 80044aa:	e32c      	b.n	8004b06 <USB_EPStartXfer+0x1586>
 80044ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80044b0:	2b3e      	cmp	r3, #62	; 0x3e
 80044b2:	d818      	bhi.n	80044e6 <USB_EPStartXfer+0xf66>
 80044b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80044b8:	085b      	lsrs	r3, r3, #1
 80044ba:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80044be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80044c2:	f003 0301 	and.w	r3, r3, #1
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d004      	beq.n	80044d4 <USB_EPStartXfer+0xf54>
 80044ca:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80044ce:	3301      	adds	r3, #1
 80044d0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80044d4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80044d8:	b29b      	uxth	r3, r3
 80044da:	029b      	lsls	r3, r3, #10
 80044dc:	b29a      	uxth	r2, r3
 80044de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80044e2:	801a      	strh	r2, [r3, #0]
 80044e4:	e30f      	b.n	8004b06 <USB_EPStartXfer+0x1586>
 80044e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80044ea:	095b      	lsrs	r3, r3, #5
 80044ec:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80044f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80044f4:	f003 031f 	and.w	r3, r3, #31
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d104      	bne.n	8004506 <USB_EPStartXfer+0xf86>
 80044fc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004500:	3b01      	subs	r3, #1
 8004502:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8004506:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800450a:	b29b      	uxth	r3, r3
 800450c:	029b      	lsls	r3, r3, #10
 800450e:	b29b      	uxth	r3, r3
 8004510:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004514:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004518:	b29a      	uxth	r2, r3
 800451a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800451e:	801a      	strh	r2, [r3, #0]
 8004520:	e2f1      	b.n	8004b06 <USB_EPStartXfer+0x1586>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8004522:	463b      	mov	r3, r7
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	78db      	ldrb	r3, [r3, #3]
 8004528:	2b02      	cmp	r3, #2
 800452a:	f040 818f 	bne.w	800484c <USB_EPStartXfer+0x12cc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800452e:	463b      	mov	r3, r7
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	785b      	ldrb	r3, [r3, #1]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d175      	bne.n	8004624 <USB_EPStartXfer+0x10a4>
 8004538:	1d3b      	adds	r3, r7, #4
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004540:	1d3b      	adds	r3, r7, #4
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004548:	b29b      	uxth	r3, r3
 800454a:	461a      	mov	r2, r3
 800454c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004550:	4413      	add	r3, r2
 8004552:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004556:	463b      	mov	r3, r7
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	781b      	ldrb	r3, [r3, #0]
 800455c:	011a      	lsls	r2, r3, #4
 800455e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004562:	4413      	add	r3, r2
 8004564:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004568:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800456c:	463b      	mov	r3, r7
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	691b      	ldr	r3, [r3, #16]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d116      	bne.n	80045a4 <USB_EPStartXfer+0x1024>
 8004576:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800457a:	881b      	ldrh	r3, [r3, #0]
 800457c:	b29b      	uxth	r3, r3
 800457e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004582:	b29a      	uxth	r2, r3
 8004584:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004588:	801a      	strh	r2, [r3, #0]
 800458a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800458e:	881b      	ldrh	r3, [r3, #0]
 8004590:	b29b      	uxth	r3, r3
 8004592:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004596:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800459a:	b29a      	uxth	r2, r3
 800459c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80045a0:	801a      	strh	r2, [r3, #0]
 80045a2:	e065      	b.n	8004670 <USB_EPStartXfer+0x10f0>
 80045a4:	463b      	mov	r3, r7
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	691b      	ldr	r3, [r3, #16]
 80045aa:	2b3e      	cmp	r3, #62	; 0x3e
 80045ac:	d81a      	bhi.n	80045e4 <USB_EPStartXfer+0x1064>
 80045ae:	463b      	mov	r3, r7
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	691b      	ldr	r3, [r3, #16]
 80045b4:	085b      	lsrs	r3, r3, #1
 80045b6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80045ba:	463b      	mov	r3, r7
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	691b      	ldr	r3, [r3, #16]
 80045c0:	f003 0301 	and.w	r3, r3, #1
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d004      	beq.n	80045d2 <USB_EPStartXfer+0x1052>
 80045c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80045cc:	3301      	adds	r3, #1
 80045ce:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80045d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80045d6:	b29b      	uxth	r3, r3
 80045d8:	029b      	lsls	r3, r3, #10
 80045da:	b29a      	uxth	r2, r3
 80045dc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80045e0:	801a      	strh	r2, [r3, #0]
 80045e2:	e045      	b.n	8004670 <USB_EPStartXfer+0x10f0>
 80045e4:	463b      	mov	r3, r7
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	691b      	ldr	r3, [r3, #16]
 80045ea:	095b      	lsrs	r3, r3, #5
 80045ec:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80045f0:	463b      	mov	r3, r7
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	691b      	ldr	r3, [r3, #16]
 80045f6:	f003 031f 	and.w	r3, r3, #31
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d104      	bne.n	8004608 <USB_EPStartXfer+0x1088>
 80045fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004602:	3b01      	subs	r3, #1
 8004604:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004608:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800460c:	b29b      	uxth	r3, r3
 800460e:	029b      	lsls	r3, r3, #10
 8004610:	b29b      	uxth	r3, r3
 8004612:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004616:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800461a:	b29a      	uxth	r2, r3
 800461c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004620:	801a      	strh	r2, [r3, #0]
 8004622:	e025      	b.n	8004670 <USB_EPStartXfer+0x10f0>
 8004624:	463b      	mov	r3, r7
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	785b      	ldrb	r3, [r3, #1]
 800462a:	2b01      	cmp	r3, #1
 800462c:	d120      	bne.n	8004670 <USB_EPStartXfer+0x10f0>
 800462e:	1d3b      	adds	r3, r7, #4
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004636:	1d3b      	adds	r3, r7, #4
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800463e:	b29b      	uxth	r3, r3
 8004640:	461a      	mov	r2, r3
 8004642:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004646:	4413      	add	r3, r2
 8004648:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800464c:	463b      	mov	r3, r7
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	781b      	ldrb	r3, [r3, #0]
 8004652:	011a      	lsls	r2, r3, #4
 8004654:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004658:	4413      	add	r3, r2
 800465a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800465e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004662:	463b      	mov	r3, r7
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	691b      	ldr	r3, [r3, #16]
 8004668:	b29a      	uxth	r2, r3
 800466a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800466e:	801a      	strh	r2, [r3, #0]
 8004670:	1d3b      	adds	r3, r7, #4
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004678:	463b      	mov	r3, r7
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	785b      	ldrb	r3, [r3, #1]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d175      	bne.n	800476e <USB_EPStartXfer+0x11ee>
 8004682:	1d3b      	adds	r3, r7, #4
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800468a:	1d3b      	adds	r3, r7, #4
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004692:	b29b      	uxth	r3, r3
 8004694:	461a      	mov	r2, r3
 8004696:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800469a:	4413      	add	r3, r2
 800469c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80046a0:	463b      	mov	r3, r7
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	781b      	ldrb	r3, [r3, #0]
 80046a6:	011a      	lsls	r2, r3, #4
 80046a8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80046ac:	4413      	add	r3, r2
 80046ae:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80046b2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80046b6:	463b      	mov	r3, r7
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	691b      	ldr	r3, [r3, #16]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d116      	bne.n	80046ee <USB_EPStartXfer+0x116e>
 80046c0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80046c4:	881b      	ldrh	r3, [r3, #0]
 80046c6:	b29b      	uxth	r3, r3
 80046c8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80046cc:	b29a      	uxth	r2, r3
 80046ce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80046d2:	801a      	strh	r2, [r3, #0]
 80046d4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80046d8:	881b      	ldrh	r3, [r3, #0]
 80046da:	b29b      	uxth	r3, r3
 80046dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80046e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80046e4:	b29a      	uxth	r2, r3
 80046e6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80046ea:	801a      	strh	r2, [r3, #0]
 80046ec:	e061      	b.n	80047b2 <USB_EPStartXfer+0x1232>
 80046ee:	463b      	mov	r3, r7
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	691b      	ldr	r3, [r3, #16]
 80046f4:	2b3e      	cmp	r3, #62	; 0x3e
 80046f6:	d81a      	bhi.n	800472e <USB_EPStartXfer+0x11ae>
 80046f8:	463b      	mov	r3, r7
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	691b      	ldr	r3, [r3, #16]
 80046fe:	085b      	lsrs	r3, r3, #1
 8004700:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004704:	463b      	mov	r3, r7
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	691b      	ldr	r3, [r3, #16]
 800470a:	f003 0301 	and.w	r3, r3, #1
 800470e:	2b00      	cmp	r3, #0
 8004710:	d004      	beq.n	800471c <USB_EPStartXfer+0x119c>
 8004712:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004716:	3301      	adds	r3, #1
 8004718:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800471c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004720:	b29b      	uxth	r3, r3
 8004722:	029b      	lsls	r3, r3, #10
 8004724:	b29a      	uxth	r2, r3
 8004726:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800472a:	801a      	strh	r2, [r3, #0]
 800472c:	e041      	b.n	80047b2 <USB_EPStartXfer+0x1232>
 800472e:	463b      	mov	r3, r7
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	691b      	ldr	r3, [r3, #16]
 8004734:	095b      	lsrs	r3, r3, #5
 8004736:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800473a:	463b      	mov	r3, r7
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	691b      	ldr	r3, [r3, #16]
 8004740:	f003 031f 	and.w	r3, r3, #31
 8004744:	2b00      	cmp	r3, #0
 8004746:	d104      	bne.n	8004752 <USB_EPStartXfer+0x11d2>
 8004748:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800474c:	3b01      	subs	r3, #1
 800474e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004752:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004756:	b29b      	uxth	r3, r3
 8004758:	029b      	lsls	r3, r3, #10
 800475a:	b29b      	uxth	r3, r3
 800475c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004760:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004764:	b29a      	uxth	r2, r3
 8004766:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800476a:	801a      	strh	r2, [r3, #0]
 800476c:	e021      	b.n	80047b2 <USB_EPStartXfer+0x1232>
 800476e:	463b      	mov	r3, r7
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	785b      	ldrb	r3, [r3, #1]
 8004774:	2b01      	cmp	r3, #1
 8004776:	d11c      	bne.n	80047b2 <USB_EPStartXfer+0x1232>
 8004778:	1d3b      	adds	r3, r7, #4
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004780:	b29b      	uxth	r3, r3
 8004782:	461a      	mov	r2, r3
 8004784:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004788:	4413      	add	r3, r2
 800478a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800478e:	463b      	mov	r3, r7
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	781b      	ldrb	r3, [r3, #0]
 8004794:	011a      	lsls	r2, r3, #4
 8004796:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800479a:	4413      	add	r3, r2
 800479c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80047a0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80047a4:	463b      	mov	r3, r7
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	691b      	ldr	r3, [r3, #16]
 80047aa:	b29a      	uxth	r2, r3
 80047ac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80047b0:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80047b2:	463b      	mov	r3, r7
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	69db      	ldr	r3, [r3, #28]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	f000 81a4 	beq.w	8004b06 <USB_EPStartXfer+0x1586>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80047be:	1d3b      	adds	r3, r7, #4
 80047c0:	681a      	ldr	r2, [r3, #0]
 80047c2:	463b      	mov	r3, r7
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	781b      	ldrb	r3, [r3, #0]
 80047c8:	009b      	lsls	r3, r3, #2
 80047ca:	4413      	add	r3, r2
 80047cc:	881b      	ldrh	r3, [r3, #0]
 80047ce:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80047d2:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80047d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d005      	beq.n	80047ea <USB_EPStartXfer+0x126a>
 80047de:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80047e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d10d      	bne.n	8004806 <USB_EPStartXfer+0x1286>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80047ea:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80047ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	f040 8187 	bne.w	8004b06 <USB_EPStartXfer+0x1586>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80047f8:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80047fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004800:	2b00      	cmp	r3, #0
 8004802:	f040 8180 	bne.w	8004b06 <USB_EPStartXfer+0x1586>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8004806:	1d3b      	adds	r3, r7, #4
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	463b      	mov	r3, r7
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	781b      	ldrb	r3, [r3, #0]
 8004810:	009b      	lsls	r3, r3, #2
 8004812:	4413      	add	r3, r2
 8004814:	881b      	ldrh	r3, [r3, #0]
 8004816:	b29b      	uxth	r3, r3
 8004818:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800481c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004820:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8004824:	1d3b      	adds	r3, r7, #4
 8004826:	681a      	ldr	r2, [r3, #0]
 8004828:	463b      	mov	r3, r7
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	781b      	ldrb	r3, [r3, #0]
 800482e:	009b      	lsls	r3, r3, #2
 8004830:	441a      	add	r2, r3
 8004832:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8004836:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800483a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800483e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004842:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004846:	b29b      	uxth	r3, r3
 8004848:	8013      	strh	r3, [r2, #0]
 800484a:	e15c      	b.n	8004b06 <USB_EPStartXfer+0x1586>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800484c:	463b      	mov	r3, r7
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	78db      	ldrb	r3, [r3, #3]
 8004852:	2b01      	cmp	r3, #1
 8004854:	f040 8155 	bne.w	8004b02 <USB_EPStartXfer+0x1582>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8004858:	463b      	mov	r3, r7
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	699a      	ldr	r2, [r3, #24]
 800485e:	463b      	mov	r3, r7
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	691b      	ldr	r3, [r3, #16]
 8004864:	429a      	cmp	r2, r3
 8004866:	d90e      	bls.n	8004886 <USB_EPStartXfer+0x1306>
        {
          len = ep->maxpacket;
 8004868:	463b      	mov	r3, r7
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	691b      	ldr	r3, [r3, #16]
 800486e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8004872:	463b      	mov	r3, r7
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	699a      	ldr	r2, [r3, #24]
 8004878:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800487c:	1ad2      	subs	r2, r2, r3
 800487e:	463b      	mov	r3, r7
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	619a      	str	r2, [r3, #24]
 8004884:	e008      	b.n	8004898 <USB_EPStartXfer+0x1318>
        }
        else
        {
          len = ep->xfer_len;
 8004886:	463b      	mov	r3, r7
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	699b      	ldr	r3, [r3, #24]
 800488c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8004890:	463b      	mov	r3, r7
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	2200      	movs	r2, #0
 8004896:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8004898:	463b      	mov	r3, r7
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	785b      	ldrb	r3, [r3, #1]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d16f      	bne.n	8004982 <USB_EPStartXfer+0x1402>
 80048a2:	1d3b      	adds	r3, r7, #4
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80048aa:	1d3b      	adds	r3, r7, #4
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048b2:	b29b      	uxth	r3, r3
 80048b4:	461a      	mov	r2, r3
 80048b6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80048ba:	4413      	add	r3, r2
 80048bc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80048c0:	463b      	mov	r3, r7
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	781b      	ldrb	r3, [r3, #0]
 80048c6:	011a      	lsls	r2, r3, #4
 80048c8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80048cc:	4413      	add	r3, r2
 80048ce:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80048d2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80048d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d116      	bne.n	800490c <USB_EPStartXfer+0x138c>
 80048de:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80048e2:	881b      	ldrh	r3, [r3, #0]
 80048e4:	b29b      	uxth	r3, r3
 80048e6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80048ea:	b29a      	uxth	r2, r3
 80048ec:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80048f0:	801a      	strh	r2, [r3, #0]
 80048f2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80048f6:	881b      	ldrh	r3, [r3, #0]
 80048f8:	b29b      	uxth	r3, r3
 80048fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80048fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004902:	b29a      	uxth	r2, r3
 8004904:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004908:	801a      	strh	r2, [r3, #0]
 800490a:	e05f      	b.n	80049cc <USB_EPStartXfer+0x144c>
 800490c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004910:	2b3e      	cmp	r3, #62	; 0x3e
 8004912:	d818      	bhi.n	8004946 <USB_EPStartXfer+0x13c6>
 8004914:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004918:	085b      	lsrs	r3, r3, #1
 800491a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800491e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004922:	f003 0301 	and.w	r3, r3, #1
 8004926:	2b00      	cmp	r3, #0
 8004928:	d004      	beq.n	8004934 <USB_EPStartXfer+0x13b4>
 800492a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800492e:	3301      	adds	r3, #1
 8004930:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004934:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004938:	b29b      	uxth	r3, r3
 800493a:	029b      	lsls	r3, r3, #10
 800493c:	b29a      	uxth	r2, r3
 800493e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004942:	801a      	strh	r2, [r3, #0]
 8004944:	e042      	b.n	80049cc <USB_EPStartXfer+0x144c>
 8004946:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800494a:	095b      	lsrs	r3, r3, #5
 800494c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004950:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004954:	f003 031f 	and.w	r3, r3, #31
 8004958:	2b00      	cmp	r3, #0
 800495a:	d104      	bne.n	8004966 <USB_EPStartXfer+0x13e6>
 800495c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004960:	3b01      	subs	r3, #1
 8004962:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004966:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800496a:	b29b      	uxth	r3, r3
 800496c:	029b      	lsls	r3, r3, #10
 800496e:	b29b      	uxth	r3, r3
 8004970:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004974:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004978:	b29a      	uxth	r2, r3
 800497a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800497e:	801a      	strh	r2, [r3, #0]
 8004980:	e024      	b.n	80049cc <USB_EPStartXfer+0x144c>
 8004982:	463b      	mov	r3, r7
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	785b      	ldrb	r3, [r3, #1]
 8004988:	2b01      	cmp	r3, #1
 800498a:	d11f      	bne.n	80049cc <USB_EPStartXfer+0x144c>
 800498c:	1d3b      	adds	r3, r7, #4
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004994:	1d3b      	adds	r3, r7, #4
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800499c:	b29b      	uxth	r3, r3
 800499e:	461a      	mov	r2, r3
 80049a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049a4:	4413      	add	r3, r2
 80049a6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80049aa:	463b      	mov	r3, r7
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	781b      	ldrb	r3, [r3, #0]
 80049b0:	011a      	lsls	r2, r3, #4
 80049b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049b6:	4413      	add	r3, r2
 80049b8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80049bc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80049c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80049c4:	b29a      	uxth	r2, r3
 80049c6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80049ca:	801a      	strh	r2, [r3, #0]
 80049cc:	1d3b      	adds	r3, r7, #4
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80049d4:	463b      	mov	r3, r7
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	785b      	ldrb	r3, [r3, #1]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d16f      	bne.n	8004abe <USB_EPStartXfer+0x153e>
 80049de:	1d3b      	adds	r3, r7, #4
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80049e6:	1d3b      	adds	r3, r7, #4
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049ee:	b29b      	uxth	r3, r3
 80049f0:	461a      	mov	r2, r3
 80049f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80049f6:	4413      	add	r3, r2
 80049f8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80049fc:	463b      	mov	r3, r7
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	781b      	ldrb	r3, [r3, #0]
 8004a02:	011a      	lsls	r2, r3, #4
 8004a04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a08:	4413      	add	r3, r2
 8004a0a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004a0e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004a12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d116      	bne.n	8004a48 <USB_EPStartXfer+0x14c8>
 8004a1a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004a1e:	881b      	ldrh	r3, [r3, #0]
 8004a20:	b29b      	uxth	r3, r3
 8004a22:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004a26:	b29a      	uxth	r2, r3
 8004a28:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004a2c:	801a      	strh	r2, [r3, #0]
 8004a2e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004a32:	881b      	ldrh	r3, [r3, #0]
 8004a34:	b29b      	uxth	r3, r3
 8004a36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a3e:	b29a      	uxth	r2, r3
 8004a40:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004a44:	801a      	strh	r2, [r3, #0]
 8004a46:	e05e      	b.n	8004b06 <USB_EPStartXfer+0x1586>
 8004a48:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a4c:	2b3e      	cmp	r3, #62	; 0x3e
 8004a4e:	d818      	bhi.n	8004a82 <USB_EPStartXfer+0x1502>
 8004a50:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a54:	085b      	lsrs	r3, r3, #1
 8004a56:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004a5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a5e:	f003 0301 	and.w	r3, r3, #1
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d004      	beq.n	8004a70 <USB_EPStartXfer+0x14f0>
 8004a66:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004a6a:	3301      	adds	r3, #1
 8004a6c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004a70:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004a74:	b29b      	uxth	r3, r3
 8004a76:	029b      	lsls	r3, r3, #10
 8004a78:	b29a      	uxth	r2, r3
 8004a7a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004a7e:	801a      	strh	r2, [r3, #0]
 8004a80:	e041      	b.n	8004b06 <USB_EPStartXfer+0x1586>
 8004a82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a86:	095b      	lsrs	r3, r3, #5
 8004a88:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004a8c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a90:	f003 031f 	and.w	r3, r3, #31
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d104      	bne.n	8004aa2 <USB_EPStartXfer+0x1522>
 8004a98:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004a9c:	3b01      	subs	r3, #1
 8004a9e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004aa2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004aa6:	b29b      	uxth	r3, r3
 8004aa8:	029b      	lsls	r3, r3, #10
 8004aaa:	b29b      	uxth	r3, r3
 8004aac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ab0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ab4:	b29a      	uxth	r2, r3
 8004ab6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004aba:	801a      	strh	r2, [r3, #0]
 8004abc:	e023      	b.n	8004b06 <USB_EPStartXfer+0x1586>
 8004abe:	463b      	mov	r3, r7
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	785b      	ldrb	r3, [r3, #1]
 8004ac4:	2b01      	cmp	r3, #1
 8004ac6:	d11e      	bne.n	8004b06 <USB_EPStartXfer+0x1586>
 8004ac8:	1d3b      	adds	r3, r7, #4
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ad0:	b29b      	uxth	r3, r3
 8004ad2:	461a      	mov	r2, r3
 8004ad4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ad8:	4413      	add	r3, r2
 8004ada:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004ade:	463b      	mov	r3, r7
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	781b      	ldrb	r3, [r3, #0]
 8004ae4:	011a      	lsls	r2, r3, #4
 8004ae6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004aea:	4413      	add	r3, r2
 8004aec:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004af0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004af4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004af8:	b29a      	uxth	r2, r3
 8004afa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004afe:	801a      	strh	r2, [r3, #0]
 8004b00:	e001      	b.n	8004b06 <USB_EPStartXfer+0x1586>
      }
      else
      {
        return HAL_ERROR;
 8004b02:	2301      	movs	r3, #1
 8004b04:	e02e      	b.n	8004b64 <USB_EPStartXfer+0x15e4>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004b06:	1d3b      	adds	r3, r7, #4
 8004b08:	681a      	ldr	r2, [r3, #0]
 8004b0a:	463b      	mov	r3, r7
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	781b      	ldrb	r3, [r3, #0]
 8004b10:	009b      	lsls	r3, r3, #2
 8004b12:	4413      	add	r3, r2
 8004b14:	881b      	ldrh	r3, [r3, #0]
 8004b16:	b29b      	uxth	r3, r3
 8004b18:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b20:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8004b24:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8004b28:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004b2c:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8004b30:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8004b34:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004b38:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8004b3c:	1d3b      	adds	r3, r7, #4
 8004b3e:	681a      	ldr	r2, [r3, #0]
 8004b40:	463b      	mov	r3, r7
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	781b      	ldrb	r3, [r3, #0]
 8004b46:	009b      	lsls	r3, r3, #2
 8004b48:	441a      	add	r2, r3
 8004b4a:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8004b4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b5e:	b29b      	uxth	r3, r3
 8004b60:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8004b62:	2300      	movs	r3, #0
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}

08004b6e <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004b6e:	b480      	push	{r7}
 8004b70:	b085      	sub	sp, #20
 8004b72:	af00      	add	r7, sp, #0
 8004b74:	6078      	str	r0, [r7, #4]
 8004b76:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	785b      	ldrb	r3, [r3, #1]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d020      	beq.n	8004bc2 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8004b80:	687a      	ldr	r2, [r7, #4]
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	781b      	ldrb	r3, [r3, #0]
 8004b86:	009b      	lsls	r3, r3, #2
 8004b88:	4413      	add	r3, r2
 8004b8a:	881b      	ldrh	r3, [r3, #0]
 8004b8c:	b29b      	uxth	r3, r3
 8004b8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b96:	81bb      	strh	r3, [r7, #12]
 8004b98:	89bb      	ldrh	r3, [r7, #12]
 8004b9a:	f083 0310 	eor.w	r3, r3, #16
 8004b9e:	81bb      	strh	r3, [r7, #12]
 8004ba0:	687a      	ldr	r2, [r7, #4]
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	781b      	ldrb	r3, [r3, #0]
 8004ba6:	009b      	lsls	r3, r3, #2
 8004ba8:	441a      	add	r2, r3
 8004baa:	89bb      	ldrh	r3, [r7, #12]
 8004bac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bb0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bb4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bbc:	b29b      	uxth	r3, r3
 8004bbe:	8013      	strh	r3, [r2, #0]
 8004bc0:	e01f      	b.n	8004c02 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8004bc2:	687a      	ldr	r2, [r7, #4]
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	781b      	ldrb	r3, [r3, #0]
 8004bc8:	009b      	lsls	r3, r3, #2
 8004bca:	4413      	add	r3, r2
 8004bcc:	881b      	ldrh	r3, [r3, #0]
 8004bce:	b29b      	uxth	r3, r3
 8004bd0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004bd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bd8:	81fb      	strh	r3, [r7, #14]
 8004bda:	89fb      	ldrh	r3, [r7, #14]
 8004bdc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004be0:	81fb      	strh	r3, [r7, #14]
 8004be2:	687a      	ldr	r2, [r7, #4]
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	781b      	ldrb	r3, [r3, #0]
 8004be8:	009b      	lsls	r3, r3, #2
 8004bea:	441a      	add	r2, r3
 8004bec:	89fb      	ldrh	r3, [r7, #14]
 8004bee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bf2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bf6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bfe:	b29b      	uxth	r3, r3
 8004c00:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8004c02:	2300      	movs	r3, #0
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	3714      	adds	r7, #20
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bc80      	pop	{r7}
 8004c0c:	4770      	bx	lr

08004c0e <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004c0e:	b480      	push	{r7}
 8004c10:	b087      	sub	sp, #28
 8004c12:	af00      	add	r7, sp, #0
 8004c14:	6078      	str	r0, [r7, #4]
 8004c16:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	7b1b      	ldrb	r3, [r3, #12]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	f040 809d 	bne.w	8004d5c <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	785b      	ldrb	r3, [r3, #1]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d04c      	beq.n	8004cc4 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004c2a:	687a      	ldr	r2, [r7, #4]
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	781b      	ldrb	r3, [r3, #0]
 8004c30:	009b      	lsls	r3, r3, #2
 8004c32:	4413      	add	r3, r2
 8004c34:	881b      	ldrh	r3, [r3, #0]
 8004c36:	823b      	strh	r3, [r7, #16]
 8004c38:	8a3b      	ldrh	r3, [r7, #16]
 8004c3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d01b      	beq.n	8004c7a <USB_EPClearStall+0x6c>
 8004c42:	687a      	ldr	r2, [r7, #4]
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	781b      	ldrb	r3, [r3, #0]
 8004c48:	009b      	lsls	r3, r3, #2
 8004c4a:	4413      	add	r3, r2
 8004c4c:	881b      	ldrh	r3, [r3, #0]
 8004c4e:	b29b      	uxth	r3, r3
 8004c50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c58:	81fb      	strh	r3, [r7, #14]
 8004c5a:	687a      	ldr	r2, [r7, #4]
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	781b      	ldrb	r3, [r3, #0]
 8004c60:	009b      	lsls	r3, r3, #2
 8004c62:	441a      	add	r2, r3
 8004c64:	89fb      	ldrh	r3, [r7, #14]
 8004c66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c72:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004c76:	b29b      	uxth	r3, r3
 8004c78:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	78db      	ldrb	r3, [r3, #3]
 8004c7e:	2b01      	cmp	r3, #1
 8004c80:	d06c      	beq.n	8004d5c <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004c82:	687a      	ldr	r2, [r7, #4]
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	781b      	ldrb	r3, [r3, #0]
 8004c88:	009b      	lsls	r3, r3, #2
 8004c8a:	4413      	add	r3, r2
 8004c8c:	881b      	ldrh	r3, [r3, #0]
 8004c8e:	b29b      	uxth	r3, r3
 8004c90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c98:	81bb      	strh	r3, [r7, #12]
 8004c9a:	89bb      	ldrh	r3, [r7, #12]
 8004c9c:	f083 0320 	eor.w	r3, r3, #32
 8004ca0:	81bb      	strh	r3, [r7, #12]
 8004ca2:	687a      	ldr	r2, [r7, #4]
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	781b      	ldrb	r3, [r3, #0]
 8004ca8:	009b      	lsls	r3, r3, #2
 8004caa:	441a      	add	r2, r3
 8004cac:	89bb      	ldrh	r3, [r7, #12]
 8004cae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cb2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cbe:	b29b      	uxth	r3, r3
 8004cc0:	8013      	strh	r3, [r2, #0]
 8004cc2:	e04b      	b.n	8004d5c <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004cc4:	687a      	ldr	r2, [r7, #4]
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	781b      	ldrb	r3, [r3, #0]
 8004cca:	009b      	lsls	r3, r3, #2
 8004ccc:	4413      	add	r3, r2
 8004cce:	881b      	ldrh	r3, [r3, #0]
 8004cd0:	82fb      	strh	r3, [r7, #22]
 8004cd2:	8afb      	ldrh	r3, [r7, #22]
 8004cd4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d01b      	beq.n	8004d14 <USB_EPClearStall+0x106>
 8004cdc:	687a      	ldr	r2, [r7, #4]
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	781b      	ldrb	r3, [r3, #0]
 8004ce2:	009b      	lsls	r3, r3, #2
 8004ce4:	4413      	add	r3, r2
 8004ce6:	881b      	ldrh	r3, [r3, #0]
 8004ce8:	b29b      	uxth	r3, r3
 8004cea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cf2:	82bb      	strh	r3, [r7, #20]
 8004cf4:	687a      	ldr	r2, [r7, #4]
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	781b      	ldrb	r3, [r3, #0]
 8004cfa:	009b      	lsls	r3, r3, #2
 8004cfc:	441a      	add	r2, r3
 8004cfe:	8abb      	ldrh	r3, [r7, #20]
 8004d00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d08:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004d0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d10:	b29b      	uxth	r3, r3
 8004d12:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004d14:	687a      	ldr	r2, [r7, #4]
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	781b      	ldrb	r3, [r3, #0]
 8004d1a:	009b      	lsls	r3, r3, #2
 8004d1c:	4413      	add	r3, r2
 8004d1e:	881b      	ldrh	r3, [r3, #0]
 8004d20:	b29b      	uxth	r3, r3
 8004d22:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d2a:	827b      	strh	r3, [r7, #18]
 8004d2c:	8a7b      	ldrh	r3, [r7, #18]
 8004d2e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004d32:	827b      	strh	r3, [r7, #18]
 8004d34:	8a7b      	ldrh	r3, [r7, #18]
 8004d36:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004d3a:	827b      	strh	r3, [r7, #18]
 8004d3c:	687a      	ldr	r2, [r7, #4]
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	781b      	ldrb	r3, [r3, #0]
 8004d42:	009b      	lsls	r3, r3, #2
 8004d44:	441a      	add	r2, r3
 8004d46:	8a7b      	ldrh	r3, [r7, #18]
 8004d48:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d4c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d58:	b29b      	uxth	r3, r3
 8004d5a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004d5c:	2300      	movs	r3, #0
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	371c      	adds	r7, #28
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bc80      	pop	{r7}
 8004d66:	4770      	bx	lr

08004d68 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b083      	sub	sp, #12
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
 8004d70:	460b      	mov	r3, r1
 8004d72:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8004d74:	78fb      	ldrb	r3, [r7, #3]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d103      	bne.n	8004d82 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2280      	movs	r2, #128	; 0x80
 8004d7e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8004d82:	2300      	movs	r3, #0
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	370c      	adds	r7, #12
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bc80      	pop	{r7}
 8004d8c:	4770      	bx	lr

08004d8e <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8004d8e:	b480      	push	{r7}
 8004d90:	b083      	sub	sp, #12
 8004d92:	af00      	add	r7, sp, #0
 8004d94:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004d96:	2300      	movs	r3, #0
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	370c      	adds	r7, #12
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bc80      	pop	{r7}
 8004da0:	4770      	bx	lr

08004da2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8004da2:	b480      	push	{r7}
 8004da4:	b083      	sub	sp, #12
 8004da6:	af00      	add	r7, sp, #0
 8004da8:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004daa:	2300      	movs	r3, #0
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	370c      	adds	r7, #12
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bc80      	pop	{r7}
 8004db4:	4770      	bx	lr

08004db6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8004db6:	b480      	push	{r7}
 8004db8:	b085      	sub	sp, #20
 8004dba:	af00      	add	r7, sp, #0
 8004dbc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004dc4:	b29b      	uxth	r3, r3
 8004dc6:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
}
 8004dca:	4618      	mov	r0, r3
 8004dcc:	3714      	adds	r7, #20
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bc80      	pop	{r7}
 8004dd2:	4770      	bx	lr

08004dd4 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b083      	sub	sp, #12
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
 8004ddc:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004dde:	2300      	movs	r3, #0
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	370c      	adds	r7, #12
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bc80      	pop	{r7}
 8004de8:	4770      	bx	lr

08004dea <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8004dea:	b480      	push	{r7}
 8004dec:	b08d      	sub	sp, #52	; 0x34
 8004dee:	af00      	add	r7, sp, #0
 8004df0:	60f8      	str	r0, [r7, #12]
 8004df2:	60b9      	str	r1, [r7, #8]
 8004df4:	4611      	mov	r1, r2
 8004df6:	461a      	mov	r2, r3
 8004df8:	460b      	mov	r3, r1
 8004dfa:	80fb      	strh	r3, [r7, #6]
 8004dfc:	4613      	mov	r3, r2
 8004dfe:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8004e00:	88bb      	ldrh	r3, [r7, #4]
 8004e02:	3301      	adds	r3, #1
 8004e04:	085b      	lsrs	r3, r3, #1
 8004e06:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004e10:	88fb      	ldrh	r3, [r7, #6]
 8004e12:	005a      	lsls	r2, r3, #1
 8004e14:	69fb      	ldr	r3, [r7, #28]
 8004e16:	4413      	add	r3, r2
 8004e18:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e1c:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8004e1e:	6a3b      	ldr	r3, [r7, #32]
 8004e20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e22:	e01e      	b.n	8004e62 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8004e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e26:	781b      	ldrb	r3, [r3, #0]
 8004e28:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8004e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e2c:	3301      	adds	r3, #1
 8004e2e:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8004e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e32:	781b      	ldrb	r3, [r3, #0]
 8004e34:	b29b      	uxth	r3, r3
 8004e36:	021b      	lsls	r3, r3, #8
 8004e38:	b29b      	uxth	r3, r3
 8004e3a:	461a      	mov	r2, r3
 8004e3c:	69bb      	ldr	r3, [r7, #24]
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	b29a      	uxth	r2, r3
 8004e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e48:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8004e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e4c:	3302      	adds	r3, #2
 8004e4e:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8004e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e52:	3302      	adds	r3, #2
 8004e54:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8004e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e58:	3301      	adds	r3, #1
 8004e5a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8004e5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e5e:	3b01      	subs	r3, #1
 8004e60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d1dd      	bne.n	8004e24 <USB_WritePMA+0x3a>
  }
}
 8004e68:	bf00      	nop
 8004e6a:	bf00      	nop
 8004e6c:	3734      	adds	r7, #52	; 0x34
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bc80      	pop	{r7}
 8004e72:	4770      	bx	lr

08004e74 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b08b      	sub	sp, #44	; 0x2c
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	60f8      	str	r0, [r7, #12]
 8004e7c:	60b9      	str	r1, [r7, #8]
 8004e7e:	4611      	mov	r1, r2
 8004e80:	461a      	mov	r2, r3
 8004e82:	460b      	mov	r3, r1
 8004e84:	80fb      	strh	r3, [r7, #6]
 8004e86:	4613      	mov	r3, r2
 8004e88:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8004e8a:	88bb      	ldrh	r3, [r7, #4]
 8004e8c:	085b      	lsrs	r3, r3, #1
 8004e8e:	b29b      	uxth	r3, r3
 8004e90:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004e9a:	88fb      	ldrh	r3, [r7, #6]
 8004e9c:	005a      	lsls	r2, r3, #1
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	4413      	add	r3, r2
 8004ea2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ea6:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8004ea8:	69bb      	ldr	r3, [r7, #24]
 8004eaa:	627b      	str	r3, [r7, #36]	; 0x24
 8004eac:	e01b      	b.n	8004ee6 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8004eae:	6a3b      	ldr	r3, [r7, #32]
 8004eb0:	881b      	ldrh	r3, [r3, #0]
 8004eb2:	b29b      	uxth	r3, r3
 8004eb4:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8004eb6:	6a3b      	ldr	r3, [r7, #32]
 8004eb8:	3302      	adds	r3, #2
 8004eba:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	b2da      	uxtb	r2, r3
 8004ec0:	69fb      	ldr	r3, [r7, #28]
 8004ec2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8004ec4:	69fb      	ldr	r3, [r7, #28]
 8004ec6:	3301      	adds	r3, #1
 8004ec8:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	0a1b      	lsrs	r3, r3, #8
 8004ece:	b2da      	uxtb	r2, r3
 8004ed0:	69fb      	ldr	r3, [r7, #28]
 8004ed2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8004ed4:	69fb      	ldr	r3, [r7, #28]
 8004ed6:	3301      	adds	r3, #1
 8004ed8:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8004eda:	6a3b      	ldr	r3, [r7, #32]
 8004edc:	3302      	adds	r3, #2
 8004ede:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8004ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee2:	3b01      	subs	r3, #1
 8004ee4:	627b      	str	r3, [r7, #36]	; 0x24
 8004ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d1e0      	bne.n	8004eae <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8004eec:	88bb      	ldrh	r3, [r7, #4]
 8004eee:	f003 0301 	and.w	r3, r3, #1
 8004ef2:	b29b      	uxth	r3, r3
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d007      	beq.n	8004f08 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8004ef8:	6a3b      	ldr	r3, [r7, #32]
 8004efa:	881b      	ldrh	r3, [r3, #0]
 8004efc:	b29b      	uxth	r3, r3
 8004efe:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	b2da      	uxtb	r2, r3
 8004f04:	69fb      	ldr	r3, [r7, #28]
 8004f06:	701a      	strb	r2, [r3, #0]
  }
}
 8004f08:	bf00      	nop
 8004f0a:	372c      	adds	r7, #44	; 0x2c
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bc80      	pop	{r7}
 8004f10:	4770      	bx	lr

08004f12 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004f12:	b580      	push	{r7, lr}
 8004f14:	b084      	sub	sp, #16
 8004f16:	af00      	add	r7, sp, #0
 8004f18:	6078      	str	r0, [r7, #4]
 8004f1a:	460b      	mov	r3, r1
 8004f1c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8004f1e:	2300      	movs	r3, #0
 8004f20:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	7c1b      	ldrb	r3, [r3, #16]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d115      	bne.n	8004f56 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004f2a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004f2e:	2202      	movs	r2, #2
 8004f30:	2181      	movs	r1, #129	; 0x81
 8004f32:	6878      	ldr	r0, [r7, #4]
 8004f34:	f001 fea7 	bl	8006c86 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004f3e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004f42:	2202      	movs	r2, #2
 8004f44:	2101      	movs	r1, #1
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	f001 fe9d 	bl	8006c86 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2201      	movs	r2, #1
 8004f50:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8004f54:	e012      	b.n	8004f7c <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004f56:	2340      	movs	r3, #64	; 0x40
 8004f58:	2202      	movs	r2, #2
 8004f5a:	2181      	movs	r1, #129	; 0x81
 8004f5c:	6878      	ldr	r0, [r7, #4]
 8004f5e:	f001 fe92 	bl	8006c86 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2201      	movs	r2, #1
 8004f66:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004f68:	2340      	movs	r3, #64	; 0x40
 8004f6a:	2202      	movs	r2, #2
 8004f6c:	2101      	movs	r1, #1
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f001 fe89 	bl	8006c86 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2201      	movs	r2, #1
 8004f78:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004f7c:	2308      	movs	r3, #8
 8004f7e:	2203      	movs	r2, #3
 8004f80:	2182      	movs	r1, #130	; 0x82
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	f001 fe7f 	bl	8006c86 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004f8e:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004f92:	f001 ff9f 	bl	8006ed4 <USBD_static_malloc>
 8004f96:	4602      	mov	r2, r0
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d102      	bne.n	8004fae <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	73fb      	strb	r3, [r7, #15]
 8004fac:	e026      	b.n	8004ffc <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004fb4:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	7c1b      	ldrb	r3, [r3, #16]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d109      	bne.n	8004fec <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004fde:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004fe2:	2101      	movs	r1, #1
 8004fe4:	6878      	ldr	r0, [r7, #4]
 8004fe6:	f001 ff3f 	bl	8006e68 <USBD_LL_PrepareReceive>
 8004fea:	e007      	b.n	8004ffc <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004ff2:	2340      	movs	r3, #64	; 0x40
 8004ff4:	2101      	movs	r1, #1
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f001 ff36 	bl	8006e68 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8004ffc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	3710      	adds	r7, #16
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}

08005006 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005006:	b580      	push	{r7, lr}
 8005008:	b084      	sub	sp, #16
 800500a:	af00      	add	r7, sp, #0
 800500c:	6078      	str	r0, [r7, #4]
 800500e:	460b      	mov	r3, r1
 8005010:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8005012:	2300      	movs	r3, #0
 8005014:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005016:	2181      	movs	r1, #129	; 0x81
 8005018:	6878      	ldr	r0, [r7, #4]
 800501a:	f001 fe5a 	bl	8006cd2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2200      	movs	r2, #0
 8005022:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005024:	2101      	movs	r1, #1
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f001 fe53 	bl	8006cd2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2200      	movs	r2, #0
 8005030:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005034:	2182      	movs	r1, #130	; 0x82
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f001 fe4b 	bl	8006cd2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2200      	movs	r2, #0
 8005040:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005048:	2b00      	cmp	r3, #0
 800504a:	d00e      	beq.n	800506a <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800505c:	4618      	mov	r0, r3
 800505e:	f001 ff45 	bl	8006eec <USBD_static_free>
    pdev->pClassData = NULL;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2200      	movs	r2, #0
 8005066:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800506a:	7bfb      	ldrb	r3, [r7, #15]
}
 800506c:	4618      	mov	r0, r3
 800506e:	3710      	adds	r7, #16
 8005070:	46bd      	mov	sp, r7
 8005072:	bd80      	pop	{r7, pc}

08005074 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b086      	sub	sp, #24
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
 800507c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005084:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8005086:	2300      	movs	r3, #0
 8005088:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800508a:	2300      	movs	r3, #0
 800508c:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800508e:	2300      	movs	r3, #0
 8005090:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	781b      	ldrb	r3, [r3, #0]
 8005096:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800509a:	2b00      	cmp	r3, #0
 800509c:	d039      	beq.n	8005112 <USBD_CDC_Setup+0x9e>
 800509e:	2b20      	cmp	r3, #32
 80050a0:	d17f      	bne.n	80051a2 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	88db      	ldrh	r3, [r3, #6]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d029      	beq.n	80050fe <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	781b      	ldrb	r3, [r3, #0]
 80050ae:	b25b      	sxtb	r3, r3
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	da11      	bge.n	80050d8 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	683a      	ldr	r2, [r7, #0]
 80050be:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80050c0:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80050c2:	683a      	ldr	r2, [r7, #0]
 80050c4:	88d2      	ldrh	r2, [r2, #6]
 80050c6:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80050c8:	6939      	ldr	r1, [r7, #16]
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	88db      	ldrh	r3, [r3, #6]
 80050ce:	461a      	mov	r2, r3
 80050d0:	6878      	ldr	r0, [r7, #4]
 80050d2:	f001 fa0a 	bl	80064ea <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80050d6:	e06b      	b.n	80051b0 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	785a      	ldrb	r2, [r3, #1]
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	88db      	ldrh	r3, [r3, #6]
 80050e6:	b2da      	uxtb	r2, r3
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80050ee:	6939      	ldr	r1, [r7, #16]
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	88db      	ldrh	r3, [r3, #6]
 80050f4:	461a      	mov	r2, r3
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f001 fa25 	bl	8006546 <USBD_CtlPrepareRx>
      break;
 80050fc:	e058      	b.n	80051b0 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005104:	689b      	ldr	r3, [r3, #8]
 8005106:	683a      	ldr	r2, [r7, #0]
 8005108:	7850      	ldrb	r0, [r2, #1]
 800510a:	2200      	movs	r2, #0
 800510c:	6839      	ldr	r1, [r7, #0]
 800510e:	4798      	blx	r3
      break;
 8005110:	e04e      	b.n	80051b0 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	785b      	ldrb	r3, [r3, #1]
 8005116:	2b0b      	cmp	r3, #11
 8005118:	d02e      	beq.n	8005178 <USBD_CDC_Setup+0x104>
 800511a:	2b0b      	cmp	r3, #11
 800511c:	dc38      	bgt.n	8005190 <USBD_CDC_Setup+0x11c>
 800511e:	2b00      	cmp	r3, #0
 8005120:	d002      	beq.n	8005128 <USBD_CDC_Setup+0xb4>
 8005122:	2b0a      	cmp	r3, #10
 8005124:	d014      	beq.n	8005150 <USBD_CDC_Setup+0xdc>
 8005126:	e033      	b.n	8005190 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800512e:	2b03      	cmp	r3, #3
 8005130:	d107      	bne.n	8005142 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8005132:	f107 030c 	add.w	r3, r7, #12
 8005136:	2202      	movs	r2, #2
 8005138:	4619      	mov	r1, r3
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	f001 f9d5 	bl	80064ea <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005140:	e02e      	b.n	80051a0 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8005142:	6839      	ldr	r1, [r7, #0]
 8005144:	6878      	ldr	r0, [r7, #4]
 8005146:	f001 f966 	bl	8006416 <USBD_CtlError>
            ret = USBD_FAIL;
 800514a:	2302      	movs	r3, #2
 800514c:	75fb      	strb	r3, [r7, #23]
          break;
 800514e:	e027      	b.n	80051a0 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005156:	2b03      	cmp	r3, #3
 8005158:	d107      	bne.n	800516a <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800515a:	f107 030f 	add.w	r3, r7, #15
 800515e:	2201      	movs	r2, #1
 8005160:	4619      	mov	r1, r3
 8005162:	6878      	ldr	r0, [r7, #4]
 8005164:	f001 f9c1 	bl	80064ea <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005168:	e01a      	b.n	80051a0 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800516a:	6839      	ldr	r1, [r7, #0]
 800516c:	6878      	ldr	r0, [r7, #4]
 800516e:	f001 f952 	bl	8006416 <USBD_CtlError>
            ret = USBD_FAIL;
 8005172:	2302      	movs	r3, #2
 8005174:	75fb      	strb	r3, [r7, #23]
          break;
 8005176:	e013      	b.n	80051a0 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800517e:	2b03      	cmp	r3, #3
 8005180:	d00d      	beq.n	800519e <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8005182:	6839      	ldr	r1, [r7, #0]
 8005184:	6878      	ldr	r0, [r7, #4]
 8005186:	f001 f946 	bl	8006416 <USBD_CtlError>
            ret = USBD_FAIL;
 800518a:	2302      	movs	r3, #2
 800518c:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800518e:	e006      	b.n	800519e <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8005190:	6839      	ldr	r1, [r7, #0]
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f001 f93f 	bl	8006416 <USBD_CtlError>
          ret = USBD_FAIL;
 8005198:	2302      	movs	r3, #2
 800519a:	75fb      	strb	r3, [r7, #23]
          break;
 800519c:	e000      	b.n	80051a0 <USBD_CDC_Setup+0x12c>
          break;
 800519e:	bf00      	nop
      }
      break;
 80051a0:	e006      	b.n	80051b0 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80051a2:	6839      	ldr	r1, [r7, #0]
 80051a4:	6878      	ldr	r0, [r7, #4]
 80051a6:	f001 f936 	bl	8006416 <USBD_CtlError>
      ret = USBD_FAIL;
 80051aa:	2302      	movs	r3, #2
 80051ac:	75fb      	strb	r3, [r7, #23]
      break;
 80051ae:	bf00      	nop
  }

  return ret;
 80051b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	3718      	adds	r7, #24
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}

080051ba <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80051ba:	b580      	push	{r7, lr}
 80051bc:	b084      	sub	sp, #16
 80051be:	af00      	add	r7, sp, #0
 80051c0:	6078      	str	r0, [r7, #4]
 80051c2:	460b      	mov	r3, r1
 80051c4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80051cc:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80051d4:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d03a      	beq.n	8005256 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80051e0:	78fa      	ldrb	r2, [r7, #3]
 80051e2:	6879      	ldr	r1, [r7, #4]
 80051e4:	4613      	mov	r3, r2
 80051e6:	009b      	lsls	r3, r3, #2
 80051e8:	4413      	add	r3, r2
 80051ea:	009b      	lsls	r3, r3, #2
 80051ec:	440b      	add	r3, r1
 80051ee:	331c      	adds	r3, #28
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d029      	beq.n	800524a <USBD_CDC_DataIn+0x90>
 80051f6:	78fa      	ldrb	r2, [r7, #3]
 80051f8:	6879      	ldr	r1, [r7, #4]
 80051fa:	4613      	mov	r3, r2
 80051fc:	009b      	lsls	r3, r3, #2
 80051fe:	4413      	add	r3, r2
 8005200:	009b      	lsls	r3, r3, #2
 8005202:	440b      	add	r3, r1
 8005204:	331c      	adds	r3, #28
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	78f9      	ldrb	r1, [r7, #3]
 800520a:	68b8      	ldr	r0, [r7, #8]
 800520c:	460b      	mov	r3, r1
 800520e:	009b      	lsls	r3, r3, #2
 8005210:	440b      	add	r3, r1
 8005212:	00db      	lsls	r3, r3, #3
 8005214:	4403      	add	r3, r0
 8005216:	3338      	adds	r3, #56	; 0x38
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	fbb2 f1f3 	udiv	r1, r2, r3
 800521e:	fb03 f301 	mul.w	r3, r3, r1
 8005222:	1ad3      	subs	r3, r2, r3
 8005224:	2b00      	cmp	r3, #0
 8005226:	d110      	bne.n	800524a <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8005228:	78fa      	ldrb	r2, [r7, #3]
 800522a:	6879      	ldr	r1, [r7, #4]
 800522c:	4613      	mov	r3, r2
 800522e:	009b      	lsls	r3, r3, #2
 8005230:	4413      	add	r3, r2
 8005232:	009b      	lsls	r3, r3, #2
 8005234:	440b      	add	r3, r1
 8005236:	331c      	adds	r3, #28
 8005238:	2200      	movs	r2, #0
 800523a:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800523c:	78f9      	ldrb	r1, [r7, #3]
 800523e:	2300      	movs	r3, #0
 8005240:	2200      	movs	r2, #0
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	f001 fded 	bl	8006e22 <USBD_LL_Transmit>
 8005248:	e003      	b.n	8005252 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	2200      	movs	r2, #0
 800524e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8005252:	2300      	movs	r3, #0
 8005254:	e000      	b.n	8005258 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8005256:	2302      	movs	r3, #2
  }
}
 8005258:	4618      	mov	r0, r3
 800525a:	3710      	adds	r7, #16
 800525c:	46bd      	mov	sp, r7
 800525e:	bd80      	pop	{r7, pc}

08005260 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b084      	sub	sp, #16
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
 8005268:	460b      	mov	r3, r1
 800526a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005272:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005274:	78fb      	ldrb	r3, [r7, #3]
 8005276:	4619      	mov	r1, r3
 8005278:	6878      	ldr	r0, [r7, #4]
 800527a:	f001 fe18 	bl	8006eae <USBD_LL_GetRxDataSize>
 800527e:	4602      	mov	r2, r0
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800528c:	2b00      	cmp	r3, #0
 800528e:	d00d      	beq.n	80052ac <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005296:	68db      	ldr	r3, [r3, #12]
 8005298:	68fa      	ldr	r2, [r7, #12]
 800529a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800529e:	68fa      	ldr	r2, [r7, #12]
 80052a0:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80052a4:	4611      	mov	r1, r2
 80052a6:	4798      	blx	r3

    return USBD_OK;
 80052a8:	2300      	movs	r3, #0
 80052aa:	e000      	b.n	80052ae <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80052ac:	2302      	movs	r3, #2
  }
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	3710      	adds	r7, #16
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}

080052b6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80052b6:	b580      	push	{r7, lr}
 80052b8:	b084      	sub	sp, #16
 80052ba:	af00      	add	r7, sp, #0
 80052bc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052c4:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d015      	beq.n	80052fc <USBD_CDC_EP0_RxReady+0x46>
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80052d6:	2bff      	cmp	r3, #255	; 0xff
 80052d8:	d010      	beq.n	80052fc <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80052e0:	689b      	ldr	r3, [r3, #8]
 80052e2:	68fa      	ldr	r2, [r7, #12]
 80052e4:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80052e8:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80052ea:	68fa      	ldr	r2, [r7, #12]
 80052ec:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80052f0:	b292      	uxth	r2, r2
 80052f2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	22ff      	movs	r2, #255	; 0xff
 80052f8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80052fc:	2300      	movs	r3, #0
}
 80052fe:	4618      	mov	r0, r3
 8005300:	3710      	adds	r7, #16
 8005302:	46bd      	mov	sp, r7
 8005304:	bd80      	pop	{r7, pc}
	...

08005308 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005308:	b480      	push	{r7}
 800530a:	b083      	sub	sp, #12
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2243      	movs	r2, #67	; 0x43
 8005314:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8005316:	4b03      	ldr	r3, [pc, #12]	; (8005324 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005318:	4618      	mov	r0, r3
 800531a:	370c      	adds	r7, #12
 800531c:	46bd      	mov	sp, r7
 800531e:	bc80      	pop	{r7}
 8005320:	4770      	bx	lr
 8005322:	bf00      	nop
 8005324:	200000a8 	.word	0x200000a8

08005328 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005328:	b480      	push	{r7}
 800532a:	b083      	sub	sp, #12
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2243      	movs	r2, #67	; 0x43
 8005334:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8005336:	4b03      	ldr	r3, [pc, #12]	; (8005344 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005338:	4618      	mov	r0, r3
 800533a:	370c      	adds	r7, #12
 800533c:	46bd      	mov	sp, r7
 800533e:	bc80      	pop	{r7}
 8005340:	4770      	bx	lr
 8005342:	bf00      	nop
 8005344:	20000064 	.word	0x20000064

08005348 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005348:	b480      	push	{r7}
 800534a:	b083      	sub	sp, #12
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2243      	movs	r2, #67	; 0x43
 8005354:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8005356:	4b03      	ldr	r3, [pc, #12]	; (8005364 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005358:	4618      	mov	r0, r3
 800535a:	370c      	adds	r7, #12
 800535c:	46bd      	mov	sp, r7
 800535e:	bc80      	pop	{r7}
 8005360:	4770      	bx	lr
 8005362:	bf00      	nop
 8005364:	200000ec 	.word	0x200000ec

08005368 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005368:	b480      	push	{r7}
 800536a:	b083      	sub	sp, #12
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	220a      	movs	r2, #10
 8005374:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8005376:	4b03      	ldr	r3, [pc, #12]	; (8005384 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005378:	4618      	mov	r0, r3
 800537a:	370c      	adds	r7, #12
 800537c:	46bd      	mov	sp, r7
 800537e:	bc80      	pop	{r7}
 8005380:	4770      	bx	lr
 8005382:	bf00      	nop
 8005384:	20000020 	.word	0x20000020

08005388 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8005388:	b480      	push	{r7}
 800538a:	b085      	sub	sp, #20
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
 8005390:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8005392:	2302      	movs	r3, #2
 8005394:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d005      	beq.n	80053a8 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	683a      	ldr	r2, [r7, #0]
 80053a0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 80053a4:	2300      	movs	r3, #0
 80053a6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80053a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	3714      	adds	r7, #20
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bc80      	pop	{r7}
 80053b2:	4770      	bx	lr

080053b4 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80053b4:	b480      	push	{r7}
 80053b6:	b087      	sub	sp, #28
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	60f8      	str	r0, [r7, #12]
 80053bc:	60b9      	str	r1, [r7, #8]
 80053be:	4613      	mov	r3, r2
 80053c0:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80053c8:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	68ba      	ldr	r2, [r7, #8]
 80053ce:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80053d2:	88fa      	ldrh	r2, [r7, #6]
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80053da:	2300      	movs	r3, #0
}
 80053dc:	4618      	mov	r0, r3
 80053de:	371c      	adds	r7, #28
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bc80      	pop	{r7}
 80053e4:	4770      	bx	lr

080053e6 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80053e6:	b480      	push	{r7}
 80053e8:	b085      	sub	sp, #20
 80053ea:	af00      	add	r7, sp, #0
 80053ec:	6078      	str	r0, [r7, #4]
 80053ee:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80053f6:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	683a      	ldr	r2, [r7, #0]
 80053fc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8005400:	2300      	movs	r3, #0
}
 8005402:	4618      	mov	r0, r3
 8005404:	3714      	adds	r7, #20
 8005406:	46bd      	mov	sp, r7
 8005408:	bc80      	pop	{r7}
 800540a:	4770      	bx	lr

0800540c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b084      	sub	sp, #16
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800541a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005422:	2b00      	cmp	r3, #0
 8005424:	d01c      	beq.n	8005460 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800542c:	2b00      	cmp	r3, #0
 800542e:	d115      	bne.n	800545c <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2201      	movs	r2, #1
 8005434:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800544e:	b29b      	uxth	r3, r3
 8005450:	2181      	movs	r1, #129	; 0x81
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f001 fce5 	bl	8006e22 <USBD_LL_Transmit>

      return USBD_OK;
 8005458:	2300      	movs	r3, #0
 800545a:	e002      	b.n	8005462 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800545c:	2301      	movs	r3, #1
 800545e:	e000      	b.n	8005462 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8005460:	2302      	movs	r3, #2
  }
}
 8005462:	4618      	mov	r0, r3
 8005464:	3710      	adds	r7, #16
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}

0800546a <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800546a:	b580      	push	{r7, lr}
 800546c:	b084      	sub	sp, #16
 800546e:	af00      	add	r7, sp, #0
 8005470:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005478:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005480:	2b00      	cmp	r3, #0
 8005482:	d017      	beq.n	80054b4 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	7c1b      	ldrb	r3, [r3, #16]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d109      	bne.n	80054a0 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005492:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005496:	2101      	movs	r1, #1
 8005498:	6878      	ldr	r0, [r7, #4]
 800549a:	f001 fce5 	bl	8006e68 <USBD_LL_PrepareReceive>
 800549e:	e007      	b.n	80054b0 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80054a6:	2340      	movs	r3, #64	; 0x40
 80054a8:	2101      	movs	r1, #1
 80054aa:	6878      	ldr	r0, [r7, #4]
 80054ac:	f001 fcdc 	bl	8006e68 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80054b0:	2300      	movs	r3, #0
 80054b2:	e000      	b.n	80054b6 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80054b4:	2302      	movs	r3, #2
  }
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	3710      	adds	r7, #16
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}

080054be <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80054be:	b580      	push	{r7, lr}
 80054c0:	b084      	sub	sp, #16
 80054c2:	af00      	add	r7, sp, #0
 80054c4:	60f8      	str	r0, [r7, #12]
 80054c6:	60b9      	str	r1, [r7, #8]
 80054c8:	4613      	mov	r3, r2
 80054ca:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d101      	bne.n	80054d6 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80054d2:	2302      	movs	r3, #2
 80054d4:	e01a      	b.n	800550c <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d003      	beq.n	80054e8 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	2200      	movs	r2, #0
 80054e4:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d003      	beq.n	80054f6 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	68ba      	ldr	r2, [r7, #8]
 80054f2:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	2201      	movs	r2, #1
 80054fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	79fa      	ldrb	r2, [r7, #7]
 8005502:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8005504:	68f8      	ldr	r0, [r7, #12]
 8005506:	f001 fb49 	bl	8006b9c <USBD_LL_Init>

  return USBD_OK;
 800550a:	2300      	movs	r3, #0
}
 800550c:	4618      	mov	r0, r3
 800550e:	3710      	adds	r7, #16
 8005510:	46bd      	mov	sp, r7
 8005512:	bd80      	pop	{r7, pc}

08005514 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005514:	b480      	push	{r7}
 8005516:	b085      	sub	sp, #20
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
 800551c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800551e:	2300      	movs	r3, #0
 8005520:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d006      	beq.n	8005536 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	683a      	ldr	r2, [r7, #0]
 800552c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8005530:	2300      	movs	r3, #0
 8005532:	73fb      	strb	r3, [r7, #15]
 8005534:	e001      	b.n	800553a <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8005536:	2302      	movs	r3, #2
 8005538:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800553a:	7bfb      	ldrb	r3, [r7, #15]
}
 800553c:	4618      	mov	r0, r3
 800553e:	3714      	adds	r7, #20
 8005540:	46bd      	mov	sp, r7
 8005542:	bc80      	pop	{r7}
 8005544:	4770      	bx	lr

08005546 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005546:	b580      	push	{r7, lr}
 8005548:	b082      	sub	sp, #8
 800554a:	af00      	add	r7, sp, #0
 800554c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	f001 fb7e 	bl	8006c50 <USBD_LL_Start>

  return USBD_OK;
 8005554:	2300      	movs	r3, #0
}
 8005556:	4618      	mov	r0, r3
 8005558:	3708      	adds	r7, #8
 800555a:	46bd      	mov	sp, r7
 800555c:	bd80      	pop	{r7, pc}

0800555e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800555e:	b480      	push	{r7}
 8005560:	b083      	sub	sp, #12
 8005562:	af00      	add	r7, sp, #0
 8005564:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005566:	2300      	movs	r3, #0
}
 8005568:	4618      	mov	r0, r3
 800556a:	370c      	adds	r7, #12
 800556c:	46bd      	mov	sp, r7
 800556e:	bc80      	pop	{r7}
 8005570:	4770      	bx	lr

08005572 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005572:	b580      	push	{r7, lr}
 8005574:	b084      	sub	sp, #16
 8005576:	af00      	add	r7, sp, #0
 8005578:	6078      	str	r0, [r7, #4]
 800557a:	460b      	mov	r3, r1
 800557c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800557e:	2302      	movs	r3, #2
 8005580:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005588:	2b00      	cmp	r3, #0
 800558a:	d00c      	beq.n	80055a6 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	78fa      	ldrb	r2, [r7, #3]
 8005596:	4611      	mov	r1, r2
 8005598:	6878      	ldr	r0, [r7, #4]
 800559a:	4798      	blx	r3
 800559c:	4603      	mov	r3, r0
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d101      	bne.n	80055a6 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80055a2:	2300      	movs	r3, #0
 80055a4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80055a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80055a8:	4618      	mov	r0, r3
 80055aa:	3710      	adds	r7, #16
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bd80      	pop	{r7, pc}

080055b0 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b082      	sub	sp, #8
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
 80055b8:	460b      	mov	r3, r1
 80055ba:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	78fa      	ldrb	r2, [r7, #3]
 80055c6:	4611      	mov	r1, r2
 80055c8:	6878      	ldr	r0, [r7, #4]
 80055ca:	4798      	blx	r3

  return USBD_OK;
 80055cc:	2300      	movs	r3, #0
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	3708      	adds	r7, #8
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}

080055d6 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80055d6:	b580      	push	{r7, lr}
 80055d8:	b082      	sub	sp, #8
 80055da:	af00      	add	r7, sp, #0
 80055dc:	6078      	str	r0, [r7, #4]
 80055de:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80055e6:	6839      	ldr	r1, [r7, #0]
 80055e8:	4618      	mov	r0, r3
 80055ea:	f000 fed8 	bl	800639e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2201      	movs	r2, #1
 80055f2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80055fc:	461a      	mov	r2, r3
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800560a:	f003 031f 	and.w	r3, r3, #31
 800560e:	2b02      	cmp	r3, #2
 8005610:	d016      	beq.n	8005640 <USBD_LL_SetupStage+0x6a>
 8005612:	2b02      	cmp	r3, #2
 8005614:	d81c      	bhi.n	8005650 <USBD_LL_SetupStage+0x7a>
 8005616:	2b00      	cmp	r3, #0
 8005618:	d002      	beq.n	8005620 <USBD_LL_SetupStage+0x4a>
 800561a:	2b01      	cmp	r3, #1
 800561c:	d008      	beq.n	8005630 <USBD_LL_SetupStage+0x5a>
 800561e:	e017      	b.n	8005650 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005626:	4619      	mov	r1, r3
 8005628:	6878      	ldr	r0, [r7, #4]
 800562a:	f000 f9cb 	bl	80059c4 <USBD_StdDevReq>
      break;
 800562e:	e01a      	b.n	8005666 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005636:	4619      	mov	r1, r3
 8005638:	6878      	ldr	r0, [r7, #4]
 800563a:	f000 fa2d 	bl	8005a98 <USBD_StdItfReq>
      break;
 800563e:	e012      	b.n	8005666 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005646:	4619      	mov	r1, r3
 8005648:	6878      	ldr	r0, [r7, #4]
 800564a:	f000 fa6d 	bl	8005b28 <USBD_StdEPReq>
      break;
 800564e:	e00a      	b.n	8005666 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005656:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800565a:	b2db      	uxtb	r3, r3
 800565c:	4619      	mov	r1, r3
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	f001 fb56 	bl	8006d10 <USBD_LL_StallEP>
      break;
 8005664:	bf00      	nop
  }

  return USBD_OK;
 8005666:	2300      	movs	r3, #0
}
 8005668:	4618      	mov	r0, r3
 800566a:	3708      	adds	r7, #8
 800566c:	46bd      	mov	sp, r7
 800566e:	bd80      	pop	{r7, pc}

08005670 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b086      	sub	sp, #24
 8005674:	af00      	add	r7, sp, #0
 8005676:	60f8      	str	r0, [r7, #12]
 8005678:	460b      	mov	r3, r1
 800567a:	607a      	str	r2, [r7, #4]
 800567c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800567e:	7afb      	ldrb	r3, [r7, #11]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d14b      	bne.n	800571c <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800568a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005692:	2b03      	cmp	r3, #3
 8005694:	d134      	bne.n	8005700 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8005696:	697b      	ldr	r3, [r7, #20]
 8005698:	68da      	ldr	r2, [r3, #12]
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	691b      	ldr	r3, [r3, #16]
 800569e:	429a      	cmp	r2, r3
 80056a0:	d919      	bls.n	80056d6 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	68da      	ldr	r2, [r3, #12]
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	691b      	ldr	r3, [r3, #16]
 80056aa:	1ad2      	subs	r2, r2, r3
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	68da      	ldr	r2, [r3, #12]
 80056b4:	697b      	ldr	r3, [r7, #20]
 80056b6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80056b8:	429a      	cmp	r2, r3
 80056ba:	d203      	bcs.n	80056c4 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80056c0:	b29b      	uxth	r3, r3
 80056c2:	e002      	b.n	80056ca <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80056c8:	b29b      	uxth	r3, r3
 80056ca:	461a      	mov	r2, r3
 80056cc:	6879      	ldr	r1, [r7, #4]
 80056ce:	68f8      	ldr	r0, [r7, #12]
 80056d0:	f000 ff57 	bl	8006582 <USBD_CtlContinueRx>
 80056d4:	e038      	b.n	8005748 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80056dc:	691b      	ldr	r3, [r3, #16]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d00a      	beq.n	80056f8 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80056e8:	2b03      	cmp	r3, #3
 80056ea:	d105      	bne.n	80056f8 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80056f2:	691b      	ldr	r3, [r3, #16]
 80056f4:	68f8      	ldr	r0, [r7, #12]
 80056f6:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80056f8:	68f8      	ldr	r0, [r7, #12]
 80056fa:	f000 ff54 	bl	80065a6 <USBD_CtlSendStatus>
 80056fe:	e023      	b.n	8005748 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005706:	2b05      	cmp	r3, #5
 8005708:	d11e      	bne.n	8005748 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	2200      	movs	r2, #0
 800570e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8005712:	2100      	movs	r1, #0
 8005714:	68f8      	ldr	r0, [r7, #12]
 8005716:	f001 fafb 	bl	8006d10 <USBD_LL_StallEP>
 800571a:	e015      	b.n	8005748 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005722:	699b      	ldr	r3, [r3, #24]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d00d      	beq.n	8005744 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800572e:	2b03      	cmp	r3, #3
 8005730:	d108      	bne.n	8005744 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005738:	699b      	ldr	r3, [r3, #24]
 800573a:	7afa      	ldrb	r2, [r7, #11]
 800573c:	4611      	mov	r1, r2
 800573e:	68f8      	ldr	r0, [r7, #12]
 8005740:	4798      	blx	r3
 8005742:	e001      	b.n	8005748 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005744:	2302      	movs	r3, #2
 8005746:	e000      	b.n	800574a <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8005748:	2300      	movs	r3, #0
}
 800574a:	4618      	mov	r0, r3
 800574c:	3718      	adds	r7, #24
 800574e:	46bd      	mov	sp, r7
 8005750:	bd80      	pop	{r7, pc}

08005752 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005752:	b580      	push	{r7, lr}
 8005754:	b086      	sub	sp, #24
 8005756:	af00      	add	r7, sp, #0
 8005758:	60f8      	str	r0, [r7, #12]
 800575a:	460b      	mov	r3, r1
 800575c:	607a      	str	r2, [r7, #4]
 800575e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005760:	7afb      	ldrb	r3, [r7, #11]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d17f      	bne.n	8005866 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	3314      	adds	r3, #20
 800576a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005772:	2b02      	cmp	r3, #2
 8005774:	d15c      	bne.n	8005830 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	68da      	ldr	r2, [r3, #12]
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	691b      	ldr	r3, [r3, #16]
 800577e:	429a      	cmp	r2, r3
 8005780:	d915      	bls.n	80057ae <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	68da      	ldr	r2, [r3, #12]
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	691b      	ldr	r3, [r3, #16]
 800578a:	1ad2      	subs	r2, r2, r3
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	68db      	ldr	r3, [r3, #12]
 8005794:	b29b      	uxth	r3, r3
 8005796:	461a      	mov	r2, r3
 8005798:	6879      	ldr	r1, [r7, #4]
 800579a:	68f8      	ldr	r0, [r7, #12]
 800579c:	f000 fec1 	bl	8006522 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80057a0:	2300      	movs	r3, #0
 80057a2:	2200      	movs	r2, #0
 80057a4:	2100      	movs	r1, #0
 80057a6:	68f8      	ldr	r0, [r7, #12]
 80057a8:	f001 fb5e 	bl	8006e68 <USBD_LL_PrepareReceive>
 80057ac:	e04e      	b.n	800584c <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	689b      	ldr	r3, [r3, #8]
 80057b2:	697a      	ldr	r2, [r7, #20]
 80057b4:	6912      	ldr	r2, [r2, #16]
 80057b6:	fbb3 f1f2 	udiv	r1, r3, r2
 80057ba:	fb02 f201 	mul.w	r2, r2, r1
 80057be:	1a9b      	subs	r3, r3, r2
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d11c      	bne.n	80057fe <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	689a      	ldr	r2, [r3, #8]
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80057cc:	429a      	cmp	r2, r3
 80057ce:	d316      	bcc.n	80057fe <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	689a      	ldr	r2, [r3, #8]
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80057da:	429a      	cmp	r2, r3
 80057dc:	d20f      	bcs.n	80057fe <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80057de:	2200      	movs	r2, #0
 80057e0:	2100      	movs	r1, #0
 80057e2:	68f8      	ldr	r0, [r7, #12]
 80057e4:	f000 fe9d 	bl	8006522 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2200      	movs	r2, #0
 80057ec:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80057f0:	2300      	movs	r3, #0
 80057f2:	2200      	movs	r2, #0
 80057f4:	2100      	movs	r1, #0
 80057f6:	68f8      	ldr	r0, [r7, #12]
 80057f8:	f001 fb36 	bl	8006e68 <USBD_LL_PrepareReceive>
 80057fc:	e026      	b.n	800584c <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005804:	68db      	ldr	r3, [r3, #12]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d00a      	beq.n	8005820 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005810:	2b03      	cmp	r3, #3
 8005812:	d105      	bne.n	8005820 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800581a:	68db      	ldr	r3, [r3, #12]
 800581c:	68f8      	ldr	r0, [r7, #12]
 800581e:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8005820:	2180      	movs	r1, #128	; 0x80
 8005822:	68f8      	ldr	r0, [r7, #12]
 8005824:	f001 fa74 	bl	8006d10 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8005828:	68f8      	ldr	r0, [r7, #12]
 800582a:	f000 fecf 	bl	80065cc <USBD_CtlReceiveStatus>
 800582e:	e00d      	b.n	800584c <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005836:	2b04      	cmp	r3, #4
 8005838:	d004      	beq.n	8005844 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005840:	2b00      	cmp	r3, #0
 8005842:	d103      	bne.n	800584c <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8005844:	2180      	movs	r1, #128	; 0x80
 8005846:	68f8      	ldr	r0, [r7, #12]
 8005848:	f001 fa62 	bl	8006d10 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005852:	2b01      	cmp	r3, #1
 8005854:	d11d      	bne.n	8005892 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8005856:	68f8      	ldr	r0, [r7, #12]
 8005858:	f7ff fe81 	bl	800555e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	2200      	movs	r2, #0
 8005860:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005864:	e015      	b.n	8005892 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800586c:	695b      	ldr	r3, [r3, #20]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d00d      	beq.n	800588e <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8005878:	2b03      	cmp	r3, #3
 800587a:	d108      	bne.n	800588e <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005882:	695b      	ldr	r3, [r3, #20]
 8005884:	7afa      	ldrb	r2, [r7, #11]
 8005886:	4611      	mov	r1, r2
 8005888:	68f8      	ldr	r0, [r7, #12]
 800588a:	4798      	blx	r3
 800588c:	e001      	b.n	8005892 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800588e:	2302      	movs	r3, #2
 8005890:	e000      	b.n	8005894 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8005892:	2300      	movs	r3, #0
}
 8005894:	4618      	mov	r0, r3
 8005896:	3718      	adds	r7, #24
 8005898:	46bd      	mov	sp, r7
 800589a:	bd80      	pop	{r7, pc}

0800589c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b082      	sub	sp, #8
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80058a4:	2340      	movs	r3, #64	; 0x40
 80058a6:	2200      	movs	r2, #0
 80058a8:	2100      	movs	r1, #0
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	f001 f9eb 	bl	8006c86 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2201      	movs	r2, #1
 80058b4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2240      	movs	r2, #64	; 0x40
 80058bc:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80058c0:	2340      	movs	r3, #64	; 0x40
 80058c2:	2200      	movs	r2, #0
 80058c4:	2180      	movs	r1, #128	; 0x80
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	f001 f9dd 	bl	8006c86 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2201      	movs	r2, #1
 80058d0:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2240      	movs	r2, #64	; 0x40
 80058d6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2201      	movs	r2, #1
 80058dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2200      	movs	r2, #0
 80058e4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2200      	movs	r2, #0
 80058ec:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2200      	movs	r2, #0
 80058f2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d009      	beq.n	8005914 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	687a      	ldr	r2, [r7, #4]
 800590a:	6852      	ldr	r2, [r2, #4]
 800590c:	b2d2      	uxtb	r2, r2
 800590e:	4611      	mov	r1, r2
 8005910:	6878      	ldr	r0, [r7, #4]
 8005912:	4798      	blx	r3
  }

  return USBD_OK;
 8005914:	2300      	movs	r3, #0
}
 8005916:	4618      	mov	r0, r3
 8005918:	3708      	adds	r7, #8
 800591a:	46bd      	mov	sp, r7
 800591c:	bd80      	pop	{r7, pc}

0800591e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800591e:	b480      	push	{r7}
 8005920:	b083      	sub	sp, #12
 8005922:	af00      	add	r7, sp, #0
 8005924:	6078      	str	r0, [r7, #4]
 8005926:	460b      	mov	r3, r1
 8005928:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	78fa      	ldrb	r2, [r7, #3]
 800592e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005930:	2300      	movs	r3, #0
}
 8005932:	4618      	mov	r0, r3
 8005934:	370c      	adds	r7, #12
 8005936:	46bd      	mov	sp, r7
 8005938:	bc80      	pop	{r7}
 800593a:	4770      	bx	lr

0800593c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800593c:	b480      	push	{r7}
 800593e:	b083      	sub	sp, #12
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2204      	movs	r2, #4
 8005954:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005958:	2300      	movs	r3, #0
}
 800595a:	4618      	mov	r0, r3
 800595c:	370c      	adds	r7, #12
 800595e:	46bd      	mov	sp, r7
 8005960:	bc80      	pop	{r7}
 8005962:	4770      	bx	lr

08005964 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005964:	b480      	push	{r7}
 8005966:	b083      	sub	sp, #12
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005972:	2b04      	cmp	r3, #4
 8005974:	d105      	bne.n	8005982 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005982:	2300      	movs	r3, #0
}
 8005984:	4618      	mov	r0, r3
 8005986:	370c      	adds	r7, #12
 8005988:	46bd      	mov	sp, r7
 800598a:	bc80      	pop	{r7}
 800598c:	4770      	bx	lr

0800598e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800598e:	b580      	push	{r7, lr}
 8005990:	b082      	sub	sp, #8
 8005992:	af00      	add	r7, sp, #0
 8005994:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800599c:	2b03      	cmp	r3, #3
 800599e:	d10b      	bne.n	80059b8 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80059a6:	69db      	ldr	r3, [r3, #28]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d005      	beq.n	80059b8 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80059b2:	69db      	ldr	r3, [r3, #28]
 80059b4:	6878      	ldr	r0, [r7, #4]
 80059b6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80059b8:	2300      	movs	r3, #0
}
 80059ba:	4618      	mov	r0, r3
 80059bc:	3708      	adds	r7, #8
 80059be:	46bd      	mov	sp, r7
 80059c0:	bd80      	pop	{r7, pc}
	...

080059c4 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b084      	sub	sp, #16
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
 80059cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80059ce:	2300      	movs	r3, #0
 80059d0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	781b      	ldrb	r3, [r3, #0]
 80059d6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80059da:	2b40      	cmp	r3, #64	; 0x40
 80059dc:	d005      	beq.n	80059ea <USBD_StdDevReq+0x26>
 80059de:	2b40      	cmp	r3, #64	; 0x40
 80059e0:	d84f      	bhi.n	8005a82 <USBD_StdDevReq+0xbe>
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d009      	beq.n	80059fa <USBD_StdDevReq+0x36>
 80059e6:	2b20      	cmp	r3, #32
 80059e8:	d14b      	bne.n	8005a82 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80059f0:	689b      	ldr	r3, [r3, #8]
 80059f2:	6839      	ldr	r1, [r7, #0]
 80059f4:	6878      	ldr	r0, [r7, #4]
 80059f6:	4798      	blx	r3
      break;
 80059f8:	e048      	b.n	8005a8c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	785b      	ldrb	r3, [r3, #1]
 80059fe:	2b09      	cmp	r3, #9
 8005a00:	d839      	bhi.n	8005a76 <USBD_StdDevReq+0xb2>
 8005a02:	a201      	add	r2, pc, #4	; (adr r2, 8005a08 <USBD_StdDevReq+0x44>)
 8005a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a08:	08005a59 	.word	0x08005a59
 8005a0c:	08005a6d 	.word	0x08005a6d
 8005a10:	08005a77 	.word	0x08005a77
 8005a14:	08005a63 	.word	0x08005a63
 8005a18:	08005a77 	.word	0x08005a77
 8005a1c:	08005a3b 	.word	0x08005a3b
 8005a20:	08005a31 	.word	0x08005a31
 8005a24:	08005a77 	.word	0x08005a77
 8005a28:	08005a4f 	.word	0x08005a4f
 8005a2c:	08005a45 	.word	0x08005a45
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005a30:	6839      	ldr	r1, [r7, #0]
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f000 f9dc 	bl	8005df0 <USBD_GetDescriptor>
          break;
 8005a38:	e022      	b.n	8005a80 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005a3a:	6839      	ldr	r1, [r7, #0]
 8005a3c:	6878      	ldr	r0, [r7, #4]
 8005a3e:	f000 fb3f 	bl	80060c0 <USBD_SetAddress>
          break;
 8005a42:	e01d      	b.n	8005a80 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8005a44:	6839      	ldr	r1, [r7, #0]
 8005a46:	6878      	ldr	r0, [r7, #4]
 8005a48:	f000 fb7e 	bl	8006148 <USBD_SetConfig>
          break;
 8005a4c:	e018      	b.n	8005a80 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005a4e:	6839      	ldr	r1, [r7, #0]
 8005a50:	6878      	ldr	r0, [r7, #4]
 8005a52:	f000 fc07 	bl	8006264 <USBD_GetConfig>
          break;
 8005a56:	e013      	b.n	8005a80 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005a58:	6839      	ldr	r1, [r7, #0]
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	f000 fc37 	bl	80062ce <USBD_GetStatus>
          break;
 8005a60:	e00e      	b.n	8005a80 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005a62:	6839      	ldr	r1, [r7, #0]
 8005a64:	6878      	ldr	r0, [r7, #4]
 8005a66:	f000 fc65 	bl	8006334 <USBD_SetFeature>
          break;
 8005a6a:	e009      	b.n	8005a80 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005a6c:	6839      	ldr	r1, [r7, #0]
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f000 fc74 	bl	800635c <USBD_ClrFeature>
          break;
 8005a74:	e004      	b.n	8005a80 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8005a76:	6839      	ldr	r1, [r7, #0]
 8005a78:	6878      	ldr	r0, [r7, #4]
 8005a7a:	f000 fccc 	bl	8006416 <USBD_CtlError>
          break;
 8005a7e:	bf00      	nop
      }
      break;
 8005a80:	e004      	b.n	8005a8c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8005a82:	6839      	ldr	r1, [r7, #0]
 8005a84:	6878      	ldr	r0, [r7, #4]
 8005a86:	f000 fcc6 	bl	8006416 <USBD_CtlError>
      break;
 8005a8a:	bf00      	nop
  }

  return ret;
 8005a8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a8e:	4618      	mov	r0, r3
 8005a90:	3710      	adds	r7, #16
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bd80      	pop	{r7, pc}
 8005a96:	bf00      	nop

08005a98 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b084      	sub	sp, #16
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
 8005aa0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	781b      	ldrb	r3, [r3, #0]
 8005aaa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005aae:	2b40      	cmp	r3, #64	; 0x40
 8005ab0:	d005      	beq.n	8005abe <USBD_StdItfReq+0x26>
 8005ab2:	2b40      	cmp	r3, #64	; 0x40
 8005ab4:	d82e      	bhi.n	8005b14 <USBD_StdItfReq+0x7c>
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d001      	beq.n	8005abe <USBD_StdItfReq+0x26>
 8005aba:	2b20      	cmp	r3, #32
 8005abc:	d12a      	bne.n	8005b14 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ac4:	3b01      	subs	r3, #1
 8005ac6:	2b02      	cmp	r3, #2
 8005ac8:	d81d      	bhi.n	8005b06 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	889b      	ldrh	r3, [r3, #4]
 8005ace:	b2db      	uxtb	r3, r3
 8005ad0:	2b01      	cmp	r3, #1
 8005ad2:	d813      	bhi.n	8005afc <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ada:	689b      	ldr	r3, [r3, #8]
 8005adc:	6839      	ldr	r1, [r7, #0]
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	4798      	blx	r3
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	88db      	ldrh	r3, [r3, #6]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d110      	bne.n	8005b10 <USBD_StdItfReq+0x78>
 8005aee:	7bfb      	ldrb	r3, [r7, #15]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d10d      	bne.n	8005b10 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8005af4:	6878      	ldr	r0, [r7, #4]
 8005af6:	f000 fd56 	bl	80065a6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005afa:	e009      	b.n	8005b10 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8005afc:	6839      	ldr	r1, [r7, #0]
 8005afe:	6878      	ldr	r0, [r7, #4]
 8005b00:	f000 fc89 	bl	8006416 <USBD_CtlError>
          break;
 8005b04:	e004      	b.n	8005b10 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8005b06:	6839      	ldr	r1, [r7, #0]
 8005b08:	6878      	ldr	r0, [r7, #4]
 8005b0a:	f000 fc84 	bl	8006416 <USBD_CtlError>
          break;
 8005b0e:	e000      	b.n	8005b12 <USBD_StdItfReq+0x7a>
          break;
 8005b10:	bf00      	nop
      }
      break;
 8005b12:	e004      	b.n	8005b1e <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8005b14:	6839      	ldr	r1, [r7, #0]
 8005b16:	6878      	ldr	r0, [r7, #4]
 8005b18:	f000 fc7d 	bl	8006416 <USBD_CtlError>
      break;
 8005b1c:	bf00      	nop
  }

  return USBD_OK;
 8005b1e:	2300      	movs	r3, #0
}
 8005b20:	4618      	mov	r0, r3
 8005b22:	3710      	adds	r7, #16
 8005b24:	46bd      	mov	sp, r7
 8005b26:	bd80      	pop	{r7, pc}

08005b28 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b084      	sub	sp, #16
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
 8005b30:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8005b32:	2300      	movs	r3, #0
 8005b34:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	889b      	ldrh	r3, [r3, #4]
 8005b3a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	781b      	ldrb	r3, [r3, #0]
 8005b40:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005b44:	2b40      	cmp	r3, #64	; 0x40
 8005b46:	d007      	beq.n	8005b58 <USBD_StdEPReq+0x30>
 8005b48:	2b40      	cmp	r3, #64	; 0x40
 8005b4a:	f200 8146 	bhi.w	8005dda <USBD_StdEPReq+0x2b2>
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d00a      	beq.n	8005b68 <USBD_StdEPReq+0x40>
 8005b52:	2b20      	cmp	r3, #32
 8005b54:	f040 8141 	bne.w	8005dda <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b5e:	689b      	ldr	r3, [r3, #8]
 8005b60:	6839      	ldr	r1, [r7, #0]
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	4798      	blx	r3
      break;
 8005b66:	e13d      	b.n	8005de4 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	781b      	ldrb	r3, [r3, #0]
 8005b6c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005b70:	2b20      	cmp	r3, #32
 8005b72:	d10a      	bne.n	8005b8a <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b7a:	689b      	ldr	r3, [r3, #8]
 8005b7c:	6839      	ldr	r1, [r7, #0]
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	4798      	blx	r3
 8005b82:	4603      	mov	r3, r0
 8005b84:	73fb      	strb	r3, [r7, #15]

        return ret;
 8005b86:	7bfb      	ldrb	r3, [r7, #15]
 8005b88:	e12d      	b.n	8005de6 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	785b      	ldrb	r3, [r3, #1]
 8005b8e:	2b03      	cmp	r3, #3
 8005b90:	d007      	beq.n	8005ba2 <USBD_StdEPReq+0x7a>
 8005b92:	2b03      	cmp	r3, #3
 8005b94:	f300 811b 	bgt.w	8005dce <USBD_StdEPReq+0x2a6>
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d072      	beq.n	8005c82 <USBD_StdEPReq+0x15a>
 8005b9c:	2b01      	cmp	r3, #1
 8005b9e:	d03a      	beq.n	8005c16 <USBD_StdEPReq+0xee>
 8005ba0:	e115      	b.n	8005dce <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ba8:	2b02      	cmp	r3, #2
 8005baa:	d002      	beq.n	8005bb2 <USBD_StdEPReq+0x8a>
 8005bac:	2b03      	cmp	r3, #3
 8005bae:	d015      	beq.n	8005bdc <USBD_StdEPReq+0xb4>
 8005bb0:	e02b      	b.n	8005c0a <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005bb2:	7bbb      	ldrb	r3, [r7, #14]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d00c      	beq.n	8005bd2 <USBD_StdEPReq+0xaa>
 8005bb8:	7bbb      	ldrb	r3, [r7, #14]
 8005bba:	2b80      	cmp	r3, #128	; 0x80
 8005bbc:	d009      	beq.n	8005bd2 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8005bbe:	7bbb      	ldrb	r3, [r7, #14]
 8005bc0:	4619      	mov	r1, r3
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	f001 f8a4 	bl	8006d10 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005bc8:	2180      	movs	r1, #128	; 0x80
 8005bca:	6878      	ldr	r0, [r7, #4]
 8005bcc:	f001 f8a0 	bl	8006d10 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005bd0:	e020      	b.n	8005c14 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8005bd2:	6839      	ldr	r1, [r7, #0]
 8005bd4:	6878      	ldr	r0, [r7, #4]
 8005bd6:	f000 fc1e 	bl	8006416 <USBD_CtlError>
              break;
 8005bda:	e01b      	b.n	8005c14 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	885b      	ldrh	r3, [r3, #2]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d10e      	bne.n	8005c02 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8005be4:	7bbb      	ldrb	r3, [r7, #14]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d00b      	beq.n	8005c02 <USBD_StdEPReq+0xda>
 8005bea:	7bbb      	ldrb	r3, [r7, #14]
 8005bec:	2b80      	cmp	r3, #128	; 0x80
 8005bee:	d008      	beq.n	8005c02 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	88db      	ldrh	r3, [r3, #6]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d104      	bne.n	8005c02 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8005bf8:	7bbb      	ldrb	r3, [r7, #14]
 8005bfa:	4619      	mov	r1, r3
 8005bfc:	6878      	ldr	r0, [r7, #4]
 8005bfe:	f001 f887 	bl	8006d10 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8005c02:	6878      	ldr	r0, [r7, #4]
 8005c04:	f000 fccf 	bl	80065a6 <USBD_CtlSendStatus>

              break;
 8005c08:	e004      	b.n	8005c14 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8005c0a:	6839      	ldr	r1, [r7, #0]
 8005c0c:	6878      	ldr	r0, [r7, #4]
 8005c0e:	f000 fc02 	bl	8006416 <USBD_CtlError>
              break;
 8005c12:	bf00      	nop
          }
          break;
 8005c14:	e0e0      	b.n	8005dd8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c1c:	2b02      	cmp	r3, #2
 8005c1e:	d002      	beq.n	8005c26 <USBD_StdEPReq+0xfe>
 8005c20:	2b03      	cmp	r3, #3
 8005c22:	d015      	beq.n	8005c50 <USBD_StdEPReq+0x128>
 8005c24:	e026      	b.n	8005c74 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005c26:	7bbb      	ldrb	r3, [r7, #14]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d00c      	beq.n	8005c46 <USBD_StdEPReq+0x11e>
 8005c2c:	7bbb      	ldrb	r3, [r7, #14]
 8005c2e:	2b80      	cmp	r3, #128	; 0x80
 8005c30:	d009      	beq.n	8005c46 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8005c32:	7bbb      	ldrb	r3, [r7, #14]
 8005c34:	4619      	mov	r1, r3
 8005c36:	6878      	ldr	r0, [r7, #4]
 8005c38:	f001 f86a 	bl	8006d10 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005c3c:	2180      	movs	r1, #128	; 0x80
 8005c3e:	6878      	ldr	r0, [r7, #4]
 8005c40:	f001 f866 	bl	8006d10 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005c44:	e01c      	b.n	8005c80 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8005c46:	6839      	ldr	r1, [r7, #0]
 8005c48:	6878      	ldr	r0, [r7, #4]
 8005c4a:	f000 fbe4 	bl	8006416 <USBD_CtlError>
              break;
 8005c4e:	e017      	b.n	8005c80 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	885b      	ldrh	r3, [r3, #2]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d112      	bne.n	8005c7e <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005c58:	7bbb      	ldrb	r3, [r7, #14]
 8005c5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d004      	beq.n	8005c6c <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8005c62:	7bbb      	ldrb	r3, [r7, #14]
 8005c64:	4619      	mov	r1, r3
 8005c66:	6878      	ldr	r0, [r7, #4]
 8005c68:	f001 f871 	bl	8006d4e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8005c6c:	6878      	ldr	r0, [r7, #4]
 8005c6e:	f000 fc9a 	bl	80065a6 <USBD_CtlSendStatus>
              }
              break;
 8005c72:	e004      	b.n	8005c7e <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8005c74:	6839      	ldr	r1, [r7, #0]
 8005c76:	6878      	ldr	r0, [r7, #4]
 8005c78:	f000 fbcd 	bl	8006416 <USBD_CtlError>
              break;
 8005c7c:	e000      	b.n	8005c80 <USBD_StdEPReq+0x158>
              break;
 8005c7e:	bf00      	nop
          }
          break;
 8005c80:	e0aa      	b.n	8005dd8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c88:	2b02      	cmp	r3, #2
 8005c8a:	d002      	beq.n	8005c92 <USBD_StdEPReq+0x16a>
 8005c8c:	2b03      	cmp	r3, #3
 8005c8e:	d032      	beq.n	8005cf6 <USBD_StdEPReq+0x1ce>
 8005c90:	e097      	b.n	8005dc2 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005c92:	7bbb      	ldrb	r3, [r7, #14]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d007      	beq.n	8005ca8 <USBD_StdEPReq+0x180>
 8005c98:	7bbb      	ldrb	r3, [r7, #14]
 8005c9a:	2b80      	cmp	r3, #128	; 0x80
 8005c9c:	d004      	beq.n	8005ca8 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8005c9e:	6839      	ldr	r1, [r7, #0]
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f000 fbb8 	bl	8006416 <USBD_CtlError>
                break;
 8005ca6:	e091      	b.n	8005dcc <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005ca8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	da0b      	bge.n	8005cc8 <USBD_StdEPReq+0x1a0>
 8005cb0:	7bbb      	ldrb	r3, [r7, #14]
 8005cb2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005cb6:	4613      	mov	r3, r2
 8005cb8:	009b      	lsls	r3, r3, #2
 8005cba:	4413      	add	r3, r2
 8005cbc:	009b      	lsls	r3, r3, #2
 8005cbe:	3310      	adds	r3, #16
 8005cc0:	687a      	ldr	r2, [r7, #4]
 8005cc2:	4413      	add	r3, r2
 8005cc4:	3304      	adds	r3, #4
 8005cc6:	e00b      	b.n	8005ce0 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005cc8:	7bbb      	ldrb	r3, [r7, #14]
 8005cca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005cce:	4613      	mov	r3, r2
 8005cd0:	009b      	lsls	r3, r3, #2
 8005cd2:	4413      	add	r3, r2
 8005cd4:	009b      	lsls	r3, r3, #2
 8005cd6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005cda:	687a      	ldr	r2, [r7, #4]
 8005cdc:	4413      	add	r3, r2
 8005cde:	3304      	adds	r3, #4
 8005ce0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	2202      	movs	r2, #2
 8005cec:	4619      	mov	r1, r3
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	f000 fbfb 	bl	80064ea <USBD_CtlSendData>
              break;
 8005cf4:	e06a      	b.n	8005dcc <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005cf6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	da11      	bge.n	8005d22 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005cfe:	7bbb      	ldrb	r3, [r7, #14]
 8005d00:	f003 020f 	and.w	r2, r3, #15
 8005d04:	6879      	ldr	r1, [r7, #4]
 8005d06:	4613      	mov	r3, r2
 8005d08:	009b      	lsls	r3, r3, #2
 8005d0a:	4413      	add	r3, r2
 8005d0c:	009b      	lsls	r3, r3, #2
 8005d0e:	440b      	add	r3, r1
 8005d10:	3318      	adds	r3, #24
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d117      	bne.n	8005d48 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8005d18:	6839      	ldr	r1, [r7, #0]
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	f000 fb7b 	bl	8006416 <USBD_CtlError>
                  break;
 8005d20:	e054      	b.n	8005dcc <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005d22:	7bbb      	ldrb	r3, [r7, #14]
 8005d24:	f003 020f 	and.w	r2, r3, #15
 8005d28:	6879      	ldr	r1, [r7, #4]
 8005d2a:	4613      	mov	r3, r2
 8005d2c:	009b      	lsls	r3, r3, #2
 8005d2e:	4413      	add	r3, r2
 8005d30:	009b      	lsls	r3, r3, #2
 8005d32:	440b      	add	r3, r1
 8005d34:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d104      	bne.n	8005d48 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8005d3e:	6839      	ldr	r1, [r7, #0]
 8005d40:	6878      	ldr	r0, [r7, #4]
 8005d42:	f000 fb68 	bl	8006416 <USBD_CtlError>
                  break;
 8005d46:	e041      	b.n	8005dcc <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005d48:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	da0b      	bge.n	8005d68 <USBD_StdEPReq+0x240>
 8005d50:	7bbb      	ldrb	r3, [r7, #14]
 8005d52:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005d56:	4613      	mov	r3, r2
 8005d58:	009b      	lsls	r3, r3, #2
 8005d5a:	4413      	add	r3, r2
 8005d5c:	009b      	lsls	r3, r3, #2
 8005d5e:	3310      	adds	r3, #16
 8005d60:	687a      	ldr	r2, [r7, #4]
 8005d62:	4413      	add	r3, r2
 8005d64:	3304      	adds	r3, #4
 8005d66:	e00b      	b.n	8005d80 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005d68:	7bbb      	ldrb	r3, [r7, #14]
 8005d6a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005d6e:	4613      	mov	r3, r2
 8005d70:	009b      	lsls	r3, r3, #2
 8005d72:	4413      	add	r3, r2
 8005d74:	009b      	lsls	r3, r3, #2
 8005d76:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005d7a:	687a      	ldr	r2, [r7, #4]
 8005d7c:	4413      	add	r3, r2
 8005d7e:	3304      	adds	r3, #4
 8005d80:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005d82:	7bbb      	ldrb	r3, [r7, #14]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d002      	beq.n	8005d8e <USBD_StdEPReq+0x266>
 8005d88:	7bbb      	ldrb	r3, [r7, #14]
 8005d8a:	2b80      	cmp	r3, #128	; 0x80
 8005d8c:	d103      	bne.n	8005d96 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	2200      	movs	r2, #0
 8005d92:	601a      	str	r2, [r3, #0]
 8005d94:	e00e      	b.n	8005db4 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8005d96:	7bbb      	ldrb	r3, [r7, #14]
 8005d98:	4619      	mov	r1, r3
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	f000 fff6 	bl	8006d8c <USBD_LL_IsStallEP>
 8005da0:	4603      	mov	r3, r0
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d003      	beq.n	8005dae <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	2201      	movs	r2, #1
 8005daa:	601a      	str	r2, [r3, #0]
 8005dac:	e002      	b.n	8005db4 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	2200      	movs	r2, #0
 8005db2:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	2202      	movs	r2, #2
 8005db8:	4619      	mov	r1, r3
 8005dba:	6878      	ldr	r0, [r7, #4]
 8005dbc:	f000 fb95 	bl	80064ea <USBD_CtlSendData>
              break;
 8005dc0:	e004      	b.n	8005dcc <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8005dc2:	6839      	ldr	r1, [r7, #0]
 8005dc4:	6878      	ldr	r0, [r7, #4]
 8005dc6:	f000 fb26 	bl	8006416 <USBD_CtlError>
              break;
 8005dca:	bf00      	nop
          }
          break;
 8005dcc:	e004      	b.n	8005dd8 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8005dce:	6839      	ldr	r1, [r7, #0]
 8005dd0:	6878      	ldr	r0, [r7, #4]
 8005dd2:	f000 fb20 	bl	8006416 <USBD_CtlError>
          break;
 8005dd6:	bf00      	nop
      }
      break;
 8005dd8:	e004      	b.n	8005de4 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8005dda:	6839      	ldr	r1, [r7, #0]
 8005ddc:	6878      	ldr	r0, [r7, #4]
 8005dde:	f000 fb1a 	bl	8006416 <USBD_CtlError>
      break;
 8005de2:	bf00      	nop
  }

  return ret;
 8005de4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	3710      	adds	r7, #16
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bd80      	pop	{r7, pc}
	...

08005df0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b084      	sub	sp, #16
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
 8005df8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005dfe:	2300      	movs	r3, #0
 8005e00:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005e02:	2300      	movs	r3, #0
 8005e04:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	885b      	ldrh	r3, [r3, #2]
 8005e0a:	0a1b      	lsrs	r3, r3, #8
 8005e0c:	b29b      	uxth	r3, r3
 8005e0e:	3b01      	subs	r3, #1
 8005e10:	2b06      	cmp	r3, #6
 8005e12:	f200 8128 	bhi.w	8006066 <USBD_GetDescriptor+0x276>
 8005e16:	a201      	add	r2, pc, #4	; (adr r2, 8005e1c <USBD_GetDescriptor+0x2c>)
 8005e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e1c:	08005e39 	.word	0x08005e39
 8005e20:	08005e51 	.word	0x08005e51
 8005e24:	08005e91 	.word	0x08005e91
 8005e28:	08006067 	.word	0x08006067
 8005e2c:	08006067 	.word	0x08006067
 8005e30:	08006007 	.word	0x08006007
 8005e34:	08006033 	.word	0x08006033
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	687a      	ldr	r2, [r7, #4]
 8005e42:	7c12      	ldrb	r2, [r2, #16]
 8005e44:	f107 0108 	add.w	r1, r7, #8
 8005e48:	4610      	mov	r0, r2
 8005e4a:	4798      	blx	r3
 8005e4c:	60f8      	str	r0, [r7, #12]
      break;
 8005e4e:	e112      	b.n	8006076 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	7c1b      	ldrb	r3, [r3, #16]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d10d      	bne.n	8005e74 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e60:	f107 0208 	add.w	r2, r7, #8
 8005e64:	4610      	mov	r0, r2
 8005e66:	4798      	blx	r3
 8005e68:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	3301      	adds	r3, #1
 8005e6e:	2202      	movs	r2, #2
 8005e70:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005e72:	e100      	b.n	8006076 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e7c:	f107 0208 	add.w	r2, r7, #8
 8005e80:	4610      	mov	r0, r2
 8005e82:	4798      	blx	r3
 8005e84:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	3301      	adds	r3, #1
 8005e8a:	2202      	movs	r2, #2
 8005e8c:	701a      	strb	r2, [r3, #0]
      break;
 8005e8e:	e0f2      	b.n	8006076 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	885b      	ldrh	r3, [r3, #2]
 8005e94:	b2db      	uxtb	r3, r3
 8005e96:	2b05      	cmp	r3, #5
 8005e98:	f200 80ac 	bhi.w	8005ff4 <USBD_GetDescriptor+0x204>
 8005e9c:	a201      	add	r2, pc, #4	; (adr r2, 8005ea4 <USBD_GetDescriptor+0xb4>)
 8005e9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ea2:	bf00      	nop
 8005ea4:	08005ebd 	.word	0x08005ebd
 8005ea8:	08005ef1 	.word	0x08005ef1
 8005eac:	08005f25 	.word	0x08005f25
 8005eb0:	08005f59 	.word	0x08005f59
 8005eb4:	08005f8d 	.word	0x08005f8d
 8005eb8:	08005fc1 	.word	0x08005fc1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005ec2:	685b      	ldr	r3, [r3, #4]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d00b      	beq.n	8005ee0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005ece:	685b      	ldr	r3, [r3, #4]
 8005ed0:	687a      	ldr	r2, [r7, #4]
 8005ed2:	7c12      	ldrb	r2, [r2, #16]
 8005ed4:	f107 0108 	add.w	r1, r7, #8
 8005ed8:	4610      	mov	r0, r2
 8005eda:	4798      	blx	r3
 8005edc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005ede:	e091      	b.n	8006004 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005ee0:	6839      	ldr	r1, [r7, #0]
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f000 fa97 	bl	8006416 <USBD_CtlError>
            err++;
 8005ee8:	7afb      	ldrb	r3, [r7, #11]
 8005eea:	3301      	adds	r3, #1
 8005eec:	72fb      	strb	r3, [r7, #11]
          break;
 8005eee:	e089      	b.n	8006004 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005ef6:	689b      	ldr	r3, [r3, #8]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d00b      	beq.n	8005f14 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005f02:	689b      	ldr	r3, [r3, #8]
 8005f04:	687a      	ldr	r2, [r7, #4]
 8005f06:	7c12      	ldrb	r2, [r2, #16]
 8005f08:	f107 0108 	add.w	r1, r7, #8
 8005f0c:	4610      	mov	r0, r2
 8005f0e:	4798      	blx	r3
 8005f10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005f12:	e077      	b.n	8006004 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005f14:	6839      	ldr	r1, [r7, #0]
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	f000 fa7d 	bl	8006416 <USBD_CtlError>
            err++;
 8005f1c:	7afb      	ldrb	r3, [r7, #11]
 8005f1e:	3301      	adds	r3, #1
 8005f20:	72fb      	strb	r3, [r7, #11]
          break;
 8005f22:	e06f      	b.n	8006004 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005f2a:	68db      	ldr	r3, [r3, #12]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d00b      	beq.n	8005f48 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005f36:	68db      	ldr	r3, [r3, #12]
 8005f38:	687a      	ldr	r2, [r7, #4]
 8005f3a:	7c12      	ldrb	r2, [r2, #16]
 8005f3c:	f107 0108 	add.w	r1, r7, #8
 8005f40:	4610      	mov	r0, r2
 8005f42:	4798      	blx	r3
 8005f44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005f46:	e05d      	b.n	8006004 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005f48:	6839      	ldr	r1, [r7, #0]
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f000 fa63 	bl	8006416 <USBD_CtlError>
            err++;
 8005f50:	7afb      	ldrb	r3, [r7, #11]
 8005f52:	3301      	adds	r3, #1
 8005f54:	72fb      	strb	r3, [r7, #11]
          break;
 8005f56:	e055      	b.n	8006004 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005f5e:	691b      	ldr	r3, [r3, #16]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d00b      	beq.n	8005f7c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005f6a:	691b      	ldr	r3, [r3, #16]
 8005f6c:	687a      	ldr	r2, [r7, #4]
 8005f6e:	7c12      	ldrb	r2, [r2, #16]
 8005f70:	f107 0108 	add.w	r1, r7, #8
 8005f74:	4610      	mov	r0, r2
 8005f76:	4798      	blx	r3
 8005f78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005f7a:	e043      	b.n	8006004 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005f7c:	6839      	ldr	r1, [r7, #0]
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	f000 fa49 	bl	8006416 <USBD_CtlError>
            err++;
 8005f84:	7afb      	ldrb	r3, [r7, #11]
 8005f86:	3301      	adds	r3, #1
 8005f88:	72fb      	strb	r3, [r7, #11]
          break;
 8005f8a:	e03b      	b.n	8006004 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005f92:	695b      	ldr	r3, [r3, #20]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d00b      	beq.n	8005fb0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005f9e:	695b      	ldr	r3, [r3, #20]
 8005fa0:	687a      	ldr	r2, [r7, #4]
 8005fa2:	7c12      	ldrb	r2, [r2, #16]
 8005fa4:	f107 0108 	add.w	r1, r7, #8
 8005fa8:	4610      	mov	r0, r2
 8005faa:	4798      	blx	r3
 8005fac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005fae:	e029      	b.n	8006004 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005fb0:	6839      	ldr	r1, [r7, #0]
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	f000 fa2f 	bl	8006416 <USBD_CtlError>
            err++;
 8005fb8:	7afb      	ldrb	r3, [r7, #11]
 8005fba:	3301      	adds	r3, #1
 8005fbc:	72fb      	strb	r3, [r7, #11]
          break;
 8005fbe:	e021      	b.n	8006004 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005fc6:	699b      	ldr	r3, [r3, #24]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d00b      	beq.n	8005fe4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005fd2:	699b      	ldr	r3, [r3, #24]
 8005fd4:	687a      	ldr	r2, [r7, #4]
 8005fd6:	7c12      	ldrb	r2, [r2, #16]
 8005fd8:	f107 0108 	add.w	r1, r7, #8
 8005fdc:	4610      	mov	r0, r2
 8005fde:	4798      	blx	r3
 8005fe0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005fe2:	e00f      	b.n	8006004 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005fe4:	6839      	ldr	r1, [r7, #0]
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	f000 fa15 	bl	8006416 <USBD_CtlError>
            err++;
 8005fec:	7afb      	ldrb	r3, [r7, #11]
 8005fee:	3301      	adds	r3, #1
 8005ff0:	72fb      	strb	r3, [r7, #11]
          break;
 8005ff2:	e007      	b.n	8006004 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8005ff4:	6839      	ldr	r1, [r7, #0]
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	f000 fa0d 	bl	8006416 <USBD_CtlError>
          err++;
 8005ffc:	7afb      	ldrb	r3, [r7, #11]
 8005ffe:	3301      	adds	r3, #1
 8006000:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8006002:	e038      	b.n	8006076 <USBD_GetDescriptor+0x286>
 8006004:	e037      	b.n	8006076 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	7c1b      	ldrb	r3, [r3, #16]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d109      	bne.n	8006022 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006014:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006016:	f107 0208 	add.w	r2, r7, #8
 800601a:	4610      	mov	r0, r2
 800601c:	4798      	blx	r3
 800601e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006020:	e029      	b.n	8006076 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006022:	6839      	ldr	r1, [r7, #0]
 8006024:	6878      	ldr	r0, [r7, #4]
 8006026:	f000 f9f6 	bl	8006416 <USBD_CtlError>
        err++;
 800602a:	7afb      	ldrb	r3, [r7, #11]
 800602c:	3301      	adds	r3, #1
 800602e:	72fb      	strb	r3, [r7, #11]
      break;
 8006030:	e021      	b.n	8006076 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	7c1b      	ldrb	r3, [r3, #16]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d10d      	bne.n	8006056 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006042:	f107 0208 	add.w	r2, r7, #8
 8006046:	4610      	mov	r0, r2
 8006048:	4798      	blx	r3
 800604a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	3301      	adds	r3, #1
 8006050:	2207      	movs	r2, #7
 8006052:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006054:	e00f      	b.n	8006076 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006056:	6839      	ldr	r1, [r7, #0]
 8006058:	6878      	ldr	r0, [r7, #4]
 800605a:	f000 f9dc 	bl	8006416 <USBD_CtlError>
        err++;
 800605e:	7afb      	ldrb	r3, [r7, #11]
 8006060:	3301      	adds	r3, #1
 8006062:	72fb      	strb	r3, [r7, #11]
      break;
 8006064:	e007      	b.n	8006076 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006066:	6839      	ldr	r1, [r7, #0]
 8006068:	6878      	ldr	r0, [r7, #4]
 800606a:	f000 f9d4 	bl	8006416 <USBD_CtlError>
      err++;
 800606e:	7afb      	ldrb	r3, [r7, #11]
 8006070:	3301      	adds	r3, #1
 8006072:	72fb      	strb	r3, [r7, #11]
      break;
 8006074:	bf00      	nop
  }

  if (err != 0U)
 8006076:	7afb      	ldrb	r3, [r7, #11]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d11c      	bne.n	80060b6 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800607c:	893b      	ldrh	r3, [r7, #8]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d011      	beq.n	80060a6 <USBD_GetDescriptor+0x2b6>
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	88db      	ldrh	r3, [r3, #6]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d00d      	beq.n	80060a6 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	88da      	ldrh	r2, [r3, #6]
 800608e:	893b      	ldrh	r3, [r7, #8]
 8006090:	4293      	cmp	r3, r2
 8006092:	bf28      	it	cs
 8006094:	4613      	movcs	r3, r2
 8006096:	b29b      	uxth	r3, r3
 8006098:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800609a:	893b      	ldrh	r3, [r7, #8]
 800609c:	461a      	mov	r2, r3
 800609e:	68f9      	ldr	r1, [r7, #12]
 80060a0:	6878      	ldr	r0, [r7, #4]
 80060a2:	f000 fa22 	bl	80064ea <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	88db      	ldrh	r3, [r3, #6]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d104      	bne.n	80060b8 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	f000 fa79 	bl	80065a6 <USBD_CtlSendStatus>
 80060b4:	e000      	b.n	80060b8 <USBD_GetDescriptor+0x2c8>
    return;
 80060b6:	bf00      	nop
    }
  }
}
 80060b8:	3710      	adds	r7, #16
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bd80      	pop	{r7, pc}
 80060be:	bf00      	nop

080060c0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b084      	sub	sp, #16
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
 80060c8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	889b      	ldrh	r3, [r3, #4]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d130      	bne.n	8006134 <USBD_SetAddress+0x74>
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	88db      	ldrh	r3, [r3, #6]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d12c      	bne.n	8006134 <USBD_SetAddress+0x74>
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	885b      	ldrh	r3, [r3, #2]
 80060de:	2b7f      	cmp	r3, #127	; 0x7f
 80060e0:	d828      	bhi.n	8006134 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	885b      	ldrh	r3, [r3, #2]
 80060e6:	b2db      	uxtb	r3, r3
 80060e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060ec:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060f4:	2b03      	cmp	r3, #3
 80060f6:	d104      	bne.n	8006102 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80060f8:	6839      	ldr	r1, [r7, #0]
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f000 f98b 	bl	8006416 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006100:	e01d      	b.n	800613e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	7bfa      	ldrb	r2, [r7, #15]
 8006106:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800610a:	7bfb      	ldrb	r3, [r7, #15]
 800610c:	4619      	mov	r1, r3
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	f000 fe68 	bl	8006de4 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8006114:	6878      	ldr	r0, [r7, #4]
 8006116:	f000 fa46 	bl	80065a6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800611a:	7bfb      	ldrb	r3, [r7, #15]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d004      	beq.n	800612a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2202      	movs	r2, #2
 8006124:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006128:	e009      	b.n	800613e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2201      	movs	r2, #1
 800612e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006132:	e004      	b.n	800613e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006134:	6839      	ldr	r1, [r7, #0]
 8006136:	6878      	ldr	r0, [r7, #4]
 8006138:	f000 f96d 	bl	8006416 <USBD_CtlError>
  }
}
 800613c:	bf00      	nop
 800613e:	bf00      	nop
 8006140:	3710      	adds	r7, #16
 8006142:	46bd      	mov	sp, r7
 8006144:	bd80      	pop	{r7, pc}
	...

08006148 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b082      	sub	sp, #8
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
 8006150:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	885b      	ldrh	r3, [r3, #2]
 8006156:	b2da      	uxtb	r2, r3
 8006158:	4b41      	ldr	r3, [pc, #260]	; (8006260 <USBD_SetConfig+0x118>)
 800615a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800615c:	4b40      	ldr	r3, [pc, #256]	; (8006260 <USBD_SetConfig+0x118>)
 800615e:	781b      	ldrb	r3, [r3, #0]
 8006160:	2b01      	cmp	r3, #1
 8006162:	d904      	bls.n	800616e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8006164:	6839      	ldr	r1, [r7, #0]
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	f000 f955 	bl	8006416 <USBD_CtlError>
 800616c:	e075      	b.n	800625a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006174:	2b02      	cmp	r3, #2
 8006176:	d002      	beq.n	800617e <USBD_SetConfig+0x36>
 8006178:	2b03      	cmp	r3, #3
 800617a:	d023      	beq.n	80061c4 <USBD_SetConfig+0x7c>
 800617c:	e062      	b.n	8006244 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800617e:	4b38      	ldr	r3, [pc, #224]	; (8006260 <USBD_SetConfig+0x118>)
 8006180:	781b      	ldrb	r3, [r3, #0]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d01a      	beq.n	80061bc <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8006186:	4b36      	ldr	r3, [pc, #216]	; (8006260 <USBD_SetConfig+0x118>)
 8006188:	781b      	ldrb	r3, [r3, #0]
 800618a:	461a      	mov	r2, r3
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2203      	movs	r2, #3
 8006194:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006198:	4b31      	ldr	r3, [pc, #196]	; (8006260 <USBD_SetConfig+0x118>)
 800619a:	781b      	ldrb	r3, [r3, #0]
 800619c:	4619      	mov	r1, r3
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	f7ff f9e7 	bl	8005572 <USBD_SetClassConfig>
 80061a4:	4603      	mov	r3, r0
 80061a6:	2b02      	cmp	r3, #2
 80061a8:	d104      	bne.n	80061b4 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80061aa:	6839      	ldr	r1, [r7, #0]
 80061ac:	6878      	ldr	r0, [r7, #4]
 80061ae:	f000 f932 	bl	8006416 <USBD_CtlError>
            return;
 80061b2:	e052      	b.n	800625a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80061b4:	6878      	ldr	r0, [r7, #4]
 80061b6:	f000 f9f6 	bl	80065a6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80061ba:	e04e      	b.n	800625a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80061bc:	6878      	ldr	r0, [r7, #4]
 80061be:	f000 f9f2 	bl	80065a6 <USBD_CtlSendStatus>
        break;
 80061c2:	e04a      	b.n	800625a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80061c4:	4b26      	ldr	r3, [pc, #152]	; (8006260 <USBD_SetConfig+0x118>)
 80061c6:	781b      	ldrb	r3, [r3, #0]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d112      	bne.n	80061f2 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2202      	movs	r2, #2
 80061d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80061d4:	4b22      	ldr	r3, [pc, #136]	; (8006260 <USBD_SetConfig+0x118>)
 80061d6:	781b      	ldrb	r3, [r3, #0]
 80061d8:	461a      	mov	r2, r3
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80061de:	4b20      	ldr	r3, [pc, #128]	; (8006260 <USBD_SetConfig+0x118>)
 80061e0:	781b      	ldrb	r3, [r3, #0]
 80061e2:	4619      	mov	r1, r3
 80061e4:	6878      	ldr	r0, [r7, #4]
 80061e6:	f7ff f9e3 	bl	80055b0 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f000 f9db 	bl	80065a6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80061f0:	e033      	b.n	800625a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80061f2:	4b1b      	ldr	r3, [pc, #108]	; (8006260 <USBD_SetConfig+0x118>)
 80061f4:	781b      	ldrb	r3, [r3, #0]
 80061f6:	461a      	mov	r2, r3
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	685b      	ldr	r3, [r3, #4]
 80061fc:	429a      	cmp	r2, r3
 80061fe:	d01d      	beq.n	800623c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	685b      	ldr	r3, [r3, #4]
 8006204:	b2db      	uxtb	r3, r3
 8006206:	4619      	mov	r1, r3
 8006208:	6878      	ldr	r0, [r7, #4]
 800620a:	f7ff f9d1 	bl	80055b0 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800620e:	4b14      	ldr	r3, [pc, #80]	; (8006260 <USBD_SetConfig+0x118>)
 8006210:	781b      	ldrb	r3, [r3, #0]
 8006212:	461a      	mov	r2, r3
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006218:	4b11      	ldr	r3, [pc, #68]	; (8006260 <USBD_SetConfig+0x118>)
 800621a:	781b      	ldrb	r3, [r3, #0]
 800621c:	4619      	mov	r1, r3
 800621e:	6878      	ldr	r0, [r7, #4]
 8006220:	f7ff f9a7 	bl	8005572 <USBD_SetClassConfig>
 8006224:	4603      	mov	r3, r0
 8006226:	2b02      	cmp	r3, #2
 8006228:	d104      	bne.n	8006234 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800622a:	6839      	ldr	r1, [r7, #0]
 800622c:	6878      	ldr	r0, [r7, #4]
 800622e:	f000 f8f2 	bl	8006416 <USBD_CtlError>
            return;
 8006232:	e012      	b.n	800625a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006234:	6878      	ldr	r0, [r7, #4]
 8006236:	f000 f9b6 	bl	80065a6 <USBD_CtlSendStatus>
        break;
 800623a:	e00e      	b.n	800625a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800623c:	6878      	ldr	r0, [r7, #4]
 800623e:	f000 f9b2 	bl	80065a6 <USBD_CtlSendStatus>
        break;
 8006242:	e00a      	b.n	800625a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8006244:	6839      	ldr	r1, [r7, #0]
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	f000 f8e5 	bl	8006416 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800624c:	4b04      	ldr	r3, [pc, #16]	; (8006260 <USBD_SetConfig+0x118>)
 800624e:	781b      	ldrb	r3, [r3, #0]
 8006250:	4619      	mov	r1, r3
 8006252:	6878      	ldr	r0, [r7, #4]
 8006254:	f7ff f9ac 	bl	80055b0 <USBD_ClrClassConfig>
        break;
 8006258:	bf00      	nop
    }
  }
}
 800625a:	3708      	adds	r7, #8
 800625c:	46bd      	mov	sp, r7
 800625e:	bd80      	pop	{r7, pc}
 8006260:	20000214 	.word	0x20000214

08006264 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b082      	sub	sp, #8
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
 800626c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	88db      	ldrh	r3, [r3, #6]
 8006272:	2b01      	cmp	r3, #1
 8006274:	d004      	beq.n	8006280 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006276:	6839      	ldr	r1, [r7, #0]
 8006278:	6878      	ldr	r0, [r7, #4]
 800627a:	f000 f8cc 	bl	8006416 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800627e:	e022      	b.n	80062c6 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006286:	2b02      	cmp	r3, #2
 8006288:	dc02      	bgt.n	8006290 <USBD_GetConfig+0x2c>
 800628a:	2b00      	cmp	r3, #0
 800628c:	dc03      	bgt.n	8006296 <USBD_GetConfig+0x32>
 800628e:	e015      	b.n	80062bc <USBD_GetConfig+0x58>
 8006290:	2b03      	cmp	r3, #3
 8006292:	d00b      	beq.n	80062ac <USBD_GetConfig+0x48>
 8006294:	e012      	b.n	80062bc <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2200      	movs	r2, #0
 800629a:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	3308      	adds	r3, #8
 80062a0:	2201      	movs	r2, #1
 80062a2:	4619      	mov	r1, r3
 80062a4:	6878      	ldr	r0, [r7, #4]
 80062a6:	f000 f920 	bl	80064ea <USBD_CtlSendData>
        break;
 80062aa:	e00c      	b.n	80062c6 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	3304      	adds	r3, #4
 80062b0:	2201      	movs	r2, #1
 80062b2:	4619      	mov	r1, r3
 80062b4:	6878      	ldr	r0, [r7, #4]
 80062b6:	f000 f918 	bl	80064ea <USBD_CtlSendData>
        break;
 80062ba:	e004      	b.n	80062c6 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 80062bc:	6839      	ldr	r1, [r7, #0]
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	f000 f8a9 	bl	8006416 <USBD_CtlError>
        break;
 80062c4:	bf00      	nop
}
 80062c6:	bf00      	nop
 80062c8:	3708      	adds	r7, #8
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bd80      	pop	{r7, pc}

080062ce <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80062ce:	b580      	push	{r7, lr}
 80062d0:	b082      	sub	sp, #8
 80062d2:	af00      	add	r7, sp, #0
 80062d4:	6078      	str	r0, [r7, #4]
 80062d6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062de:	3b01      	subs	r3, #1
 80062e0:	2b02      	cmp	r3, #2
 80062e2:	d81e      	bhi.n	8006322 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	88db      	ldrh	r3, [r3, #6]
 80062e8:	2b02      	cmp	r3, #2
 80062ea:	d004      	beq.n	80062f6 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80062ec:	6839      	ldr	r1, [r7, #0]
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f000 f891 	bl	8006416 <USBD_CtlError>
        break;
 80062f4:	e01a      	b.n	800632c <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2201      	movs	r2, #1
 80062fa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006302:	2b00      	cmp	r3, #0
 8006304:	d005      	beq.n	8006312 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	68db      	ldr	r3, [r3, #12]
 800630a:	f043 0202 	orr.w	r2, r3, #2
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	330c      	adds	r3, #12
 8006316:	2202      	movs	r2, #2
 8006318:	4619      	mov	r1, r3
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	f000 f8e5 	bl	80064ea <USBD_CtlSendData>
      break;
 8006320:	e004      	b.n	800632c <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8006322:	6839      	ldr	r1, [r7, #0]
 8006324:	6878      	ldr	r0, [r7, #4]
 8006326:	f000 f876 	bl	8006416 <USBD_CtlError>
      break;
 800632a:	bf00      	nop
  }
}
 800632c:	bf00      	nop
 800632e:	3708      	adds	r7, #8
 8006330:	46bd      	mov	sp, r7
 8006332:	bd80      	pop	{r7, pc}

08006334 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b082      	sub	sp, #8
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
 800633c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	885b      	ldrh	r3, [r3, #2]
 8006342:	2b01      	cmp	r3, #1
 8006344:	d106      	bne.n	8006354 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2201      	movs	r2, #1
 800634a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	f000 f929 	bl	80065a6 <USBD_CtlSendStatus>
  }
}
 8006354:	bf00      	nop
 8006356:	3708      	adds	r7, #8
 8006358:	46bd      	mov	sp, r7
 800635a:	bd80      	pop	{r7, pc}

0800635c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b082      	sub	sp, #8
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
 8006364:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800636c:	3b01      	subs	r3, #1
 800636e:	2b02      	cmp	r3, #2
 8006370:	d80b      	bhi.n	800638a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	885b      	ldrh	r3, [r3, #2]
 8006376:	2b01      	cmp	r3, #1
 8006378:	d10c      	bne.n	8006394 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2200      	movs	r2, #0
 800637e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	f000 f90f 	bl	80065a6 <USBD_CtlSendStatus>
      }
      break;
 8006388:	e004      	b.n	8006394 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800638a:	6839      	ldr	r1, [r7, #0]
 800638c:	6878      	ldr	r0, [r7, #4]
 800638e:	f000 f842 	bl	8006416 <USBD_CtlError>
      break;
 8006392:	e000      	b.n	8006396 <USBD_ClrFeature+0x3a>
      break;
 8006394:	bf00      	nop
  }
}
 8006396:	bf00      	nop
 8006398:	3708      	adds	r7, #8
 800639a:	46bd      	mov	sp, r7
 800639c:	bd80      	pop	{r7, pc}

0800639e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800639e:	b480      	push	{r7}
 80063a0:	b083      	sub	sp, #12
 80063a2:	af00      	add	r7, sp, #0
 80063a4:	6078      	str	r0, [r7, #4]
 80063a6:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	781a      	ldrb	r2, [r3, #0]
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	785a      	ldrb	r2, [r3, #1]
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	3302      	adds	r3, #2
 80063bc:	781b      	ldrb	r3, [r3, #0]
 80063be:	b29a      	uxth	r2, r3
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	3303      	adds	r3, #3
 80063c4:	781b      	ldrb	r3, [r3, #0]
 80063c6:	b29b      	uxth	r3, r3
 80063c8:	021b      	lsls	r3, r3, #8
 80063ca:	b29b      	uxth	r3, r3
 80063cc:	4413      	add	r3, r2
 80063ce:	b29a      	uxth	r2, r3
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	3304      	adds	r3, #4
 80063d8:	781b      	ldrb	r3, [r3, #0]
 80063da:	b29a      	uxth	r2, r3
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	3305      	adds	r3, #5
 80063e0:	781b      	ldrb	r3, [r3, #0]
 80063e2:	b29b      	uxth	r3, r3
 80063e4:	021b      	lsls	r3, r3, #8
 80063e6:	b29b      	uxth	r3, r3
 80063e8:	4413      	add	r3, r2
 80063ea:	b29a      	uxth	r2, r3
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	3306      	adds	r3, #6
 80063f4:	781b      	ldrb	r3, [r3, #0]
 80063f6:	b29a      	uxth	r2, r3
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	3307      	adds	r3, #7
 80063fc:	781b      	ldrb	r3, [r3, #0]
 80063fe:	b29b      	uxth	r3, r3
 8006400:	021b      	lsls	r3, r3, #8
 8006402:	b29b      	uxth	r3, r3
 8006404:	4413      	add	r3, r2
 8006406:	b29a      	uxth	r2, r3
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	80da      	strh	r2, [r3, #6]

}
 800640c:	bf00      	nop
 800640e:	370c      	adds	r7, #12
 8006410:	46bd      	mov	sp, r7
 8006412:	bc80      	pop	{r7}
 8006414:	4770      	bx	lr

08006416 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8006416:	b580      	push	{r7, lr}
 8006418:	b082      	sub	sp, #8
 800641a:	af00      	add	r7, sp, #0
 800641c:	6078      	str	r0, [r7, #4]
 800641e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8006420:	2180      	movs	r1, #128	; 0x80
 8006422:	6878      	ldr	r0, [r7, #4]
 8006424:	f000 fc74 	bl	8006d10 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8006428:	2100      	movs	r1, #0
 800642a:	6878      	ldr	r0, [r7, #4]
 800642c:	f000 fc70 	bl	8006d10 <USBD_LL_StallEP>
}
 8006430:	bf00      	nop
 8006432:	3708      	adds	r7, #8
 8006434:	46bd      	mov	sp, r7
 8006436:	bd80      	pop	{r7, pc}

08006438 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b086      	sub	sp, #24
 800643c:	af00      	add	r7, sp, #0
 800643e:	60f8      	str	r0, [r7, #12]
 8006440:	60b9      	str	r1, [r7, #8]
 8006442:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006444:	2300      	movs	r3, #0
 8006446:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d032      	beq.n	80064b4 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800644e:	68f8      	ldr	r0, [r7, #12]
 8006450:	f000 f834 	bl	80064bc <USBD_GetLen>
 8006454:	4603      	mov	r3, r0
 8006456:	3301      	adds	r3, #1
 8006458:	b29b      	uxth	r3, r3
 800645a:	005b      	lsls	r3, r3, #1
 800645c:	b29a      	uxth	r2, r3
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8006462:	7dfb      	ldrb	r3, [r7, #23]
 8006464:	1c5a      	adds	r2, r3, #1
 8006466:	75fa      	strb	r2, [r7, #23]
 8006468:	461a      	mov	r2, r3
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	4413      	add	r3, r2
 800646e:	687a      	ldr	r2, [r7, #4]
 8006470:	7812      	ldrb	r2, [r2, #0]
 8006472:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8006474:	7dfb      	ldrb	r3, [r7, #23]
 8006476:	1c5a      	adds	r2, r3, #1
 8006478:	75fa      	strb	r2, [r7, #23]
 800647a:	461a      	mov	r2, r3
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	4413      	add	r3, r2
 8006480:	2203      	movs	r2, #3
 8006482:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8006484:	e012      	b.n	80064ac <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	1c5a      	adds	r2, r3, #1
 800648a:	60fa      	str	r2, [r7, #12]
 800648c:	7dfa      	ldrb	r2, [r7, #23]
 800648e:	1c51      	adds	r1, r2, #1
 8006490:	75f9      	strb	r1, [r7, #23]
 8006492:	4611      	mov	r1, r2
 8006494:	68ba      	ldr	r2, [r7, #8]
 8006496:	440a      	add	r2, r1
 8006498:	781b      	ldrb	r3, [r3, #0]
 800649a:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800649c:	7dfb      	ldrb	r3, [r7, #23]
 800649e:	1c5a      	adds	r2, r3, #1
 80064a0:	75fa      	strb	r2, [r7, #23]
 80064a2:	461a      	mov	r2, r3
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	4413      	add	r3, r2
 80064a8:	2200      	movs	r2, #0
 80064aa:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	781b      	ldrb	r3, [r3, #0]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d1e8      	bne.n	8006486 <USBD_GetString+0x4e>
    }
  }
}
 80064b4:	bf00      	nop
 80064b6:	3718      	adds	r7, #24
 80064b8:	46bd      	mov	sp, r7
 80064ba:	bd80      	pop	{r7, pc}

080064bc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80064bc:	b480      	push	{r7}
 80064be:	b085      	sub	sp, #20
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80064c4:	2300      	movs	r3, #0
 80064c6:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80064c8:	e005      	b.n	80064d6 <USBD_GetLen+0x1a>
  {
    len++;
 80064ca:	7bfb      	ldrb	r3, [r7, #15]
 80064cc:	3301      	adds	r3, #1
 80064ce:	73fb      	strb	r3, [r7, #15]
    buf++;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	3301      	adds	r3, #1
 80064d4:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	781b      	ldrb	r3, [r3, #0]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d1f5      	bne.n	80064ca <USBD_GetLen+0xe>
  }

  return len;
 80064de:	7bfb      	ldrb	r3, [r7, #15]
}
 80064e0:	4618      	mov	r0, r3
 80064e2:	3714      	adds	r7, #20
 80064e4:	46bd      	mov	sp, r7
 80064e6:	bc80      	pop	{r7}
 80064e8:	4770      	bx	lr

080064ea <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80064ea:	b580      	push	{r7, lr}
 80064ec:	b084      	sub	sp, #16
 80064ee:	af00      	add	r7, sp, #0
 80064f0:	60f8      	str	r0, [r7, #12]
 80064f2:	60b9      	str	r1, [r7, #8]
 80064f4:	4613      	mov	r3, r2
 80064f6:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	2202      	movs	r2, #2
 80064fc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006500:	88fa      	ldrh	r2, [r7, #6]
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8006506:	88fa      	ldrh	r2, [r7, #6]
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800650c:	88fb      	ldrh	r3, [r7, #6]
 800650e:	68ba      	ldr	r2, [r7, #8]
 8006510:	2100      	movs	r1, #0
 8006512:	68f8      	ldr	r0, [r7, #12]
 8006514:	f000 fc85 	bl	8006e22 <USBD_LL_Transmit>

  return USBD_OK;
 8006518:	2300      	movs	r3, #0
}
 800651a:	4618      	mov	r0, r3
 800651c:	3710      	adds	r7, #16
 800651e:	46bd      	mov	sp, r7
 8006520:	bd80      	pop	{r7, pc}

08006522 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8006522:	b580      	push	{r7, lr}
 8006524:	b084      	sub	sp, #16
 8006526:	af00      	add	r7, sp, #0
 8006528:	60f8      	str	r0, [r7, #12]
 800652a:	60b9      	str	r1, [r7, #8]
 800652c:	4613      	mov	r3, r2
 800652e:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006530:	88fb      	ldrh	r3, [r7, #6]
 8006532:	68ba      	ldr	r2, [r7, #8]
 8006534:	2100      	movs	r1, #0
 8006536:	68f8      	ldr	r0, [r7, #12]
 8006538:	f000 fc73 	bl	8006e22 <USBD_LL_Transmit>

  return USBD_OK;
 800653c:	2300      	movs	r3, #0
}
 800653e:	4618      	mov	r0, r3
 8006540:	3710      	adds	r7, #16
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}

08006546 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8006546:	b580      	push	{r7, lr}
 8006548:	b084      	sub	sp, #16
 800654a:	af00      	add	r7, sp, #0
 800654c:	60f8      	str	r0, [r7, #12]
 800654e:	60b9      	str	r1, [r7, #8]
 8006550:	4613      	mov	r3, r2
 8006552:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	2203      	movs	r2, #3
 8006558:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800655c:	88fa      	ldrh	r2, [r7, #6]
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8006564:	88fa      	ldrh	r2, [r7, #6]
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800656c:	88fb      	ldrh	r3, [r7, #6]
 800656e:	68ba      	ldr	r2, [r7, #8]
 8006570:	2100      	movs	r1, #0
 8006572:	68f8      	ldr	r0, [r7, #12]
 8006574:	f000 fc78 	bl	8006e68 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006578:	2300      	movs	r3, #0
}
 800657a:	4618      	mov	r0, r3
 800657c:	3710      	adds	r7, #16
 800657e:	46bd      	mov	sp, r7
 8006580:	bd80      	pop	{r7, pc}

08006582 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8006582:	b580      	push	{r7, lr}
 8006584:	b084      	sub	sp, #16
 8006586:	af00      	add	r7, sp, #0
 8006588:	60f8      	str	r0, [r7, #12]
 800658a:	60b9      	str	r1, [r7, #8]
 800658c:	4613      	mov	r3, r2
 800658e:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006590:	88fb      	ldrh	r3, [r7, #6]
 8006592:	68ba      	ldr	r2, [r7, #8]
 8006594:	2100      	movs	r1, #0
 8006596:	68f8      	ldr	r0, [r7, #12]
 8006598:	f000 fc66 	bl	8006e68 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800659c:	2300      	movs	r3, #0
}
 800659e:	4618      	mov	r0, r3
 80065a0:	3710      	adds	r7, #16
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bd80      	pop	{r7, pc}

080065a6 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80065a6:	b580      	push	{r7, lr}
 80065a8:	b082      	sub	sp, #8
 80065aa:	af00      	add	r7, sp, #0
 80065ac:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2204      	movs	r2, #4
 80065b2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80065b6:	2300      	movs	r3, #0
 80065b8:	2200      	movs	r2, #0
 80065ba:	2100      	movs	r1, #0
 80065bc:	6878      	ldr	r0, [r7, #4]
 80065be:	f000 fc30 	bl	8006e22 <USBD_LL_Transmit>

  return USBD_OK;
 80065c2:	2300      	movs	r3, #0
}
 80065c4:	4618      	mov	r0, r3
 80065c6:	3708      	adds	r7, #8
 80065c8:	46bd      	mov	sp, r7
 80065ca:	bd80      	pop	{r7, pc}

080065cc <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b082      	sub	sp, #8
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2205      	movs	r2, #5
 80065d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80065dc:	2300      	movs	r3, #0
 80065de:	2200      	movs	r2, #0
 80065e0:	2100      	movs	r1, #0
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	f000 fc40 	bl	8006e68 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80065e8:	2300      	movs	r3, #0
}
 80065ea:	4618      	mov	r0, r3
 80065ec:	3708      	adds	r7, #8
 80065ee:	46bd      	mov	sp, r7
 80065f0:	bd80      	pop	{r7, pc}
	...

080065f4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80065f8:	2200      	movs	r2, #0
 80065fa:	4912      	ldr	r1, [pc, #72]	; (8006644 <MX_USB_DEVICE_Init+0x50>)
 80065fc:	4812      	ldr	r0, [pc, #72]	; (8006648 <MX_USB_DEVICE_Init+0x54>)
 80065fe:	f7fe ff5e 	bl	80054be <USBD_Init>
 8006602:	4603      	mov	r3, r0
 8006604:	2b00      	cmp	r3, #0
 8006606:	d001      	beq.n	800660c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006608:	f7f9 fe36 	bl	8000278 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800660c:	490f      	ldr	r1, [pc, #60]	; (800664c <MX_USB_DEVICE_Init+0x58>)
 800660e:	480e      	ldr	r0, [pc, #56]	; (8006648 <MX_USB_DEVICE_Init+0x54>)
 8006610:	f7fe ff80 	bl	8005514 <USBD_RegisterClass>
 8006614:	4603      	mov	r3, r0
 8006616:	2b00      	cmp	r3, #0
 8006618:	d001      	beq.n	800661e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800661a:	f7f9 fe2d 	bl	8000278 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800661e:	490c      	ldr	r1, [pc, #48]	; (8006650 <MX_USB_DEVICE_Init+0x5c>)
 8006620:	4809      	ldr	r0, [pc, #36]	; (8006648 <MX_USB_DEVICE_Init+0x54>)
 8006622:	f7fe feb1 	bl	8005388 <USBD_CDC_RegisterInterface>
 8006626:	4603      	mov	r3, r0
 8006628:	2b00      	cmp	r3, #0
 800662a:	d001      	beq.n	8006630 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800662c:	f7f9 fe24 	bl	8000278 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006630:	4805      	ldr	r0, [pc, #20]	; (8006648 <MX_USB_DEVICE_Init+0x54>)
 8006632:	f7fe ff88 	bl	8005546 <USBD_Start>
 8006636:	4603      	mov	r3, r0
 8006638:	2b00      	cmp	r3, #0
 800663a:	d001      	beq.n	8006640 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800663c:	f7f9 fe1c 	bl	8000278 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006640:	bf00      	nop
 8006642:	bd80      	pop	{r7, pc}
 8006644:	20000140 	.word	0x20000140
 8006648:	20000444 	.word	0x20000444
 800664c:	2000002c 	.word	0x2000002c
 8006650:	20000130 	.word	0x20000130

08006654 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006658:	2200      	movs	r2, #0
 800665a:	4905      	ldr	r1, [pc, #20]	; (8006670 <CDC_Init_FS+0x1c>)
 800665c:	4805      	ldr	r0, [pc, #20]	; (8006674 <CDC_Init_FS+0x20>)
 800665e:	f7fe fea9 	bl	80053b4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006662:	4905      	ldr	r1, [pc, #20]	; (8006678 <CDC_Init_FS+0x24>)
 8006664:	4803      	ldr	r0, [pc, #12]	; (8006674 <CDC_Init_FS+0x20>)
 8006666:	f7fe febe 	bl	80053e6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800666a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800666c:	4618      	mov	r0, r3
 800666e:	bd80      	pop	{r7, pc}
 8006670:	20000af0 	.word	0x20000af0
 8006674:	20000444 	.word	0x20000444
 8006678:	20000708 	.word	0x20000708

0800667c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800667c:	b480      	push	{r7}
 800667e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006680:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006682:	4618      	mov	r0, r3
 8006684:	46bd      	mov	sp, r7
 8006686:	bc80      	pop	{r7}
 8006688:	4770      	bx	lr
	...

0800668c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800668c:	b480      	push	{r7}
 800668e:	b083      	sub	sp, #12
 8006690:	af00      	add	r7, sp, #0
 8006692:	4603      	mov	r3, r0
 8006694:	6039      	str	r1, [r7, #0]
 8006696:	71fb      	strb	r3, [r7, #7]
 8006698:	4613      	mov	r3, r2
 800669a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800669c:	79fb      	ldrb	r3, [r7, #7]
 800669e:	2b23      	cmp	r3, #35	; 0x23
 80066a0:	d84a      	bhi.n	8006738 <CDC_Control_FS+0xac>
 80066a2:	a201      	add	r2, pc, #4	; (adr r2, 80066a8 <CDC_Control_FS+0x1c>)
 80066a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066a8:	08006739 	.word	0x08006739
 80066ac:	08006739 	.word	0x08006739
 80066b0:	08006739 	.word	0x08006739
 80066b4:	08006739 	.word	0x08006739
 80066b8:	08006739 	.word	0x08006739
 80066bc:	08006739 	.word	0x08006739
 80066c0:	08006739 	.word	0x08006739
 80066c4:	08006739 	.word	0x08006739
 80066c8:	08006739 	.word	0x08006739
 80066cc:	08006739 	.word	0x08006739
 80066d0:	08006739 	.word	0x08006739
 80066d4:	08006739 	.word	0x08006739
 80066d8:	08006739 	.word	0x08006739
 80066dc:	08006739 	.word	0x08006739
 80066e0:	08006739 	.word	0x08006739
 80066e4:	08006739 	.word	0x08006739
 80066e8:	08006739 	.word	0x08006739
 80066ec:	08006739 	.word	0x08006739
 80066f0:	08006739 	.word	0x08006739
 80066f4:	08006739 	.word	0x08006739
 80066f8:	08006739 	.word	0x08006739
 80066fc:	08006739 	.word	0x08006739
 8006700:	08006739 	.word	0x08006739
 8006704:	08006739 	.word	0x08006739
 8006708:	08006739 	.word	0x08006739
 800670c:	08006739 	.word	0x08006739
 8006710:	08006739 	.word	0x08006739
 8006714:	08006739 	.word	0x08006739
 8006718:	08006739 	.word	0x08006739
 800671c:	08006739 	.word	0x08006739
 8006720:	08006739 	.word	0x08006739
 8006724:	08006739 	.word	0x08006739
 8006728:	08006739 	.word	0x08006739
 800672c:	08006739 	.word	0x08006739
 8006730:	08006739 	.word	0x08006739
 8006734:	08006739 	.word	0x08006739
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006738:	bf00      	nop
  }

  return (USBD_OK);
 800673a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800673c:	4618      	mov	r0, r3
 800673e:	370c      	adds	r7, #12
 8006740:	46bd      	mov	sp, r7
 8006742:	bc80      	pop	{r7}
 8006744:	4770      	bx	lr
 8006746:	bf00      	nop

08006748 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b082      	sub	sp, #8
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
 8006750:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006752:	6879      	ldr	r1, [r7, #4]
 8006754:	4805      	ldr	r0, [pc, #20]	; (800676c <CDC_Receive_FS+0x24>)
 8006756:	f7fe fe46 	bl	80053e6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800675a:	4804      	ldr	r0, [pc, #16]	; (800676c <CDC_Receive_FS+0x24>)
 800675c:	f7fe fe85 	bl	800546a <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8006760:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006762:	4618      	mov	r0, r3
 8006764:	3708      	adds	r7, #8
 8006766:	46bd      	mov	sp, r7
 8006768:	bd80      	pop	{r7, pc}
 800676a:	bf00      	nop
 800676c:	20000444 	.word	0x20000444

08006770 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b084      	sub	sp, #16
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
 8006778:	460b      	mov	r3, r1
 800677a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800677c:	2300      	movs	r3, #0
 800677e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8006780:	4b0d      	ldr	r3, [pc, #52]	; (80067b8 <CDC_Transmit_FS+0x48>)
 8006782:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006786:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8006788:	68bb      	ldr	r3, [r7, #8]
 800678a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800678e:	2b00      	cmp	r3, #0
 8006790:	d001      	beq.n	8006796 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8006792:	2301      	movs	r3, #1
 8006794:	e00b      	b.n	80067ae <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8006796:	887b      	ldrh	r3, [r7, #2]
 8006798:	461a      	mov	r2, r3
 800679a:	6879      	ldr	r1, [r7, #4]
 800679c:	4806      	ldr	r0, [pc, #24]	; (80067b8 <CDC_Transmit_FS+0x48>)
 800679e:	f7fe fe09 	bl	80053b4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80067a2:	4805      	ldr	r0, [pc, #20]	; (80067b8 <CDC_Transmit_FS+0x48>)
 80067a4:	f7fe fe32 	bl	800540c <USBD_CDC_TransmitPacket>
 80067a8:	4603      	mov	r3, r0
 80067aa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80067ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80067ae:	4618      	mov	r0, r3
 80067b0:	3710      	adds	r7, #16
 80067b2:	46bd      	mov	sp, r7
 80067b4:	bd80      	pop	{r7, pc}
 80067b6:	bf00      	nop
 80067b8:	20000444 	.word	0x20000444

080067bc <usb_send>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void usb_send(const char *format, ...)
{
 80067bc:	b40f      	push	{r0, r1, r2, r3}
 80067be:	b580      	push	{r7, lr}
 80067c0:	b082      	sub	sp, #8
 80067c2:	af00      	add	r7, sp, #0
    va_list args;
    uint32_t length;

    va_start(args, format);
 80067c4:	f107 0314 	add.w	r3, r7, #20
 80067c8:	603b      	str	r3, [r7, #0]
    length = vsnprintf((char *)UserTxBufferFS, APP_TX_DATA_SIZE, (char *)format, args);
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	693a      	ldr	r2, [r7, #16]
 80067ce:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80067d2:	4809      	ldr	r0, [pc, #36]	; (80067f8 <usb_send+0x3c>)
 80067d4:	f000 fc28 	bl	8007028 <vsniprintf>
 80067d8:	4603      	mov	r3, r0
 80067da:	607b      	str	r3, [r7, #4]
    va_end(args);
    CDC_Transmit_FS(UserTxBufferFS, length);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	b29b      	uxth	r3, r3
 80067e0:	4619      	mov	r1, r3
 80067e2:	4805      	ldr	r0, [pc, #20]	; (80067f8 <usb_send+0x3c>)
 80067e4:	f7ff ffc4 	bl	8006770 <CDC_Transmit_FS>
}
 80067e8:	bf00      	nop
 80067ea:	3708      	adds	r7, #8
 80067ec:	46bd      	mov	sp, r7
 80067ee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80067f2:	b004      	add	sp, #16
 80067f4:	4770      	bx	lr
 80067f6:	bf00      	nop
 80067f8:	20000af0 	.word	0x20000af0

080067fc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80067fc:	b480      	push	{r7}
 80067fe:	b083      	sub	sp, #12
 8006800:	af00      	add	r7, sp, #0
 8006802:	4603      	mov	r3, r0
 8006804:	6039      	str	r1, [r7, #0]
 8006806:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	2212      	movs	r2, #18
 800680c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800680e:	4b03      	ldr	r3, [pc, #12]	; (800681c <USBD_FS_DeviceDescriptor+0x20>)
}
 8006810:	4618      	mov	r0, r3
 8006812:	370c      	adds	r7, #12
 8006814:	46bd      	mov	sp, r7
 8006816:	bc80      	pop	{r7}
 8006818:	4770      	bx	lr
 800681a:	bf00      	nop
 800681c:	2000015c 	.word	0x2000015c

08006820 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006820:	b480      	push	{r7}
 8006822:	b083      	sub	sp, #12
 8006824:	af00      	add	r7, sp, #0
 8006826:	4603      	mov	r3, r0
 8006828:	6039      	str	r1, [r7, #0]
 800682a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	2204      	movs	r2, #4
 8006830:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006832:	4b03      	ldr	r3, [pc, #12]	; (8006840 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006834:	4618      	mov	r0, r3
 8006836:	370c      	adds	r7, #12
 8006838:	46bd      	mov	sp, r7
 800683a:	bc80      	pop	{r7}
 800683c:	4770      	bx	lr
 800683e:	bf00      	nop
 8006840:	20000170 	.word	0x20000170

08006844 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b082      	sub	sp, #8
 8006848:	af00      	add	r7, sp, #0
 800684a:	4603      	mov	r3, r0
 800684c:	6039      	str	r1, [r7, #0]
 800684e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006850:	79fb      	ldrb	r3, [r7, #7]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d105      	bne.n	8006862 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006856:	683a      	ldr	r2, [r7, #0]
 8006858:	4907      	ldr	r1, [pc, #28]	; (8006878 <USBD_FS_ProductStrDescriptor+0x34>)
 800685a:	4808      	ldr	r0, [pc, #32]	; (800687c <USBD_FS_ProductStrDescriptor+0x38>)
 800685c:	f7ff fdec 	bl	8006438 <USBD_GetString>
 8006860:	e004      	b.n	800686c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006862:	683a      	ldr	r2, [r7, #0]
 8006864:	4904      	ldr	r1, [pc, #16]	; (8006878 <USBD_FS_ProductStrDescriptor+0x34>)
 8006866:	4805      	ldr	r0, [pc, #20]	; (800687c <USBD_FS_ProductStrDescriptor+0x38>)
 8006868:	f7ff fde6 	bl	8006438 <USBD_GetString>
  }
  return USBD_StrDesc;
 800686c:	4b02      	ldr	r3, [pc, #8]	; (8006878 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800686e:	4618      	mov	r0, r3
 8006870:	3708      	adds	r7, #8
 8006872:	46bd      	mov	sp, r7
 8006874:	bd80      	pop	{r7, pc}
 8006876:	bf00      	nop
 8006878:	20000ed8 	.word	0x20000ed8
 800687c:	080078a8 	.word	0x080078a8

08006880 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b082      	sub	sp, #8
 8006884:	af00      	add	r7, sp, #0
 8006886:	4603      	mov	r3, r0
 8006888:	6039      	str	r1, [r7, #0]
 800688a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800688c:	683a      	ldr	r2, [r7, #0]
 800688e:	4904      	ldr	r1, [pc, #16]	; (80068a0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006890:	4804      	ldr	r0, [pc, #16]	; (80068a4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006892:	f7ff fdd1 	bl	8006438 <USBD_GetString>
  return USBD_StrDesc;
 8006896:	4b02      	ldr	r3, [pc, #8]	; (80068a0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006898:	4618      	mov	r0, r3
 800689a:	3708      	adds	r7, #8
 800689c:	46bd      	mov	sp, r7
 800689e:	bd80      	pop	{r7, pc}
 80068a0:	20000ed8 	.word	0x20000ed8
 80068a4:	080078c0 	.word	0x080078c0

080068a8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b082      	sub	sp, #8
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	4603      	mov	r3, r0
 80068b0:	6039      	str	r1, [r7, #0]
 80068b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	221a      	movs	r2, #26
 80068b8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80068ba:	f000 f843 	bl	8006944 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80068be:	4b02      	ldr	r3, [pc, #8]	; (80068c8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80068c0:	4618      	mov	r0, r3
 80068c2:	3708      	adds	r7, #8
 80068c4:	46bd      	mov	sp, r7
 80068c6:	bd80      	pop	{r7, pc}
 80068c8:	20000174 	.word	0x20000174

080068cc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b082      	sub	sp, #8
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	4603      	mov	r3, r0
 80068d4:	6039      	str	r1, [r7, #0]
 80068d6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80068d8:	79fb      	ldrb	r3, [r7, #7]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d105      	bne.n	80068ea <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80068de:	683a      	ldr	r2, [r7, #0]
 80068e0:	4907      	ldr	r1, [pc, #28]	; (8006900 <USBD_FS_ConfigStrDescriptor+0x34>)
 80068e2:	4808      	ldr	r0, [pc, #32]	; (8006904 <USBD_FS_ConfigStrDescriptor+0x38>)
 80068e4:	f7ff fda8 	bl	8006438 <USBD_GetString>
 80068e8:	e004      	b.n	80068f4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80068ea:	683a      	ldr	r2, [r7, #0]
 80068ec:	4904      	ldr	r1, [pc, #16]	; (8006900 <USBD_FS_ConfigStrDescriptor+0x34>)
 80068ee:	4805      	ldr	r0, [pc, #20]	; (8006904 <USBD_FS_ConfigStrDescriptor+0x38>)
 80068f0:	f7ff fda2 	bl	8006438 <USBD_GetString>
  }
  return USBD_StrDesc;
 80068f4:	4b02      	ldr	r3, [pc, #8]	; (8006900 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80068f6:	4618      	mov	r0, r3
 80068f8:	3708      	adds	r7, #8
 80068fa:	46bd      	mov	sp, r7
 80068fc:	bd80      	pop	{r7, pc}
 80068fe:	bf00      	nop
 8006900:	20000ed8 	.word	0x20000ed8
 8006904:	080078d4 	.word	0x080078d4

08006908 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b082      	sub	sp, #8
 800690c:	af00      	add	r7, sp, #0
 800690e:	4603      	mov	r3, r0
 8006910:	6039      	str	r1, [r7, #0]
 8006912:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006914:	79fb      	ldrb	r3, [r7, #7]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d105      	bne.n	8006926 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800691a:	683a      	ldr	r2, [r7, #0]
 800691c:	4907      	ldr	r1, [pc, #28]	; (800693c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800691e:	4808      	ldr	r0, [pc, #32]	; (8006940 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006920:	f7ff fd8a 	bl	8006438 <USBD_GetString>
 8006924:	e004      	b.n	8006930 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006926:	683a      	ldr	r2, [r7, #0]
 8006928:	4904      	ldr	r1, [pc, #16]	; (800693c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800692a:	4805      	ldr	r0, [pc, #20]	; (8006940 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800692c:	f7ff fd84 	bl	8006438 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006930:	4b02      	ldr	r3, [pc, #8]	; (800693c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006932:	4618      	mov	r0, r3
 8006934:	3708      	adds	r7, #8
 8006936:	46bd      	mov	sp, r7
 8006938:	bd80      	pop	{r7, pc}
 800693a:	bf00      	nop
 800693c:	20000ed8 	.word	0x20000ed8
 8006940:	080078e0 	.word	0x080078e0

08006944 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b084      	sub	sp, #16
 8006948:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800694a:	4b0f      	ldr	r3, [pc, #60]	; (8006988 <Get_SerialNum+0x44>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006950:	4b0e      	ldr	r3, [pc, #56]	; (800698c <Get_SerialNum+0x48>)
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006956:	4b0e      	ldr	r3, [pc, #56]	; (8006990 <Get_SerialNum+0x4c>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800695c:	68fa      	ldr	r2, [r7, #12]
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	4413      	add	r3, r2
 8006962:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d009      	beq.n	800697e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800696a:	2208      	movs	r2, #8
 800696c:	4909      	ldr	r1, [pc, #36]	; (8006994 <Get_SerialNum+0x50>)
 800696e:	68f8      	ldr	r0, [r7, #12]
 8006970:	f000 f814 	bl	800699c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006974:	2204      	movs	r2, #4
 8006976:	4908      	ldr	r1, [pc, #32]	; (8006998 <Get_SerialNum+0x54>)
 8006978:	68b8      	ldr	r0, [r7, #8]
 800697a:	f000 f80f 	bl	800699c <IntToUnicode>
  }
}
 800697e:	bf00      	nop
 8006980:	3710      	adds	r7, #16
 8006982:	46bd      	mov	sp, r7
 8006984:	bd80      	pop	{r7, pc}
 8006986:	bf00      	nop
 8006988:	1ffff7e8 	.word	0x1ffff7e8
 800698c:	1ffff7ec 	.word	0x1ffff7ec
 8006990:	1ffff7f0 	.word	0x1ffff7f0
 8006994:	20000176 	.word	0x20000176
 8006998:	20000186 	.word	0x20000186

0800699c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800699c:	b480      	push	{r7}
 800699e:	b087      	sub	sp, #28
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	60f8      	str	r0, [r7, #12]
 80069a4:	60b9      	str	r1, [r7, #8]
 80069a6:	4613      	mov	r3, r2
 80069a8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80069aa:	2300      	movs	r3, #0
 80069ac:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80069ae:	2300      	movs	r3, #0
 80069b0:	75fb      	strb	r3, [r7, #23]
 80069b2:	e027      	b.n	8006a04 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	0f1b      	lsrs	r3, r3, #28
 80069b8:	2b09      	cmp	r3, #9
 80069ba:	d80b      	bhi.n	80069d4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	0f1b      	lsrs	r3, r3, #28
 80069c0:	b2da      	uxtb	r2, r3
 80069c2:	7dfb      	ldrb	r3, [r7, #23]
 80069c4:	005b      	lsls	r3, r3, #1
 80069c6:	4619      	mov	r1, r3
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	440b      	add	r3, r1
 80069cc:	3230      	adds	r2, #48	; 0x30
 80069ce:	b2d2      	uxtb	r2, r2
 80069d0:	701a      	strb	r2, [r3, #0]
 80069d2:	e00a      	b.n	80069ea <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	0f1b      	lsrs	r3, r3, #28
 80069d8:	b2da      	uxtb	r2, r3
 80069da:	7dfb      	ldrb	r3, [r7, #23]
 80069dc:	005b      	lsls	r3, r3, #1
 80069de:	4619      	mov	r1, r3
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	440b      	add	r3, r1
 80069e4:	3237      	adds	r2, #55	; 0x37
 80069e6:	b2d2      	uxtb	r2, r2
 80069e8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	011b      	lsls	r3, r3, #4
 80069ee:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80069f0:	7dfb      	ldrb	r3, [r7, #23]
 80069f2:	005b      	lsls	r3, r3, #1
 80069f4:	3301      	adds	r3, #1
 80069f6:	68ba      	ldr	r2, [r7, #8]
 80069f8:	4413      	add	r3, r2
 80069fa:	2200      	movs	r2, #0
 80069fc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80069fe:	7dfb      	ldrb	r3, [r7, #23]
 8006a00:	3301      	adds	r3, #1
 8006a02:	75fb      	strb	r3, [r7, #23]
 8006a04:	7dfa      	ldrb	r2, [r7, #23]
 8006a06:	79fb      	ldrb	r3, [r7, #7]
 8006a08:	429a      	cmp	r2, r3
 8006a0a:	d3d3      	bcc.n	80069b4 <IntToUnicode+0x18>
  }
}
 8006a0c:	bf00      	nop
 8006a0e:	bf00      	nop
 8006a10:	371c      	adds	r7, #28
 8006a12:	46bd      	mov	sp, r7
 8006a14:	bc80      	pop	{r7}
 8006a16:	4770      	bx	lr

08006a18 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b084      	sub	sp, #16
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4a0d      	ldr	r2, [pc, #52]	; (8006a5c <HAL_PCD_MspInit+0x44>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d113      	bne.n	8006a52 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8006a2a:	4b0d      	ldr	r3, [pc, #52]	; (8006a60 <HAL_PCD_MspInit+0x48>)
 8006a2c:	69db      	ldr	r3, [r3, #28]
 8006a2e:	4a0c      	ldr	r2, [pc, #48]	; (8006a60 <HAL_PCD_MspInit+0x48>)
 8006a30:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006a34:	61d3      	str	r3, [r2, #28]
 8006a36:	4b0a      	ldr	r3, [pc, #40]	; (8006a60 <HAL_PCD_MspInit+0x48>)
 8006a38:	69db      	ldr	r3, [r3, #28]
 8006a3a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006a3e:	60fb      	str	r3, [r7, #12]
 8006a40:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8006a42:	2200      	movs	r2, #0
 8006a44:	2100      	movs	r1, #0
 8006a46:	2014      	movs	r0, #20
 8006a48:	f7f9 fe3f 	bl	80006ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8006a4c:	2014      	movs	r0, #20
 8006a4e:	f7f9 fe58 	bl	8000702 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8006a52:	bf00      	nop
 8006a54:	3710      	adds	r7, #16
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bd80      	pop	{r7, pc}
 8006a5a:	bf00      	nop
 8006a5c:	40005c00 	.word	0x40005c00
 8006a60:	40021000 	.word	0x40021000

08006a64 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b082      	sub	sp, #8
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8006a78:	4619      	mov	r1, r3
 8006a7a:	4610      	mov	r0, r2
 8006a7c:	f7fe fdab 	bl	80055d6 <USBD_LL_SetupStage>
}
 8006a80:	bf00      	nop
 8006a82:	3708      	adds	r7, #8
 8006a84:	46bd      	mov	sp, r7
 8006a86:	bd80      	pop	{r7, pc}

08006a88 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b082      	sub	sp, #8
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
 8006a90:	460b      	mov	r3, r1
 8006a92:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8006a9a:	78fa      	ldrb	r2, [r7, #3]
 8006a9c:	6879      	ldr	r1, [r7, #4]
 8006a9e:	4613      	mov	r3, r2
 8006aa0:	009b      	lsls	r3, r3, #2
 8006aa2:	4413      	add	r3, r2
 8006aa4:	00db      	lsls	r3, r3, #3
 8006aa6:	440b      	add	r3, r1
 8006aa8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8006aac:	681a      	ldr	r2, [r3, #0]
 8006aae:	78fb      	ldrb	r3, [r7, #3]
 8006ab0:	4619      	mov	r1, r3
 8006ab2:	f7fe fddd 	bl	8005670 <USBD_LL_DataOutStage>
}
 8006ab6:	bf00      	nop
 8006ab8:	3708      	adds	r7, #8
 8006aba:	46bd      	mov	sp, r7
 8006abc:	bd80      	pop	{r7, pc}

08006abe <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006abe:	b580      	push	{r7, lr}
 8006ac0:	b082      	sub	sp, #8
 8006ac2:	af00      	add	r7, sp, #0
 8006ac4:	6078      	str	r0, [r7, #4]
 8006ac6:	460b      	mov	r3, r1
 8006ac8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8006ad0:	78fa      	ldrb	r2, [r7, #3]
 8006ad2:	6879      	ldr	r1, [r7, #4]
 8006ad4:	4613      	mov	r3, r2
 8006ad6:	009b      	lsls	r3, r3, #2
 8006ad8:	4413      	add	r3, r2
 8006ada:	00db      	lsls	r3, r3, #3
 8006adc:	440b      	add	r3, r1
 8006ade:	333c      	adds	r3, #60	; 0x3c
 8006ae0:	681a      	ldr	r2, [r3, #0]
 8006ae2:	78fb      	ldrb	r3, [r7, #3]
 8006ae4:	4619      	mov	r1, r3
 8006ae6:	f7fe fe34 	bl	8005752 <USBD_LL_DataInStage>
}
 8006aea:	bf00      	nop
 8006aec:	3708      	adds	r7, #8
 8006aee:	46bd      	mov	sp, r7
 8006af0:	bd80      	pop	{r7, pc}

08006af2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006af2:	b580      	push	{r7, lr}
 8006af4:	b082      	sub	sp, #8
 8006af6:	af00      	add	r7, sp, #0
 8006af8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8006b00:	4618      	mov	r0, r3
 8006b02:	f7fe ff44 	bl	800598e <USBD_LL_SOF>
}
 8006b06:	bf00      	nop
 8006b08:	3708      	adds	r7, #8
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	bd80      	pop	{r7, pc}

08006b0e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006b0e:	b580      	push	{r7, lr}
 8006b10:	b084      	sub	sp, #16
 8006b12:	af00      	add	r7, sp, #0
 8006b14:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006b16:	2301      	movs	r3, #1
 8006b18:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	689b      	ldr	r3, [r3, #8]
 8006b1e:	2b02      	cmp	r3, #2
 8006b20:	d001      	beq.n	8006b26 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8006b22:	f7f9 fba9 	bl	8000278 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8006b2c:	7bfa      	ldrb	r2, [r7, #15]
 8006b2e:	4611      	mov	r1, r2
 8006b30:	4618      	mov	r0, r3
 8006b32:	f7fe fef4 	bl	800591e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	f7fe fead 	bl	800589c <USBD_LL_Reset>
}
 8006b42:	bf00      	nop
 8006b44:	3710      	adds	r7, #16
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bd80      	pop	{r7, pc}
	...

08006b4c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b082      	sub	sp, #8
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	f7fe feee 	bl	800593c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	699b      	ldr	r3, [r3, #24]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d005      	beq.n	8006b74 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006b68:	4b04      	ldr	r3, [pc, #16]	; (8006b7c <HAL_PCD_SuspendCallback+0x30>)
 8006b6a:	691b      	ldr	r3, [r3, #16]
 8006b6c:	4a03      	ldr	r2, [pc, #12]	; (8006b7c <HAL_PCD_SuspendCallback+0x30>)
 8006b6e:	f043 0306 	orr.w	r3, r3, #6
 8006b72:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006b74:	bf00      	nop
 8006b76:	3708      	adds	r7, #8
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	bd80      	pop	{r7, pc}
 8006b7c:	e000ed00 	.word	0xe000ed00

08006b80 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b082      	sub	sp, #8
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8006b8e:	4618      	mov	r0, r3
 8006b90:	f7fe fee8 	bl	8005964 <USBD_LL_Resume>
}
 8006b94:	bf00      	nop
 8006b96:	3708      	adds	r7, #8
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	bd80      	pop	{r7, pc}

08006b9c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b082      	sub	sp, #8
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8006ba4:	4a28      	ldr	r2, [pc, #160]	; (8006c48 <USBD_LL_Init+0xac>)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	4a26      	ldr	r2, [pc, #152]	; (8006c48 <USBD_LL_Init+0xac>)
 8006bb0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8006bb4:	4b24      	ldr	r3, [pc, #144]	; (8006c48 <USBD_LL_Init+0xac>)
 8006bb6:	4a25      	ldr	r2, [pc, #148]	; (8006c4c <USBD_LL_Init+0xb0>)
 8006bb8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8006bba:	4b23      	ldr	r3, [pc, #140]	; (8006c48 <USBD_LL_Init+0xac>)
 8006bbc:	2208      	movs	r2, #8
 8006bbe:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8006bc0:	4b21      	ldr	r3, [pc, #132]	; (8006c48 <USBD_LL_Init+0xac>)
 8006bc2:	2202      	movs	r2, #2
 8006bc4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8006bc6:	4b20      	ldr	r3, [pc, #128]	; (8006c48 <USBD_LL_Init+0xac>)
 8006bc8:	2200      	movs	r2, #0
 8006bca:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8006bcc:	4b1e      	ldr	r3, [pc, #120]	; (8006c48 <USBD_LL_Init+0xac>)
 8006bce:	2200      	movs	r2, #0
 8006bd0:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8006bd2:	4b1d      	ldr	r3, [pc, #116]	; (8006c48 <USBD_LL_Init+0xac>)
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8006bd8:	481b      	ldr	r0, [pc, #108]	; (8006c48 <USBD_LL_Init+0xac>)
 8006bda:	f7f9 fdac 	bl	8000736 <HAL_PCD_Init>
 8006bde:	4603      	mov	r3, r0
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d001      	beq.n	8006be8 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8006be4:	f7f9 fb48 	bl	8000278 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006bee:	2318      	movs	r3, #24
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	2100      	movs	r1, #0
 8006bf4:	f7fb fa22 	bl	800203c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006bfe:	2358      	movs	r3, #88	; 0x58
 8006c00:	2200      	movs	r2, #0
 8006c02:	2180      	movs	r1, #128	; 0x80
 8006c04:	f7fb fa1a 	bl	800203c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006c0e:	23c0      	movs	r3, #192	; 0xc0
 8006c10:	2200      	movs	r2, #0
 8006c12:	2181      	movs	r1, #129	; 0x81
 8006c14:	f7fb fa12 	bl	800203c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006c1e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8006c22:	2200      	movs	r2, #0
 8006c24:	2101      	movs	r1, #1
 8006c26:	f7fb fa09 	bl	800203c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006c30:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006c34:	2200      	movs	r2, #0
 8006c36:	2182      	movs	r1, #130	; 0x82
 8006c38:	f7fb fa00 	bl	800203c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8006c3c:	2300      	movs	r3, #0
}
 8006c3e:	4618      	mov	r0, r3
 8006c40:	3708      	adds	r7, #8
 8006c42:	46bd      	mov	sp, r7
 8006c44:	bd80      	pop	{r7, pc}
 8006c46:	bf00      	nop
 8006c48:	200010d8 	.word	0x200010d8
 8006c4c:	40005c00 	.word	0x40005c00

08006c50 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b084      	sub	sp, #16
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006c58:	2300      	movs	r3, #0
 8006c5a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006c66:	4618      	mov	r0, r3
 8006c68:	f7f9 fe70 	bl	800094c <HAL_PCD_Start>
 8006c6c:	4603      	mov	r3, r0
 8006c6e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006c70:	7bfb      	ldrb	r3, [r7, #15]
 8006c72:	4618      	mov	r0, r3
 8006c74:	f000 f94e 	bl	8006f14 <USBD_Get_USB_Status>
 8006c78:	4603      	mov	r3, r0
 8006c7a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006c7c:	7bbb      	ldrb	r3, [r7, #14]
}
 8006c7e:	4618      	mov	r0, r3
 8006c80:	3710      	adds	r7, #16
 8006c82:	46bd      	mov	sp, r7
 8006c84:	bd80      	pop	{r7, pc}

08006c86 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006c86:	b580      	push	{r7, lr}
 8006c88:	b084      	sub	sp, #16
 8006c8a:	af00      	add	r7, sp, #0
 8006c8c:	6078      	str	r0, [r7, #4]
 8006c8e:	4608      	mov	r0, r1
 8006c90:	4611      	mov	r1, r2
 8006c92:	461a      	mov	r2, r3
 8006c94:	4603      	mov	r3, r0
 8006c96:	70fb      	strb	r3, [r7, #3]
 8006c98:	460b      	mov	r3, r1
 8006c9a:	70bb      	strb	r3, [r7, #2]
 8006c9c:	4613      	mov	r3, r2
 8006c9e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006cae:	78bb      	ldrb	r3, [r7, #2]
 8006cb0:	883a      	ldrh	r2, [r7, #0]
 8006cb2:	78f9      	ldrb	r1, [r7, #3]
 8006cb4:	f7f9 ffea 	bl	8000c8c <HAL_PCD_EP_Open>
 8006cb8:	4603      	mov	r3, r0
 8006cba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006cbc:	7bfb      	ldrb	r3, [r7, #15]
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	f000 f928 	bl	8006f14 <USBD_Get_USB_Status>
 8006cc4:	4603      	mov	r3, r0
 8006cc6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006cc8:	7bbb      	ldrb	r3, [r7, #14]
}
 8006cca:	4618      	mov	r0, r3
 8006ccc:	3710      	adds	r7, #16
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	bd80      	pop	{r7, pc}

08006cd2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006cd2:	b580      	push	{r7, lr}
 8006cd4:	b084      	sub	sp, #16
 8006cd6:	af00      	add	r7, sp, #0
 8006cd8:	6078      	str	r0, [r7, #4]
 8006cda:	460b      	mov	r3, r1
 8006cdc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006cde:	2300      	movs	r3, #0
 8006ce0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006cec:	78fa      	ldrb	r2, [r7, #3]
 8006cee:	4611      	mov	r1, r2
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	f7fa f831 	bl	8000d58 <HAL_PCD_EP_Close>
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006cfa:	7bfb      	ldrb	r3, [r7, #15]
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	f000 f909 	bl	8006f14 <USBD_Get_USB_Status>
 8006d02:	4603      	mov	r3, r0
 8006d04:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006d06:	7bbb      	ldrb	r3, [r7, #14]
}
 8006d08:	4618      	mov	r0, r3
 8006d0a:	3710      	adds	r7, #16
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	bd80      	pop	{r7, pc}

08006d10 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b084      	sub	sp, #16
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
 8006d18:	460b      	mov	r3, r1
 8006d1a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006d20:	2300      	movs	r3, #0
 8006d22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006d2a:	78fa      	ldrb	r2, [r7, #3]
 8006d2c:	4611      	mov	r1, r2
 8006d2e:	4618      	mov	r0, r3
 8006d30:	f7fa f8f1 	bl	8000f16 <HAL_PCD_EP_SetStall>
 8006d34:	4603      	mov	r3, r0
 8006d36:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006d38:	7bfb      	ldrb	r3, [r7, #15]
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	f000 f8ea 	bl	8006f14 <USBD_Get_USB_Status>
 8006d40:	4603      	mov	r3, r0
 8006d42:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006d44:	7bbb      	ldrb	r3, [r7, #14]
}
 8006d46:	4618      	mov	r0, r3
 8006d48:	3710      	adds	r7, #16
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	bd80      	pop	{r7, pc}

08006d4e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006d4e:	b580      	push	{r7, lr}
 8006d50:	b084      	sub	sp, #16
 8006d52:	af00      	add	r7, sp, #0
 8006d54:	6078      	str	r0, [r7, #4]
 8006d56:	460b      	mov	r3, r1
 8006d58:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006d5e:	2300      	movs	r3, #0
 8006d60:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006d68:	78fa      	ldrb	r2, [r7, #3]
 8006d6a:	4611      	mov	r1, r2
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	f7fa f932 	bl	8000fd6 <HAL_PCD_EP_ClrStall>
 8006d72:	4603      	mov	r3, r0
 8006d74:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006d76:	7bfb      	ldrb	r3, [r7, #15]
 8006d78:	4618      	mov	r0, r3
 8006d7a:	f000 f8cb 	bl	8006f14 <USBD_Get_USB_Status>
 8006d7e:	4603      	mov	r3, r0
 8006d80:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006d82:	7bbb      	ldrb	r3, [r7, #14]
}
 8006d84:	4618      	mov	r0, r3
 8006d86:	3710      	adds	r7, #16
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	bd80      	pop	{r7, pc}

08006d8c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006d8c:	b480      	push	{r7}
 8006d8e:	b085      	sub	sp, #20
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
 8006d94:	460b      	mov	r3, r1
 8006d96:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006d9e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8006da0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	da0c      	bge.n	8006dc2 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006da8:	78fb      	ldrb	r3, [r7, #3]
 8006daa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006dae:	68f9      	ldr	r1, [r7, #12]
 8006db0:	1c5a      	adds	r2, r3, #1
 8006db2:	4613      	mov	r3, r2
 8006db4:	009b      	lsls	r3, r3, #2
 8006db6:	4413      	add	r3, r2
 8006db8:	00db      	lsls	r3, r3, #3
 8006dba:	440b      	add	r3, r1
 8006dbc:	3302      	adds	r3, #2
 8006dbe:	781b      	ldrb	r3, [r3, #0]
 8006dc0:	e00b      	b.n	8006dda <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006dc2:	78fb      	ldrb	r3, [r7, #3]
 8006dc4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006dc8:	68f9      	ldr	r1, [r7, #12]
 8006dca:	4613      	mov	r3, r2
 8006dcc:	009b      	lsls	r3, r3, #2
 8006dce:	4413      	add	r3, r2
 8006dd0:	00db      	lsls	r3, r3, #3
 8006dd2:	440b      	add	r3, r1
 8006dd4:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8006dd8:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006dda:	4618      	mov	r0, r3
 8006ddc:	3714      	adds	r7, #20
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bc80      	pop	{r7}
 8006de2:	4770      	bx	lr

08006de4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b084      	sub	sp, #16
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
 8006dec:	460b      	mov	r3, r1
 8006dee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006df0:	2300      	movs	r3, #0
 8006df2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006df4:	2300      	movs	r3, #0
 8006df6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006dfe:	78fa      	ldrb	r2, [r7, #3]
 8006e00:	4611      	mov	r1, r2
 8006e02:	4618      	mov	r0, r3
 8006e04:	f7f9 ff1d 	bl	8000c42 <HAL_PCD_SetAddress>
 8006e08:	4603      	mov	r3, r0
 8006e0a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006e0c:	7bfb      	ldrb	r3, [r7, #15]
 8006e0e:	4618      	mov	r0, r3
 8006e10:	f000 f880 	bl	8006f14 <USBD_Get_USB_Status>
 8006e14:	4603      	mov	r3, r0
 8006e16:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006e18:	7bbb      	ldrb	r3, [r7, #14]
}
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	3710      	adds	r7, #16
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	bd80      	pop	{r7, pc}

08006e22 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8006e22:	b580      	push	{r7, lr}
 8006e24:	b086      	sub	sp, #24
 8006e26:	af00      	add	r7, sp, #0
 8006e28:	60f8      	str	r0, [r7, #12]
 8006e2a:	607a      	str	r2, [r7, #4]
 8006e2c:	461a      	mov	r2, r3
 8006e2e:	460b      	mov	r3, r1
 8006e30:	72fb      	strb	r3, [r7, #11]
 8006e32:	4613      	mov	r3, r2
 8006e34:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006e36:	2300      	movs	r3, #0
 8006e38:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006e44:	893b      	ldrh	r3, [r7, #8]
 8006e46:	7af9      	ldrb	r1, [r7, #11]
 8006e48:	687a      	ldr	r2, [r7, #4]
 8006e4a:	f7fa f821 	bl	8000e90 <HAL_PCD_EP_Transmit>
 8006e4e:	4603      	mov	r3, r0
 8006e50:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006e52:	7dfb      	ldrb	r3, [r7, #23]
 8006e54:	4618      	mov	r0, r3
 8006e56:	f000 f85d 	bl	8006f14 <USBD_Get_USB_Status>
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006e5e:	7dbb      	ldrb	r3, [r7, #22]
}
 8006e60:	4618      	mov	r0, r3
 8006e62:	3718      	adds	r7, #24
 8006e64:	46bd      	mov	sp, r7
 8006e66:	bd80      	pop	{r7, pc}

08006e68 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b086      	sub	sp, #24
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	60f8      	str	r0, [r7, #12]
 8006e70:	607a      	str	r2, [r7, #4]
 8006e72:	461a      	mov	r2, r3
 8006e74:	460b      	mov	r3, r1
 8006e76:	72fb      	strb	r3, [r7, #11]
 8006e78:	4613      	mov	r3, r2
 8006e7a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006e80:	2300      	movs	r3, #0
 8006e82:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006e8a:	893b      	ldrh	r3, [r7, #8]
 8006e8c:	7af9      	ldrb	r1, [r7, #11]
 8006e8e:	687a      	ldr	r2, [r7, #4]
 8006e90:	f7f9 ffaa 	bl	8000de8 <HAL_PCD_EP_Receive>
 8006e94:	4603      	mov	r3, r0
 8006e96:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006e98:	7dfb      	ldrb	r3, [r7, #23]
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	f000 f83a 	bl	8006f14 <USBD_Get_USB_Status>
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006ea4:	7dbb      	ldrb	r3, [r7, #22]
}
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	3718      	adds	r7, #24
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	bd80      	pop	{r7, pc}

08006eae <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006eae:	b580      	push	{r7, lr}
 8006eb0:	b082      	sub	sp, #8
 8006eb2:	af00      	add	r7, sp, #0
 8006eb4:	6078      	str	r0, [r7, #4]
 8006eb6:	460b      	mov	r3, r1
 8006eb8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006ec0:	78fa      	ldrb	r2, [r7, #3]
 8006ec2:	4611      	mov	r1, r2
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	f7f9 ffcc 	bl	8000e62 <HAL_PCD_EP_GetRxCount>
 8006eca:	4603      	mov	r3, r0
}
 8006ecc:	4618      	mov	r0, r3
 8006ece:	3708      	adds	r7, #8
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	bd80      	pop	{r7, pc}

08006ed4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8006ed4:	b480      	push	{r7}
 8006ed6:	b083      	sub	sp, #12
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8006edc:	4b02      	ldr	r3, [pc, #8]	; (8006ee8 <USBD_static_malloc+0x14>)
}
 8006ede:	4618      	mov	r0, r3
 8006ee0:	370c      	adds	r7, #12
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	bc80      	pop	{r7}
 8006ee6:	4770      	bx	lr
 8006ee8:	20000218 	.word	0x20000218

08006eec <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8006eec:	b480      	push	{r7}
 8006eee:	b083      	sub	sp, #12
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]

}
 8006ef4:	bf00      	nop
 8006ef6:	370c      	adds	r7, #12
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	bc80      	pop	{r7}
 8006efc:	4770      	bx	lr

08006efe <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006efe:	b480      	push	{r7}
 8006f00:	b083      	sub	sp, #12
 8006f02:	af00      	add	r7, sp, #0
 8006f04:	6078      	str	r0, [r7, #4]
 8006f06:	460b      	mov	r3, r1
 8006f08:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8006f0a:	bf00      	nop
 8006f0c:	370c      	adds	r7, #12
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	bc80      	pop	{r7}
 8006f12:	4770      	bx	lr

08006f14 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006f14:	b480      	push	{r7}
 8006f16:	b085      	sub	sp, #20
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006f1e:	2300      	movs	r3, #0
 8006f20:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006f22:	79fb      	ldrb	r3, [r7, #7]
 8006f24:	2b03      	cmp	r3, #3
 8006f26:	d817      	bhi.n	8006f58 <USBD_Get_USB_Status+0x44>
 8006f28:	a201      	add	r2, pc, #4	; (adr r2, 8006f30 <USBD_Get_USB_Status+0x1c>)
 8006f2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f2e:	bf00      	nop
 8006f30:	08006f41 	.word	0x08006f41
 8006f34:	08006f47 	.word	0x08006f47
 8006f38:	08006f4d 	.word	0x08006f4d
 8006f3c:	08006f53 	.word	0x08006f53
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8006f40:	2300      	movs	r3, #0
 8006f42:	73fb      	strb	r3, [r7, #15]
    break;
 8006f44:	e00b      	b.n	8006f5e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006f46:	2302      	movs	r3, #2
 8006f48:	73fb      	strb	r3, [r7, #15]
    break;
 8006f4a:	e008      	b.n	8006f5e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006f4c:	2301      	movs	r3, #1
 8006f4e:	73fb      	strb	r3, [r7, #15]
    break;
 8006f50:	e005      	b.n	8006f5e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006f52:	2302      	movs	r3, #2
 8006f54:	73fb      	strb	r3, [r7, #15]
    break;
 8006f56:	e002      	b.n	8006f5e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8006f58:	2302      	movs	r3, #2
 8006f5a:	73fb      	strb	r3, [r7, #15]
    break;
 8006f5c:	bf00      	nop
  }
  return usb_status;
 8006f5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f60:	4618      	mov	r0, r3
 8006f62:	3714      	adds	r7, #20
 8006f64:	46bd      	mov	sp, r7
 8006f66:	bc80      	pop	{r7}
 8006f68:	4770      	bx	lr
 8006f6a:	bf00      	nop

08006f6c <__errno>:
 8006f6c:	4b01      	ldr	r3, [pc, #4]	; (8006f74 <__errno+0x8>)
 8006f6e:	6818      	ldr	r0, [r3, #0]
 8006f70:	4770      	bx	lr
 8006f72:	bf00      	nop
 8006f74:	20000190 	.word	0x20000190

08006f78 <__libc_init_array>:
 8006f78:	b570      	push	{r4, r5, r6, lr}
 8006f7a:	2600      	movs	r6, #0
 8006f7c:	4d0c      	ldr	r5, [pc, #48]	; (8006fb0 <__libc_init_array+0x38>)
 8006f7e:	4c0d      	ldr	r4, [pc, #52]	; (8006fb4 <__libc_init_array+0x3c>)
 8006f80:	1b64      	subs	r4, r4, r5
 8006f82:	10a4      	asrs	r4, r4, #2
 8006f84:	42a6      	cmp	r6, r4
 8006f86:	d109      	bne.n	8006f9c <__libc_init_array+0x24>
 8006f88:	f000 fc76 	bl	8007878 <_init>
 8006f8c:	2600      	movs	r6, #0
 8006f8e:	4d0a      	ldr	r5, [pc, #40]	; (8006fb8 <__libc_init_array+0x40>)
 8006f90:	4c0a      	ldr	r4, [pc, #40]	; (8006fbc <__libc_init_array+0x44>)
 8006f92:	1b64      	subs	r4, r4, r5
 8006f94:	10a4      	asrs	r4, r4, #2
 8006f96:	42a6      	cmp	r6, r4
 8006f98:	d105      	bne.n	8006fa6 <__libc_init_array+0x2e>
 8006f9a:	bd70      	pop	{r4, r5, r6, pc}
 8006f9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fa0:	4798      	blx	r3
 8006fa2:	3601      	adds	r6, #1
 8006fa4:	e7ee      	b.n	8006f84 <__libc_init_array+0xc>
 8006fa6:	f855 3b04 	ldr.w	r3, [r5], #4
 8006faa:	4798      	blx	r3
 8006fac:	3601      	adds	r6, #1
 8006fae:	e7f2      	b.n	8006f96 <__libc_init_array+0x1e>
 8006fb0:	08007934 	.word	0x08007934
 8006fb4:	08007934 	.word	0x08007934
 8006fb8:	08007934 	.word	0x08007934
 8006fbc:	08007938 	.word	0x08007938

08006fc0 <memset>:
 8006fc0:	4603      	mov	r3, r0
 8006fc2:	4402      	add	r2, r0
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d100      	bne.n	8006fca <memset+0xa>
 8006fc8:	4770      	bx	lr
 8006fca:	f803 1b01 	strb.w	r1, [r3], #1
 8006fce:	e7f9      	b.n	8006fc4 <memset+0x4>

08006fd0 <_vsniprintf_r>:
 8006fd0:	b530      	push	{r4, r5, lr}
 8006fd2:	1e14      	subs	r4, r2, #0
 8006fd4:	4605      	mov	r5, r0
 8006fd6:	b09b      	sub	sp, #108	; 0x6c
 8006fd8:	4618      	mov	r0, r3
 8006fda:	da05      	bge.n	8006fe8 <_vsniprintf_r+0x18>
 8006fdc:	238b      	movs	r3, #139	; 0x8b
 8006fde:	f04f 30ff 	mov.w	r0, #4294967295
 8006fe2:	602b      	str	r3, [r5, #0]
 8006fe4:	b01b      	add	sp, #108	; 0x6c
 8006fe6:	bd30      	pop	{r4, r5, pc}
 8006fe8:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006fec:	f8ad 300c 	strh.w	r3, [sp, #12]
 8006ff0:	bf0c      	ite	eq
 8006ff2:	4623      	moveq	r3, r4
 8006ff4:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006ff8:	9302      	str	r3, [sp, #8]
 8006ffa:	9305      	str	r3, [sp, #20]
 8006ffc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007000:	4602      	mov	r2, r0
 8007002:	9100      	str	r1, [sp, #0]
 8007004:	9104      	str	r1, [sp, #16]
 8007006:	f8ad 300e 	strh.w	r3, [sp, #14]
 800700a:	4669      	mov	r1, sp
 800700c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800700e:	4628      	mov	r0, r5
 8007010:	f000 f874 	bl	80070fc <_svfiprintf_r>
 8007014:	1c43      	adds	r3, r0, #1
 8007016:	bfbc      	itt	lt
 8007018:	238b      	movlt	r3, #139	; 0x8b
 800701a:	602b      	strlt	r3, [r5, #0]
 800701c:	2c00      	cmp	r4, #0
 800701e:	d0e1      	beq.n	8006fe4 <_vsniprintf_r+0x14>
 8007020:	2200      	movs	r2, #0
 8007022:	9b00      	ldr	r3, [sp, #0]
 8007024:	701a      	strb	r2, [r3, #0]
 8007026:	e7dd      	b.n	8006fe4 <_vsniprintf_r+0x14>

08007028 <vsniprintf>:
 8007028:	b507      	push	{r0, r1, r2, lr}
 800702a:	9300      	str	r3, [sp, #0]
 800702c:	4613      	mov	r3, r2
 800702e:	460a      	mov	r2, r1
 8007030:	4601      	mov	r1, r0
 8007032:	4803      	ldr	r0, [pc, #12]	; (8007040 <vsniprintf+0x18>)
 8007034:	6800      	ldr	r0, [r0, #0]
 8007036:	f7ff ffcb 	bl	8006fd0 <_vsniprintf_r>
 800703a:	b003      	add	sp, #12
 800703c:	f85d fb04 	ldr.w	pc, [sp], #4
 8007040:	20000190 	.word	0x20000190

08007044 <__ssputs_r>:
 8007044:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007048:	688e      	ldr	r6, [r1, #8]
 800704a:	4682      	mov	sl, r0
 800704c:	429e      	cmp	r6, r3
 800704e:	460c      	mov	r4, r1
 8007050:	4690      	mov	r8, r2
 8007052:	461f      	mov	r7, r3
 8007054:	d838      	bhi.n	80070c8 <__ssputs_r+0x84>
 8007056:	898a      	ldrh	r2, [r1, #12]
 8007058:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800705c:	d032      	beq.n	80070c4 <__ssputs_r+0x80>
 800705e:	6825      	ldr	r5, [r4, #0]
 8007060:	6909      	ldr	r1, [r1, #16]
 8007062:	3301      	adds	r3, #1
 8007064:	eba5 0901 	sub.w	r9, r5, r1
 8007068:	6965      	ldr	r5, [r4, #20]
 800706a:	444b      	add	r3, r9
 800706c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007070:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007074:	106d      	asrs	r5, r5, #1
 8007076:	429d      	cmp	r5, r3
 8007078:	bf38      	it	cc
 800707a:	461d      	movcc	r5, r3
 800707c:	0553      	lsls	r3, r2, #21
 800707e:	d531      	bpl.n	80070e4 <__ssputs_r+0xa0>
 8007080:	4629      	mov	r1, r5
 8007082:	f000 fb53 	bl	800772c <_malloc_r>
 8007086:	4606      	mov	r6, r0
 8007088:	b950      	cbnz	r0, 80070a0 <__ssputs_r+0x5c>
 800708a:	230c      	movs	r3, #12
 800708c:	f04f 30ff 	mov.w	r0, #4294967295
 8007090:	f8ca 3000 	str.w	r3, [sl]
 8007094:	89a3      	ldrh	r3, [r4, #12]
 8007096:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800709a:	81a3      	strh	r3, [r4, #12]
 800709c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070a0:	464a      	mov	r2, r9
 80070a2:	6921      	ldr	r1, [r4, #16]
 80070a4:	f000 face 	bl	8007644 <memcpy>
 80070a8:	89a3      	ldrh	r3, [r4, #12]
 80070aa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80070ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070b2:	81a3      	strh	r3, [r4, #12]
 80070b4:	6126      	str	r6, [r4, #16]
 80070b6:	444e      	add	r6, r9
 80070b8:	6026      	str	r6, [r4, #0]
 80070ba:	463e      	mov	r6, r7
 80070bc:	6165      	str	r5, [r4, #20]
 80070be:	eba5 0509 	sub.w	r5, r5, r9
 80070c2:	60a5      	str	r5, [r4, #8]
 80070c4:	42be      	cmp	r6, r7
 80070c6:	d900      	bls.n	80070ca <__ssputs_r+0x86>
 80070c8:	463e      	mov	r6, r7
 80070ca:	4632      	mov	r2, r6
 80070cc:	4641      	mov	r1, r8
 80070ce:	6820      	ldr	r0, [r4, #0]
 80070d0:	f000 fac6 	bl	8007660 <memmove>
 80070d4:	68a3      	ldr	r3, [r4, #8]
 80070d6:	6822      	ldr	r2, [r4, #0]
 80070d8:	1b9b      	subs	r3, r3, r6
 80070da:	4432      	add	r2, r6
 80070dc:	2000      	movs	r0, #0
 80070de:	60a3      	str	r3, [r4, #8]
 80070e0:	6022      	str	r2, [r4, #0]
 80070e2:	e7db      	b.n	800709c <__ssputs_r+0x58>
 80070e4:	462a      	mov	r2, r5
 80070e6:	f000 fb7b 	bl	80077e0 <_realloc_r>
 80070ea:	4606      	mov	r6, r0
 80070ec:	2800      	cmp	r0, #0
 80070ee:	d1e1      	bne.n	80070b4 <__ssputs_r+0x70>
 80070f0:	4650      	mov	r0, sl
 80070f2:	6921      	ldr	r1, [r4, #16]
 80070f4:	f000 face 	bl	8007694 <_free_r>
 80070f8:	e7c7      	b.n	800708a <__ssputs_r+0x46>
	...

080070fc <_svfiprintf_r>:
 80070fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007100:	4698      	mov	r8, r3
 8007102:	898b      	ldrh	r3, [r1, #12]
 8007104:	4607      	mov	r7, r0
 8007106:	061b      	lsls	r3, r3, #24
 8007108:	460d      	mov	r5, r1
 800710a:	4614      	mov	r4, r2
 800710c:	b09d      	sub	sp, #116	; 0x74
 800710e:	d50e      	bpl.n	800712e <_svfiprintf_r+0x32>
 8007110:	690b      	ldr	r3, [r1, #16]
 8007112:	b963      	cbnz	r3, 800712e <_svfiprintf_r+0x32>
 8007114:	2140      	movs	r1, #64	; 0x40
 8007116:	f000 fb09 	bl	800772c <_malloc_r>
 800711a:	6028      	str	r0, [r5, #0]
 800711c:	6128      	str	r0, [r5, #16]
 800711e:	b920      	cbnz	r0, 800712a <_svfiprintf_r+0x2e>
 8007120:	230c      	movs	r3, #12
 8007122:	603b      	str	r3, [r7, #0]
 8007124:	f04f 30ff 	mov.w	r0, #4294967295
 8007128:	e0d1      	b.n	80072ce <_svfiprintf_r+0x1d2>
 800712a:	2340      	movs	r3, #64	; 0x40
 800712c:	616b      	str	r3, [r5, #20]
 800712e:	2300      	movs	r3, #0
 8007130:	9309      	str	r3, [sp, #36]	; 0x24
 8007132:	2320      	movs	r3, #32
 8007134:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007138:	2330      	movs	r3, #48	; 0x30
 800713a:	f04f 0901 	mov.w	r9, #1
 800713e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007142:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80072e8 <_svfiprintf_r+0x1ec>
 8007146:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800714a:	4623      	mov	r3, r4
 800714c:	469a      	mov	sl, r3
 800714e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007152:	b10a      	cbz	r2, 8007158 <_svfiprintf_r+0x5c>
 8007154:	2a25      	cmp	r2, #37	; 0x25
 8007156:	d1f9      	bne.n	800714c <_svfiprintf_r+0x50>
 8007158:	ebba 0b04 	subs.w	fp, sl, r4
 800715c:	d00b      	beq.n	8007176 <_svfiprintf_r+0x7a>
 800715e:	465b      	mov	r3, fp
 8007160:	4622      	mov	r2, r4
 8007162:	4629      	mov	r1, r5
 8007164:	4638      	mov	r0, r7
 8007166:	f7ff ff6d 	bl	8007044 <__ssputs_r>
 800716a:	3001      	adds	r0, #1
 800716c:	f000 80aa 	beq.w	80072c4 <_svfiprintf_r+0x1c8>
 8007170:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007172:	445a      	add	r2, fp
 8007174:	9209      	str	r2, [sp, #36]	; 0x24
 8007176:	f89a 3000 	ldrb.w	r3, [sl]
 800717a:	2b00      	cmp	r3, #0
 800717c:	f000 80a2 	beq.w	80072c4 <_svfiprintf_r+0x1c8>
 8007180:	2300      	movs	r3, #0
 8007182:	f04f 32ff 	mov.w	r2, #4294967295
 8007186:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800718a:	f10a 0a01 	add.w	sl, sl, #1
 800718e:	9304      	str	r3, [sp, #16]
 8007190:	9307      	str	r3, [sp, #28]
 8007192:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007196:	931a      	str	r3, [sp, #104]	; 0x68
 8007198:	4654      	mov	r4, sl
 800719a:	2205      	movs	r2, #5
 800719c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071a0:	4851      	ldr	r0, [pc, #324]	; (80072e8 <_svfiprintf_r+0x1ec>)
 80071a2:	f000 fa41 	bl	8007628 <memchr>
 80071a6:	9a04      	ldr	r2, [sp, #16]
 80071a8:	b9d8      	cbnz	r0, 80071e2 <_svfiprintf_r+0xe6>
 80071aa:	06d0      	lsls	r0, r2, #27
 80071ac:	bf44      	itt	mi
 80071ae:	2320      	movmi	r3, #32
 80071b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80071b4:	0711      	lsls	r1, r2, #28
 80071b6:	bf44      	itt	mi
 80071b8:	232b      	movmi	r3, #43	; 0x2b
 80071ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80071be:	f89a 3000 	ldrb.w	r3, [sl]
 80071c2:	2b2a      	cmp	r3, #42	; 0x2a
 80071c4:	d015      	beq.n	80071f2 <_svfiprintf_r+0xf6>
 80071c6:	4654      	mov	r4, sl
 80071c8:	2000      	movs	r0, #0
 80071ca:	f04f 0c0a 	mov.w	ip, #10
 80071ce:	9a07      	ldr	r2, [sp, #28]
 80071d0:	4621      	mov	r1, r4
 80071d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80071d6:	3b30      	subs	r3, #48	; 0x30
 80071d8:	2b09      	cmp	r3, #9
 80071da:	d94e      	bls.n	800727a <_svfiprintf_r+0x17e>
 80071dc:	b1b0      	cbz	r0, 800720c <_svfiprintf_r+0x110>
 80071de:	9207      	str	r2, [sp, #28]
 80071e0:	e014      	b.n	800720c <_svfiprintf_r+0x110>
 80071e2:	eba0 0308 	sub.w	r3, r0, r8
 80071e6:	fa09 f303 	lsl.w	r3, r9, r3
 80071ea:	4313      	orrs	r3, r2
 80071ec:	46a2      	mov	sl, r4
 80071ee:	9304      	str	r3, [sp, #16]
 80071f0:	e7d2      	b.n	8007198 <_svfiprintf_r+0x9c>
 80071f2:	9b03      	ldr	r3, [sp, #12]
 80071f4:	1d19      	adds	r1, r3, #4
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	9103      	str	r1, [sp, #12]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	bfbb      	ittet	lt
 80071fe:	425b      	neglt	r3, r3
 8007200:	f042 0202 	orrlt.w	r2, r2, #2
 8007204:	9307      	strge	r3, [sp, #28]
 8007206:	9307      	strlt	r3, [sp, #28]
 8007208:	bfb8      	it	lt
 800720a:	9204      	strlt	r2, [sp, #16]
 800720c:	7823      	ldrb	r3, [r4, #0]
 800720e:	2b2e      	cmp	r3, #46	; 0x2e
 8007210:	d10c      	bne.n	800722c <_svfiprintf_r+0x130>
 8007212:	7863      	ldrb	r3, [r4, #1]
 8007214:	2b2a      	cmp	r3, #42	; 0x2a
 8007216:	d135      	bne.n	8007284 <_svfiprintf_r+0x188>
 8007218:	9b03      	ldr	r3, [sp, #12]
 800721a:	3402      	adds	r4, #2
 800721c:	1d1a      	adds	r2, r3, #4
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	9203      	str	r2, [sp, #12]
 8007222:	2b00      	cmp	r3, #0
 8007224:	bfb8      	it	lt
 8007226:	f04f 33ff 	movlt.w	r3, #4294967295
 800722a:	9305      	str	r3, [sp, #20]
 800722c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80072f8 <_svfiprintf_r+0x1fc>
 8007230:	2203      	movs	r2, #3
 8007232:	4650      	mov	r0, sl
 8007234:	7821      	ldrb	r1, [r4, #0]
 8007236:	f000 f9f7 	bl	8007628 <memchr>
 800723a:	b140      	cbz	r0, 800724e <_svfiprintf_r+0x152>
 800723c:	2340      	movs	r3, #64	; 0x40
 800723e:	eba0 000a 	sub.w	r0, r0, sl
 8007242:	fa03 f000 	lsl.w	r0, r3, r0
 8007246:	9b04      	ldr	r3, [sp, #16]
 8007248:	3401      	adds	r4, #1
 800724a:	4303      	orrs	r3, r0
 800724c:	9304      	str	r3, [sp, #16]
 800724e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007252:	2206      	movs	r2, #6
 8007254:	4825      	ldr	r0, [pc, #148]	; (80072ec <_svfiprintf_r+0x1f0>)
 8007256:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800725a:	f000 f9e5 	bl	8007628 <memchr>
 800725e:	2800      	cmp	r0, #0
 8007260:	d038      	beq.n	80072d4 <_svfiprintf_r+0x1d8>
 8007262:	4b23      	ldr	r3, [pc, #140]	; (80072f0 <_svfiprintf_r+0x1f4>)
 8007264:	bb1b      	cbnz	r3, 80072ae <_svfiprintf_r+0x1b2>
 8007266:	9b03      	ldr	r3, [sp, #12]
 8007268:	3307      	adds	r3, #7
 800726a:	f023 0307 	bic.w	r3, r3, #7
 800726e:	3308      	adds	r3, #8
 8007270:	9303      	str	r3, [sp, #12]
 8007272:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007274:	4433      	add	r3, r6
 8007276:	9309      	str	r3, [sp, #36]	; 0x24
 8007278:	e767      	b.n	800714a <_svfiprintf_r+0x4e>
 800727a:	460c      	mov	r4, r1
 800727c:	2001      	movs	r0, #1
 800727e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007282:	e7a5      	b.n	80071d0 <_svfiprintf_r+0xd4>
 8007284:	2300      	movs	r3, #0
 8007286:	f04f 0c0a 	mov.w	ip, #10
 800728a:	4619      	mov	r1, r3
 800728c:	3401      	adds	r4, #1
 800728e:	9305      	str	r3, [sp, #20]
 8007290:	4620      	mov	r0, r4
 8007292:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007296:	3a30      	subs	r2, #48	; 0x30
 8007298:	2a09      	cmp	r2, #9
 800729a:	d903      	bls.n	80072a4 <_svfiprintf_r+0x1a8>
 800729c:	2b00      	cmp	r3, #0
 800729e:	d0c5      	beq.n	800722c <_svfiprintf_r+0x130>
 80072a0:	9105      	str	r1, [sp, #20]
 80072a2:	e7c3      	b.n	800722c <_svfiprintf_r+0x130>
 80072a4:	4604      	mov	r4, r0
 80072a6:	2301      	movs	r3, #1
 80072a8:	fb0c 2101 	mla	r1, ip, r1, r2
 80072ac:	e7f0      	b.n	8007290 <_svfiprintf_r+0x194>
 80072ae:	ab03      	add	r3, sp, #12
 80072b0:	9300      	str	r3, [sp, #0]
 80072b2:	462a      	mov	r2, r5
 80072b4:	4638      	mov	r0, r7
 80072b6:	4b0f      	ldr	r3, [pc, #60]	; (80072f4 <_svfiprintf_r+0x1f8>)
 80072b8:	a904      	add	r1, sp, #16
 80072ba:	f3af 8000 	nop.w
 80072be:	1c42      	adds	r2, r0, #1
 80072c0:	4606      	mov	r6, r0
 80072c2:	d1d6      	bne.n	8007272 <_svfiprintf_r+0x176>
 80072c4:	89ab      	ldrh	r3, [r5, #12]
 80072c6:	065b      	lsls	r3, r3, #25
 80072c8:	f53f af2c 	bmi.w	8007124 <_svfiprintf_r+0x28>
 80072cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80072ce:	b01d      	add	sp, #116	; 0x74
 80072d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072d4:	ab03      	add	r3, sp, #12
 80072d6:	9300      	str	r3, [sp, #0]
 80072d8:	462a      	mov	r2, r5
 80072da:	4638      	mov	r0, r7
 80072dc:	4b05      	ldr	r3, [pc, #20]	; (80072f4 <_svfiprintf_r+0x1f8>)
 80072de:	a904      	add	r1, sp, #16
 80072e0:	f000 f87c 	bl	80073dc <_printf_i>
 80072e4:	e7eb      	b.n	80072be <_svfiprintf_r+0x1c2>
 80072e6:	bf00      	nop
 80072e8:	08007900 	.word	0x08007900
 80072ec:	0800790a 	.word	0x0800790a
 80072f0:	00000000 	.word	0x00000000
 80072f4:	08007045 	.word	0x08007045
 80072f8:	08007906 	.word	0x08007906

080072fc <_printf_common>:
 80072fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007300:	4616      	mov	r6, r2
 8007302:	4699      	mov	r9, r3
 8007304:	688a      	ldr	r2, [r1, #8]
 8007306:	690b      	ldr	r3, [r1, #16]
 8007308:	4607      	mov	r7, r0
 800730a:	4293      	cmp	r3, r2
 800730c:	bfb8      	it	lt
 800730e:	4613      	movlt	r3, r2
 8007310:	6033      	str	r3, [r6, #0]
 8007312:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007316:	460c      	mov	r4, r1
 8007318:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800731c:	b10a      	cbz	r2, 8007322 <_printf_common+0x26>
 800731e:	3301      	adds	r3, #1
 8007320:	6033      	str	r3, [r6, #0]
 8007322:	6823      	ldr	r3, [r4, #0]
 8007324:	0699      	lsls	r1, r3, #26
 8007326:	bf42      	ittt	mi
 8007328:	6833      	ldrmi	r3, [r6, #0]
 800732a:	3302      	addmi	r3, #2
 800732c:	6033      	strmi	r3, [r6, #0]
 800732e:	6825      	ldr	r5, [r4, #0]
 8007330:	f015 0506 	ands.w	r5, r5, #6
 8007334:	d106      	bne.n	8007344 <_printf_common+0x48>
 8007336:	f104 0a19 	add.w	sl, r4, #25
 800733a:	68e3      	ldr	r3, [r4, #12]
 800733c:	6832      	ldr	r2, [r6, #0]
 800733e:	1a9b      	subs	r3, r3, r2
 8007340:	42ab      	cmp	r3, r5
 8007342:	dc28      	bgt.n	8007396 <_printf_common+0x9a>
 8007344:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007348:	1e13      	subs	r3, r2, #0
 800734a:	6822      	ldr	r2, [r4, #0]
 800734c:	bf18      	it	ne
 800734e:	2301      	movne	r3, #1
 8007350:	0692      	lsls	r2, r2, #26
 8007352:	d42d      	bmi.n	80073b0 <_printf_common+0xb4>
 8007354:	4649      	mov	r1, r9
 8007356:	4638      	mov	r0, r7
 8007358:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800735c:	47c0      	blx	r8
 800735e:	3001      	adds	r0, #1
 8007360:	d020      	beq.n	80073a4 <_printf_common+0xa8>
 8007362:	6823      	ldr	r3, [r4, #0]
 8007364:	68e5      	ldr	r5, [r4, #12]
 8007366:	f003 0306 	and.w	r3, r3, #6
 800736a:	2b04      	cmp	r3, #4
 800736c:	bf18      	it	ne
 800736e:	2500      	movne	r5, #0
 8007370:	6832      	ldr	r2, [r6, #0]
 8007372:	f04f 0600 	mov.w	r6, #0
 8007376:	68a3      	ldr	r3, [r4, #8]
 8007378:	bf08      	it	eq
 800737a:	1aad      	subeq	r5, r5, r2
 800737c:	6922      	ldr	r2, [r4, #16]
 800737e:	bf08      	it	eq
 8007380:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007384:	4293      	cmp	r3, r2
 8007386:	bfc4      	itt	gt
 8007388:	1a9b      	subgt	r3, r3, r2
 800738a:	18ed      	addgt	r5, r5, r3
 800738c:	341a      	adds	r4, #26
 800738e:	42b5      	cmp	r5, r6
 8007390:	d11a      	bne.n	80073c8 <_printf_common+0xcc>
 8007392:	2000      	movs	r0, #0
 8007394:	e008      	b.n	80073a8 <_printf_common+0xac>
 8007396:	2301      	movs	r3, #1
 8007398:	4652      	mov	r2, sl
 800739a:	4649      	mov	r1, r9
 800739c:	4638      	mov	r0, r7
 800739e:	47c0      	blx	r8
 80073a0:	3001      	adds	r0, #1
 80073a2:	d103      	bne.n	80073ac <_printf_common+0xb0>
 80073a4:	f04f 30ff 	mov.w	r0, #4294967295
 80073a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073ac:	3501      	adds	r5, #1
 80073ae:	e7c4      	b.n	800733a <_printf_common+0x3e>
 80073b0:	2030      	movs	r0, #48	; 0x30
 80073b2:	18e1      	adds	r1, r4, r3
 80073b4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80073b8:	1c5a      	adds	r2, r3, #1
 80073ba:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80073be:	4422      	add	r2, r4
 80073c0:	3302      	adds	r3, #2
 80073c2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80073c6:	e7c5      	b.n	8007354 <_printf_common+0x58>
 80073c8:	2301      	movs	r3, #1
 80073ca:	4622      	mov	r2, r4
 80073cc:	4649      	mov	r1, r9
 80073ce:	4638      	mov	r0, r7
 80073d0:	47c0      	blx	r8
 80073d2:	3001      	adds	r0, #1
 80073d4:	d0e6      	beq.n	80073a4 <_printf_common+0xa8>
 80073d6:	3601      	adds	r6, #1
 80073d8:	e7d9      	b.n	800738e <_printf_common+0x92>
	...

080073dc <_printf_i>:
 80073dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80073e0:	460c      	mov	r4, r1
 80073e2:	7e27      	ldrb	r7, [r4, #24]
 80073e4:	4691      	mov	r9, r2
 80073e6:	2f78      	cmp	r7, #120	; 0x78
 80073e8:	4680      	mov	r8, r0
 80073ea:	469a      	mov	sl, r3
 80073ec:	990c      	ldr	r1, [sp, #48]	; 0x30
 80073ee:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80073f2:	d807      	bhi.n	8007404 <_printf_i+0x28>
 80073f4:	2f62      	cmp	r7, #98	; 0x62
 80073f6:	d80a      	bhi.n	800740e <_printf_i+0x32>
 80073f8:	2f00      	cmp	r7, #0
 80073fa:	f000 80d9 	beq.w	80075b0 <_printf_i+0x1d4>
 80073fe:	2f58      	cmp	r7, #88	; 0x58
 8007400:	f000 80a4 	beq.w	800754c <_printf_i+0x170>
 8007404:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007408:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800740c:	e03a      	b.n	8007484 <_printf_i+0xa8>
 800740e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007412:	2b15      	cmp	r3, #21
 8007414:	d8f6      	bhi.n	8007404 <_printf_i+0x28>
 8007416:	a001      	add	r0, pc, #4	; (adr r0, 800741c <_printf_i+0x40>)
 8007418:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800741c:	08007475 	.word	0x08007475
 8007420:	08007489 	.word	0x08007489
 8007424:	08007405 	.word	0x08007405
 8007428:	08007405 	.word	0x08007405
 800742c:	08007405 	.word	0x08007405
 8007430:	08007405 	.word	0x08007405
 8007434:	08007489 	.word	0x08007489
 8007438:	08007405 	.word	0x08007405
 800743c:	08007405 	.word	0x08007405
 8007440:	08007405 	.word	0x08007405
 8007444:	08007405 	.word	0x08007405
 8007448:	08007597 	.word	0x08007597
 800744c:	080074b9 	.word	0x080074b9
 8007450:	08007579 	.word	0x08007579
 8007454:	08007405 	.word	0x08007405
 8007458:	08007405 	.word	0x08007405
 800745c:	080075b9 	.word	0x080075b9
 8007460:	08007405 	.word	0x08007405
 8007464:	080074b9 	.word	0x080074b9
 8007468:	08007405 	.word	0x08007405
 800746c:	08007405 	.word	0x08007405
 8007470:	08007581 	.word	0x08007581
 8007474:	680b      	ldr	r3, [r1, #0]
 8007476:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800747a:	1d1a      	adds	r2, r3, #4
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	600a      	str	r2, [r1, #0]
 8007480:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007484:	2301      	movs	r3, #1
 8007486:	e0a4      	b.n	80075d2 <_printf_i+0x1f6>
 8007488:	6825      	ldr	r5, [r4, #0]
 800748a:	6808      	ldr	r0, [r1, #0]
 800748c:	062e      	lsls	r6, r5, #24
 800748e:	f100 0304 	add.w	r3, r0, #4
 8007492:	d50a      	bpl.n	80074aa <_printf_i+0xce>
 8007494:	6805      	ldr	r5, [r0, #0]
 8007496:	600b      	str	r3, [r1, #0]
 8007498:	2d00      	cmp	r5, #0
 800749a:	da03      	bge.n	80074a4 <_printf_i+0xc8>
 800749c:	232d      	movs	r3, #45	; 0x2d
 800749e:	426d      	negs	r5, r5
 80074a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80074a4:	230a      	movs	r3, #10
 80074a6:	485e      	ldr	r0, [pc, #376]	; (8007620 <_printf_i+0x244>)
 80074a8:	e019      	b.n	80074de <_printf_i+0x102>
 80074aa:	f015 0f40 	tst.w	r5, #64	; 0x40
 80074ae:	6805      	ldr	r5, [r0, #0]
 80074b0:	600b      	str	r3, [r1, #0]
 80074b2:	bf18      	it	ne
 80074b4:	b22d      	sxthne	r5, r5
 80074b6:	e7ef      	b.n	8007498 <_printf_i+0xbc>
 80074b8:	680b      	ldr	r3, [r1, #0]
 80074ba:	6825      	ldr	r5, [r4, #0]
 80074bc:	1d18      	adds	r0, r3, #4
 80074be:	6008      	str	r0, [r1, #0]
 80074c0:	0628      	lsls	r0, r5, #24
 80074c2:	d501      	bpl.n	80074c8 <_printf_i+0xec>
 80074c4:	681d      	ldr	r5, [r3, #0]
 80074c6:	e002      	b.n	80074ce <_printf_i+0xf2>
 80074c8:	0669      	lsls	r1, r5, #25
 80074ca:	d5fb      	bpl.n	80074c4 <_printf_i+0xe8>
 80074cc:	881d      	ldrh	r5, [r3, #0]
 80074ce:	2f6f      	cmp	r7, #111	; 0x6f
 80074d0:	bf0c      	ite	eq
 80074d2:	2308      	moveq	r3, #8
 80074d4:	230a      	movne	r3, #10
 80074d6:	4852      	ldr	r0, [pc, #328]	; (8007620 <_printf_i+0x244>)
 80074d8:	2100      	movs	r1, #0
 80074da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80074de:	6866      	ldr	r6, [r4, #4]
 80074e0:	2e00      	cmp	r6, #0
 80074e2:	bfa8      	it	ge
 80074e4:	6821      	ldrge	r1, [r4, #0]
 80074e6:	60a6      	str	r6, [r4, #8]
 80074e8:	bfa4      	itt	ge
 80074ea:	f021 0104 	bicge.w	r1, r1, #4
 80074ee:	6021      	strge	r1, [r4, #0]
 80074f0:	b90d      	cbnz	r5, 80074f6 <_printf_i+0x11a>
 80074f2:	2e00      	cmp	r6, #0
 80074f4:	d04d      	beq.n	8007592 <_printf_i+0x1b6>
 80074f6:	4616      	mov	r6, r2
 80074f8:	fbb5 f1f3 	udiv	r1, r5, r3
 80074fc:	fb03 5711 	mls	r7, r3, r1, r5
 8007500:	5dc7      	ldrb	r7, [r0, r7]
 8007502:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007506:	462f      	mov	r7, r5
 8007508:	42bb      	cmp	r3, r7
 800750a:	460d      	mov	r5, r1
 800750c:	d9f4      	bls.n	80074f8 <_printf_i+0x11c>
 800750e:	2b08      	cmp	r3, #8
 8007510:	d10b      	bne.n	800752a <_printf_i+0x14e>
 8007512:	6823      	ldr	r3, [r4, #0]
 8007514:	07df      	lsls	r7, r3, #31
 8007516:	d508      	bpl.n	800752a <_printf_i+0x14e>
 8007518:	6923      	ldr	r3, [r4, #16]
 800751a:	6861      	ldr	r1, [r4, #4]
 800751c:	4299      	cmp	r1, r3
 800751e:	bfde      	ittt	le
 8007520:	2330      	movle	r3, #48	; 0x30
 8007522:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007526:	f106 36ff 	addle.w	r6, r6, #4294967295
 800752a:	1b92      	subs	r2, r2, r6
 800752c:	6122      	str	r2, [r4, #16]
 800752e:	464b      	mov	r3, r9
 8007530:	4621      	mov	r1, r4
 8007532:	4640      	mov	r0, r8
 8007534:	f8cd a000 	str.w	sl, [sp]
 8007538:	aa03      	add	r2, sp, #12
 800753a:	f7ff fedf 	bl	80072fc <_printf_common>
 800753e:	3001      	adds	r0, #1
 8007540:	d14c      	bne.n	80075dc <_printf_i+0x200>
 8007542:	f04f 30ff 	mov.w	r0, #4294967295
 8007546:	b004      	add	sp, #16
 8007548:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800754c:	4834      	ldr	r0, [pc, #208]	; (8007620 <_printf_i+0x244>)
 800754e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007552:	680e      	ldr	r6, [r1, #0]
 8007554:	6823      	ldr	r3, [r4, #0]
 8007556:	f856 5b04 	ldr.w	r5, [r6], #4
 800755a:	061f      	lsls	r7, r3, #24
 800755c:	600e      	str	r6, [r1, #0]
 800755e:	d514      	bpl.n	800758a <_printf_i+0x1ae>
 8007560:	07d9      	lsls	r1, r3, #31
 8007562:	bf44      	itt	mi
 8007564:	f043 0320 	orrmi.w	r3, r3, #32
 8007568:	6023      	strmi	r3, [r4, #0]
 800756a:	b91d      	cbnz	r5, 8007574 <_printf_i+0x198>
 800756c:	6823      	ldr	r3, [r4, #0]
 800756e:	f023 0320 	bic.w	r3, r3, #32
 8007572:	6023      	str	r3, [r4, #0]
 8007574:	2310      	movs	r3, #16
 8007576:	e7af      	b.n	80074d8 <_printf_i+0xfc>
 8007578:	6823      	ldr	r3, [r4, #0]
 800757a:	f043 0320 	orr.w	r3, r3, #32
 800757e:	6023      	str	r3, [r4, #0]
 8007580:	2378      	movs	r3, #120	; 0x78
 8007582:	4828      	ldr	r0, [pc, #160]	; (8007624 <_printf_i+0x248>)
 8007584:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007588:	e7e3      	b.n	8007552 <_printf_i+0x176>
 800758a:	065e      	lsls	r6, r3, #25
 800758c:	bf48      	it	mi
 800758e:	b2ad      	uxthmi	r5, r5
 8007590:	e7e6      	b.n	8007560 <_printf_i+0x184>
 8007592:	4616      	mov	r6, r2
 8007594:	e7bb      	b.n	800750e <_printf_i+0x132>
 8007596:	680b      	ldr	r3, [r1, #0]
 8007598:	6826      	ldr	r6, [r4, #0]
 800759a:	1d1d      	adds	r5, r3, #4
 800759c:	6960      	ldr	r0, [r4, #20]
 800759e:	600d      	str	r5, [r1, #0]
 80075a0:	0635      	lsls	r5, r6, #24
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	d501      	bpl.n	80075aa <_printf_i+0x1ce>
 80075a6:	6018      	str	r0, [r3, #0]
 80075a8:	e002      	b.n	80075b0 <_printf_i+0x1d4>
 80075aa:	0671      	lsls	r1, r6, #25
 80075ac:	d5fb      	bpl.n	80075a6 <_printf_i+0x1ca>
 80075ae:	8018      	strh	r0, [r3, #0]
 80075b0:	2300      	movs	r3, #0
 80075b2:	4616      	mov	r6, r2
 80075b4:	6123      	str	r3, [r4, #16]
 80075b6:	e7ba      	b.n	800752e <_printf_i+0x152>
 80075b8:	680b      	ldr	r3, [r1, #0]
 80075ba:	1d1a      	adds	r2, r3, #4
 80075bc:	600a      	str	r2, [r1, #0]
 80075be:	681e      	ldr	r6, [r3, #0]
 80075c0:	2100      	movs	r1, #0
 80075c2:	4630      	mov	r0, r6
 80075c4:	6862      	ldr	r2, [r4, #4]
 80075c6:	f000 f82f 	bl	8007628 <memchr>
 80075ca:	b108      	cbz	r0, 80075d0 <_printf_i+0x1f4>
 80075cc:	1b80      	subs	r0, r0, r6
 80075ce:	6060      	str	r0, [r4, #4]
 80075d0:	6863      	ldr	r3, [r4, #4]
 80075d2:	6123      	str	r3, [r4, #16]
 80075d4:	2300      	movs	r3, #0
 80075d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80075da:	e7a8      	b.n	800752e <_printf_i+0x152>
 80075dc:	4632      	mov	r2, r6
 80075de:	4649      	mov	r1, r9
 80075e0:	4640      	mov	r0, r8
 80075e2:	6923      	ldr	r3, [r4, #16]
 80075e4:	47d0      	blx	sl
 80075e6:	3001      	adds	r0, #1
 80075e8:	d0ab      	beq.n	8007542 <_printf_i+0x166>
 80075ea:	6823      	ldr	r3, [r4, #0]
 80075ec:	079b      	lsls	r3, r3, #30
 80075ee:	d413      	bmi.n	8007618 <_printf_i+0x23c>
 80075f0:	68e0      	ldr	r0, [r4, #12]
 80075f2:	9b03      	ldr	r3, [sp, #12]
 80075f4:	4298      	cmp	r0, r3
 80075f6:	bfb8      	it	lt
 80075f8:	4618      	movlt	r0, r3
 80075fa:	e7a4      	b.n	8007546 <_printf_i+0x16a>
 80075fc:	2301      	movs	r3, #1
 80075fe:	4632      	mov	r2, r6
 8007600:	4649      	mov	r1, r9
 8007602:	4640      	mov	r0, r8
 8007604:	47d0      	blx	sl
 8007606:	3001      	adds	r0, #1
 8007608:	d09b      	beq.n	8007542 <_printf_i+0x166>
 800760a:	3501      	adds	r5, #1
 800760c:	68e3      	ldr	r3, [r4, #12]
 800760e:	9903      	ldr	r1, [sp, #12]
 8007610:	1a5b      	subs	r3, r3, r1
 8007612:	42ab      	cmp	r3, r5
 8007614:	dcf2      	bgt.n	80075fc <_printf_i+0x220>
 8007616:	e7eb      	b.n	80075f0 <_printf_i+0x214>
 8007618:	2500      	movs	r5, #0
 800761a:	f104 0619 	add.w	r6, r4, #25
 800761e:	e7f5      	b.n	800760c <_printf_i+0x230>
 8007620:	08007911 	.word	0x08007911
 8007624:	08007922 	.word	0x08007922

08007628 <memchr>:
 8007628:	4603      	mov	r3, r0
 800762a:	b510      	push	{r4, lr}
 800762c:	b2c9      	uxtb	r1, r1
 800762e:	4402      	add	r2, r0
 8007630:	4293      	cmp	r3, r2
 8007632:	4618      	mov	r0, r3
 8007634:	d101      	bne.n	800763a <memchr+0x12>
 8007636:	2000      	movs	r0, #0
 8007638:	e003      	b.n	8007642 <memchr+0x1a>
 800763a:	7804      	ldrb	r4, [r0, #0]
 800763c:	3301      	adds	r3, #1
 800763e:	428c      	cmp	r4, r1
 8007640:	d1f6      	bne.n	8007630 <memchr+0x8>
 8007642:	bd10      	pop	{r4, pc}

08007644 <memcpy>:
 8007644:	440a      	add	r2, r1
 8007646:	4291      	cmp	r1, r2
 8007648:	f100 33ff 	add.w	r3, r0, #4294967295
 800764c:	d100      	bne.n	8007650 <memcpy+0xc>
 800764e:	4770      	bx	lr
 8007650:	b510      	push	{r4, lr}
 8007652:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007656:	4291      	cmp	r1, r2
 8007658:	f803 4f01 	strb.w	r4, [r3, #1]!
 800765c:	d1f9      	bne.n	8007652 <memcpy+0xe>
 800765e:	bd10      	pop	{r4, pc}

08007660 <memmove>:
 8007660:	4288      	cmp	r0, r1
 8007662:	b510      	push	{r4, lr}
 8007664:	eb01 0402 	add.w	r4, r1, r2
 8007668:	d902      	bls.n	8007670 <memmove+0x10>
 800766a:	4284      	cmp	r4, r0
 800766c:	4623      	mov	r3, r4
 800766e:	d807      	bhi.n	8007680 <memmove+0x20>
 8007670:	1e43      	subs	r3, r0, #1
 8007672:	42a1      	cmp	r1, r4
 8007674:	d008      	beq.n	8007688 <memmove+0x28>
 8007676:	f811 2b01 	ldrb.w	r2, [r1], #1
 800767a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800767e:	e7f8      	b.n	8007672 <memmove+0x12>
 8007680:	4601      	mov	r1, r0
 8007682:	4402      	add	r2, r0
 8007684:	428a      	cmp	r2, r1
 8007686:	d100      	bne.n	800768a <memmove+0x2a>
 8007688:	bd10      	pop	{r4, pc}
 800768a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800768e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007692:	e7f7      	b.n	8007684 <memmove+0x24>

08007694 <_free_r>:
 8007694:	b538      	push	{r3, r4, r5, lr}
 8007696:	4605      	mov	r5, r0
 8007698:	2900      	cmp	r1, #0
 800769a:	d043      	beq.n	8007724 <_free_r+0x90>
 800769c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80076a0:	1f0c      	subs	r4, r1, #4
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	bfb8      	it	lt
 80076a6:	18e4      	addlt	r4, r4, r3
 80076a8:	f000 f8d0 	bl	800784c <__malloc_lock>
 80076ac:	4a1e      	ldr	r2, [pc, #120]	; (8007728 <_free_r+0x94>)
 80076ae:	6813      	ldr	r3, [r2, #0]
 80076b0:	4610      	mov	r0, r2
 80076b2:	b933      	cbnz	r3, 80076c2 <_free_r+0x2e>
 80076b4:	6063      	str	r3, [r4, #4]
 80076b6:	6014      	str	r4, [r2, #0]
 80076b8:	4628      	mov	r0, r5
 80076ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80076be:	f000 b8cb 	b.w	8007858 <__malloc_unlock>
 80076c2:	42a3      	cmp	r3, r4
 80076c4:	d90a      	bls.n	80076dc <_free_r+0x48>
 80076c6:	6821      	ldr	r1, [r4, #0]
 80076c8:	1862      	adds	r2, r4, r1
 80076ca:	4293      	cmp	r3, r2
 80076cc:	bf01      	itttt	eq
 80076ce:	681a      	ldreq	r2, [r3, #0]
 80076d0:	685b      	ldreq	r3, [r3, #4]
 80076d2:	1852      	addeq	r2, r2, r1
 80076d4:	6022      	streq	r2, [r4, #0]
 80076d6:	6063      	str	r3, [r4, #4]
 80076d8:	6004      	str	r4, [r0, #0]
 80076da:	e7ed      	b.n	80076b8 <_free_r+0x24>
 80076dc:	461a      	mov	r2, r3
 80076de:	685b      	ldr	r3, [r3, #4]
 80076e0:	b10b      	cbz	r3, 80076e6 <_free_r+0x52>
 80076e2:	42a3      	cmp	r3, r4
 80076e4:	d9fa      	bls.n	80076dc <_free_r+0x48>
 80076e6:	6811      	ldr	r1, [r2, #0]
 80076e8:	1850      	adds	r0, r2, r1
 80076ea:	42a0      	cmp	r0, r4
 80076ec:	d10b      	bne.n	8007706 <_free_r+0x72>
 80076ee:	6820      	ldr	r0, [r4, #0]
 80076f0:	4401      	add	r1, r0
 80076f2:	1850      	adds	r0, r2, r1
 80076f4:	4283      	cmp	r3, r0
 80076f6:	6011      	str	r1, [r2, #0]
 80076f8:	d1de      	bne.n	80076b8 <_free_r+0x24>
 80076fa:	6818      	ldr	r0, [r3, #0]
 80076fc:	685b      	ldr	r3, [r3, #4]
 80076fe:	4401      	add	r1, r0
 8007700:	6011      	str	r1, [r2, #0]
 8007702:	6053      	str	r3, [r2, #4]
 8007704:	e7d8      	b.n	80076b8 <_free_r+0x24>
 8007706:	d902      	bls.n	800770e <_free_r+0x7a>
 8007708:	230c      	movs	r3, #12
 800770a:	602b      	str	r3, [r5, #0]
 800770c:	e7d4      	b.n	80076b8 <_free_r+0x24>
 800770e:	6820      	ldr	r0, [r4, #0]
 8007710:	1821      	adds	r1, r4, r0
 8007712:	428b      	cmp	r3, r1
 8007714:	bf01      	itttt	eq
 8007716:	6819      	ldreq	r1, [r3, #0]
 8007718:	685b      	ldreq	r3, [r3, #4]
 800771a:	1809      	addeq	r1, r1, r0
 800771c:	6021      	streq	r1, [r4, #0]
 800771e:	6063      	str	r3, [r4, #4]
 8007720:	6054      	str	r4, [r2, #4]
 8007722:	e7c9      	b.n	80076b8 <_free_r+0x24>
 8007724:	bd38      	pop	{r3, r4, r5, pc}
 8007726:	bf00      	nop
 8007728:	20000438 	.word	0x20000438

0800772c <_malloc_r>:
 800772c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800772e:	1ccd      	adds	r5, r1, #3
 8007730:	f025 0503 	bic.w	r5, r5, #3
 8007734:	3508      	adds	r5, #8
 8007736:	2d0c      	cmp	r5, #12
 8007738:	bf38      	it	cc
 800773a:	250c      	movcc	r5, #12
 800773c:	2d00      	cmp	r5, #0
 800773e:	4606      	mov	r6, r0
 8007740:	db01      	blt.n	8007746 <_malloc_r+0x1a>
 8007742:	42a9      	cmp	r1, r5
 8007744:	d903      	bls.n	800774e <_malloc_r+0x22>
 8007746:	230c      	movs	r3, #12
 8007748:	6033      	str	r3, [r6, #0]
 800774a:	2000      	movs	r0, #0
 800774c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800774e:	f000 f87d 	bl	800784c <__malloc_lock>
 8007752:	4921      	ldr	r1, [pc, #132]	; (80077d8 <_malloc_r+0xac>)
 8007754:	680a      	ldr	r2, [r1, #0]
 8007756:	4614      	mov	r4, r2
 8007758:	b99c      	cbnz	r4, 8007782 <_malloc_r+0x56>
 800775a:	4f20      	ldr	r7, [pc, #128]	; (80077dc <_malloc_r+0xb0>)
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	b923      	cbnz	r3, 800776a <_malloc_r+0x3e>
 8007760:	4621      	mov	r1, r4
 8007762:	4630      	mov	r0, r6
 8007764:	f000 f862 	bl	800782c <_sbrk_r>
 8007768:	6038      	str	r0, [r7, #0]
 800776a:	4629      	mov	r1, r5
 800776c:	4630      	mov	r0, r6
 800776e:	f000 f85d 	bl	800782c <_sbrk_r>
 8007772:	1c43      	adds	r3, r0, #1
 8007774:	d123      	bne.n	80077be <_malloc_r+0x92>
 8007776:	230c      	movs	r3, #12
 8007778:	4630      	mov	r0, r6
 800777a:	6033      	str	r3, [r6, #0]
 800777c:	f000 f86c 	bl	8007858 <__malloc_unlock>
 8007780:	e7e3      	b.n	800774a <_malloc_r+0x1e>
 8007782:	6823      	ldr	r3, [r4, #0]
 8007784:	1b5b      	subs	r3, r3, r5
 8007786:	d417      	bmi.n	80077b8 <_malloc_r+0x8c>
 8007788:	2b0b      	cmp	r3, #11
 800778a:	d903      	bls.n	8007794 <_malloc_r+0x68>
 800778c:	6023      	str	r3, [r4, #0]
 800778e:	441c      	add	r4, r3
 8007790:	6025      	str	r5, [r4, #0]
 8007792:	e004      	b.n	800779e <_malloc_r+0x72>
 8007794:	6863      	ldr	r3, [r4, #4]
 8007796:	42a2      	cmp	r2, r4
 8007798:	bf0c      	ite	eq
 800779a:	600b      	streq	r3, [r1, #0]
 800779c:	6053      	strne	r3, [r2, #4]
 800779e:	4630      	mov	r0, r6
 80077a0:	f000 f85a 	bl	8007858 <__malloc_unlock>
 80077a4:	f104 000b 	add.w	r0, r4, #11
 80077a8:	1d23      	adds	r3, r4, #4
 80077aa:	f020 0007 	bic.w	r0, r0, #7
 80077ae:	1ac2      	subs	r2, r0, r3
 80077b0:	d0cc      	beq.n	800774c <_malloc_r+0x20>
 80077b2:	1a1b      	subs	r3, r3, r0
 80077b4:	50a3      	str	r3, [r4, r2]
 80077b6:	e7c9      	b.n	800774c <_malloc_r+0x20>
 80077b8:	4622      	mov	r2, r4
 80077ba:	6864      	ldr	r4, [r4, #4]
 80077bc:	e7cc      	b.n	8007758 <_malloc_r+0x2c>
 80077be:	1cc4      	adds	r4, r0, #3
 80077c0:	f024 0403 	bic.w	r4, r4, #3
 80077c4:	42a0      	cmp	r0, r4
 80077c6:	d0e3      	beq.n	8007790 <_malloc_r+0x64>
 80077c8:	1a21      	subs	r1, r4, r0
 80077ca:	4630      	mov	r0, r6
 80077cc:	f000 f82e 	bl	800782c <_sbrk_r>
 80077d0:	3001      	adds	r0, #1
 80077d2:	d1dd      	bne.n	8007790 <_malloc_r+0x64>
 80077d4:	e7cf      	b.n	8007776 <_malloc_r+0x4a>
 80077d6:	bf00      	nop
 80077d8:	20000438 	.word	0x20000438
 80077dc:	2000043c 	.word	0x2000043c

080077e0 <_realloc_r>:
 80077e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077e2:	4607      	mov	r7, r0
 80077e4:	4614      	mov	r4, r2
 80077e6:	460e      	mov	r6, r1
 80077e8:	b921      	cbnz	r1, 80077f4 <_realloc_r+0x14>
 80077ea:	4611      	mov	r1, r2
 80077ec:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80077f0:	f7ff bf9c 	b.w	800772c <_malloc_r>
 80077f4:	b922      	cbnz	r2, 8007800 <_realloc_r+0x20>
 80077f6:	f7ff ff4d 	bl	8007694 <_free_r>
 80077fa:	4625      	mov	r5, r4
 80077fc:	4628      	mov	r0, r5
 80077fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007800:	f000 f830 	bl	8007864 <_malloc_usable_size_r>
 8007804:	42a0      	cmp	r0, r4
 8007806:	d20f      	bcs.n	8007828 <_realloc_r+0x48>
 8007808:	4621      	mov	r1, r4
 800780a:	4638      	mov	r0, r7
 800780c:	f7ff ff8e 	bl	800772c <_malloc_r>
 8007810:	4605      	mov	r5, r0
 8007812:	2800      	cmp	r0, #0
 8007814:	d0f2      	beq.n	80077fc <_realloc_r+0x1c>
 8007816:	4631      	mov	r1, r6
 8007818:	4622      	mov	r2, r4
 800781a:	f7ff ff13 	bl	8007644 <memcpy>
 800781e:	4631      	mov	r1, r6
 8007820:	4638      	mov	r0, r7
 8007822:	f7ff ff37 	bl	8007694 <_free_r>
 8007826:	e7e9      	b.n	80077fc <_realloc_r+0x1c>
 8007828:	4635      	mov	r5, r6
 800782a:	e7e7      	b.n	80077fc <_realloc_r+0x1c>

0800782c <_sbrk_r>:
 800782c:	b538      	push	{r3, r4, r5, lr}
 800782e:	2300      	movs	r3, #0
 8007830:	4d05      	ldr	r5, [pc, #20]	; (8007848 <_sbrk_r+0x1c>)
 8007832:	4604      	mov	r4, r0
 8007834:	4608      	mov	r0, r1
 8007836:	602b      	str	r3, [r5, #0]
 8007838:	f7f8 fd88 	bl	800034c <_sbrk>
 800783c:	1c43      	adds	r3, r0, #1
 800783e:	d102      	bne.n	8007846 <_sbrk_r+0x1a>
 8007840:	682b      	ldr	r3, [r5, #0]
 8007842:	b103      	cbz	r3, 8007846 <_sbrk_r+0x1a>
 8007844:	6023      	str	r3, [r4, #0]
 8007846:	bd38      	pop	{r3, r4, r5, pc}
 8007848:	200013c4 	.word	0x200013c4

0800784c <__malloc_lock>:
 800784c:	4801      	ldr	r0, [pc, #4]	; (8007854 <__malloc_lock+0x8>)
 800784e:	f000 b811 	b.w	8007874 <__retarget_lock_acquire_recursive>
 8007852:	bf00      	nop
 8007854:	200013cc 	.word	0x200013cc

08007858 <__malloc_unlock>:
 8007858:	4801      	ldr	r0, [pc, #4]	; (8007860 <__malloc_unlock+0x8>)
 800785a:	f000 b80c 	b.w	8007876 <__retarget_lock_release_recursive>
 800785e:	bf00      	nop
 8007860:	200013cc 	.word	0x200013cc

08007864 <_malloc_usable_size_r>:
 8007864:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007868:	1f18      	subs	r0, r3, #4
 800786a:	2b00      	cmp	r3, #0
 800786c:	bfbc      	itt	lt
 800786e:	580b      	ldrlt	r3, [r1, r0]
 8007870:	18c0      	addlt	r0, r0, r3
 8007872:	4770      	bx	lr

08007874 <__retarget_lock_acquire_recursive>:
 8007874:	4770      	bx	lr

08007876 <__retarget_lock_release_recursive>:
 8007876:	4770      	bx	lr

08007878 <_init>:
 8007878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800787a:	bf00      	nop
 800787c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800787e:	bc08      	pop	{r3}
 8007880:	469e      	mov	lr, r3
 8007882:	4770      	bx	lr

08007884 <_fini>:
 8007884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007886:	bf00      	nop
 8007888:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800788a:	bc08      	pop	{r3}
 800788c:	469e      	mov	lr, r3
 800788e:	4770      	bx	lr
